//go:build !noasm && amd64
// Code generated by GoAT. DO NOT EDIT.

TEXT ·_mm512_mul_const_add_to(SB), $0-32
	MOVQ a+0(FP), DI
	MOVQ b+8(FP), SI
	MOVQ c+16(FP), DX
	MOVQ n+24(FP), CX
	BYTE $0x55                                 // pushq	%rbp
	WORD $0x8948; BYTE $0xe5                   // movq	%rsp, %rbp
	LONG $0xf8e48348                           // andq	$-8, %rsp
	LONG $0x0f418d48                           // leaq	15(%rcx), %rax
	WORD $0x8548; BYTE $0xc9                   // testq	%rcx, %rcx
	LONG $0xc1490f48                           // cmovnsq	%rcx, %rax
	LONG $0x04e8c148                           // shrq	$4, %rax
	WORD $0x8941; BYTE $0xc0                   // movl	%eax, %r8d
	LONG $0x04e0c141                           // shll	$4, %r8d
	WORD $0x2944; BYTE $0xc1                   // subl	%r8d, %ecx
	WORD $0xc085                               // testl	%eax, %eax
	JLE  LBB0_6
	WORD $0xf883; BYTE $0x01                   // cmpl	$1, %eax
	JE   LBB0_4
	WORD $0x8941; BYTE $0xc0                   // movl	%eax, %r8d
	LONG $0xfee08141; WORD $0xffff; BYTE $0x7f // andl	$2147483646, %r8d               # imm = 0x7FFFFFFE

LBB0_3:
	LONG $0x487cf162; WORD $0x0710             // vmovups	(%rdi), %zmm0
	LONG $0x487df262; WORD $0x0e18             // vbroadcastss	(%rsi), %zmm1
	LONG $0x487df262; WORD $0x0aa8             // vfmadd213ps	(%rdx), %zmm0, %zmm1    # zmm1 = (zmm0 * zmm1) + mem
	LONG $0x487cf162; WORD $0x0a11             // vmovups	%zmm1, (%rdx)
	LONG $0x487cf162; WORD $0x4710; BYTE $0x01 // vmovups	64(%rdi), %zmm0
	LONG $0x487df262; WORD $0x0e18             // vbroadcastss	(%rsi), %zmm1
	LONG $0x487df262; WORD $0x4aa8; BYTE $0x01 // vfmadd213ps	64(%rdx), %zmm0, %zmm1  # zmm1 = (zmm0 * zmm1) + mem
	LONG $0x487cf162; WORD $0x4a11; BYTE $0x01 // vmovups	%zmm1, 64(%rdx)
	LONG $0x80ef8348                           // subq	$-128, %rdi
	LONG $0x80ea8348                           // subq	$-128, %rdx
	LONG $0xfec08341                           // addl	$-2, %r8d
	JNE  LBB0_3

LBB0_4:
	WORD $0x01a8                   // testb	$1, %al
	JE   LBB0_6
	LONG $0x487cf162; WORD $0x0710 // vmovups	(%rdi), %zmm0
	LONG $0x487df262; WORD $0x0e18 // vbroadcastss	(%rsi), %zmm1
	LONG $0x487df262; WORD $0x0aa8 // vfmadd213ps	(%rdx), %zmm0, %zmm1    # zmm1 = (zmm0 * zmm1) + mem
	LONG $0x487cf162; WORD $0x0a11 // vmovups	%zmm1, (%rdx)
	LONG $0x40c78348               // addq	$64, %rdi
	LONG $0x40c28348               // addq	$64, %rdx

LBB0_6:
	WORD $0xf983; BYTE $0x07     // cmpl	$7, %ecx
	JLE  LBB0_8
	LONG $0x187de2c4; BYTE $0x06 // vbroadcastss	(%rsi), %ymm0
	LONG $0x0759fcc5             // vmulps	(%rdi), %ymm0, %ymm0
	LONG $0x0258fcc5             // vaddps	(%rdx), %ymm0, %ymm0
	LONG $0x0211fcc5             // vmovups	%ymm0, (%rdx)
	LONG $0x20c78348             // addq	$32, %rdi
	LONG $0x20c28348             // addq	$32, %rdx
	WORD $0xc183; BYTE $0xf8     // addl	$-8, %ecx

LBB0_8:
	WORD $0xc985             // testl	%ecx, %ecx
	JLE  LBB0_13
	WORD $0xc889             // movl	%ecx, %eax
	WORD $0xf983; BYTE $0x01 // cmpl	$1, %ecx
	JNE  LBB0_14
	WORD $0xc931             // xorl	%ecx, %ecx
	JMP  LBB0_11

LBB0_14:
	WORD $0x8941; BYTE $0xc0                   // movl	%eax, %r8d
	LONG $0xfee08141; WORD $0xffff; BYTE $0x7f // andl	$2147483646, %r8d               # imm = 0x7FFFFFFE
	WORD $0xc931                               // xorl	%ecx, %ecx

LBB0_15:
	LONG $0x0410fac5; BYTE $0x8f               // vmovss	(%rdi,%rcx,4), %xmm0            # xmm0 = mem[0],zero,zero,zero
	LONG $0x0e10fac5                           // vmovss	(%rsi), %xmm1                   # xmm1 = mem[0],zero,zero,zero
	LONG $0xa979e2c4; WORD $0x8a0c             // vfmadd213ss	(%rdx,%rcx,4), %xmm0, %xmm1 # xmm1 = (xmm0 * xmm1) + mem
	LONG $0x0c11fac5; BYTE $0x8a               // vmovss	%xmm1, (%rdx,%rcx,4)
	LONG $0x4410fac5; WORD $0x048f             // vmovss	4(%rdi,%rcx,4), %xmm0           # xmm0 = mem[0],zero,zero,zero
	LONG $0x0e10fac5                           // vmovss	(%rsi), %xmm1                   # xmm1 = mem[0],zero,zero,zero
	LONG $0xa979e2c4; WORD $0x8a4c; BYTE $0x04 // vfmadd213ss	4(%rdx,%rcx,4), %xmm0, %xmm1 # xmm1 = (xmm0 * xmm1) + mem
	LONG $0x4c11fac5; WORD $0x048a             // vmovss	%xmm1, 4(%rdx,%rcx,4)
	LONG $0x02c18348                           // addq	$2, %rcx
	WORD $0x3949; BYTE $0xc8                   // cmpq	%rcx, %r8
	JNE  LBB0_15

LBB0_11:
	WORD $0x01a8                   // testb	$1, %al
	JE   LBB0_13
	LONG $0x0410fac5; BYTE $0x8f   // vmovss	(%rdi,%rcx,4), %xmm0            # xmm0 = mem[0],zero,zero,zero
	LONG $0x0e10fac5               // vmovss	(%rsi), %xmm1                   # xmm1 = mem[0],zero,zero,zero
	LONG $0xa979e2c4; WORD $0x8a0c // vfmadd213ss	(%rdx,%rcx,4), %xmm0, %xmm1 # xmm1 = (xmm0 * xmm1) + mem
	LONG $0x0c11fac5; BYTE $0x8a   // vmovss	%xmm1, (%rdx,%rcx,4)

LBB0_13:
	WORD $0x8948; BYTE $0xec // movq	%rbp, %rsp
	BYTE $0x5d               // popq	%rbp
	WORD $0xf8c5; BYTE $0x77 // vzeroupper
	BYTE $0xc3               // retq

TEXT ·_mm512_mul_const_to(SB), $0-32
	MOVQ a+0(FP), DI
	MOVQ b+8(FP), SI
	MOVQ c+16(FP), DX
	MOVQ n+24(FP), CX
	BYTE $0x55                                 // pushq	%rbp
	WORD $0x8948; BYTE $0xe5                   // movq	%rsp, %rbp
	LONG $0xf8e48348                           // andq	$-8, %rsp
	LONG $0x0f418d4c                           // leaq	15(%rcx), %r8
	WORD $0x8548; BYTE $0xc9                   // testq	%rcx, %rcx
	LONG $0xc1490f4c                           // cmovnsq	%rcx, %r8
	LONG $0x04e8c149                           // shrq	$4, %r8
	WORD $0x8944; BYTE $0xc0                   // movl	%r8d, %eax
	WORD $0xe0c1; BYTE $0x04                   // shll	$4, %eax
	WORD $0xc129                               // subl	%eax, %ecx
	WORD $0x8545; BYTE $0xc0                   // testl	%r8d, %r8d
	JLE  LBB1_6
	WORD $0x8944; BYTE $0xc0                   // movl	%r8d, %eax
	WORD $0xe083; BYTE $0x03                   // andl	$3, %eax
	LONG $0x04f88341                           // cmpl	$4, %r8d
	JB   LBB1_4
	LONG $0xfce08141; WORD $0xffff; BYTE $0x7f // andl	$2147483644, %r8d               # imm = 0x7FFFFFFC

LBB1_3:
	LONG $0x487cf162; WORD $0x0710             // vmovups	(%rdi), %zmm0
	LONG $0x587cf162; WORD $0x0659             // vmulps	(%rsi){1to16}, %zmm0, %zmm0
	LONG $0x487cf162; WORD $0x0211             // vmovups	%zmm0, (%rdx)
	LONG $0x487cf162; WORD $0x4710; BYTE $0x01 // vmovups	64(%rdi), %zmm0
	LONG $0x587cf162; WORD $0x0659             // vmulps	(%rsi){1to16}, %zmm0, %zmm0
	LONG $0x487cf162; WORD $0x4211; BYTE $0x01 // vmovups	%zmm0, 64(%rdx)
	LONG $0x487cf162; WORD $0x4710; BYTE $0x02 // vmovups	128(%rdi), %zmm0
	LONG $0x587cf162; WORD $0x0659             // vmulps	(%rsi){1to16}, %zmm0, %zmm0
	LONG $0x487cf162; WORD $0x4211; BYTE $0x02 // vmovups	%zmm0, 128(%rdx)
	LONG $0x487cf162; WORD $0x4710; BYTE $0x03 // vmovups	192(%rdi), %zmm0
	LONG $0x587cf162; WORD $0x0659             // vmulps	(%rsi){1to16}, %zmm0, %zmm0
	LONG $0x487cf162; WORD $0x4211; BYTE $0x03 // vmovups	%zmm0, 192(%rdx)
	LONG $0x00c78148; WORD $0x0001; BYTE $0x00 // addq	$256, %rdi                      # imm = 0x100
	LONG $0x00c28148; WORD $0x0001; BYTE $0x00 // addq	$256, %rdx                      # imm = 0x100
	LONG $0xfcc08341                           // addl	$-4, %r8d
	JNE  LBB1_3

LBB1_4:
	WORD $0xc085 // testl	%eax, %eax
	JE   LBB1_6

LBB1_5:
	LONG $0x487cf162; WORD $0x0710 // vmovups	(%rdi), %zmm0
	LONG $0x587cf162; WORD $0x0659 // vmulps	(%rsi){1to16}, %zmm0, %zmm0
	LONG $0x487cf162; WORD $0x0211 // vmovups	%zmm0, (%rdx)
	LONG $0x40c78348               // addq	$64, %rdi
	LONG $0x40c28348               // addq	$64, %rdx
	WORD $0xc8ff                   // decl	%eax
	JNE  LBB1_5

LBB1_6:
	WORD $0xf983; BYTE $0x07     // cmpl	$7, %ecx
	JLE  LBB1_8
	LONG $0x187de2c4; BYTE $0x06 // vbroadcastss	(%rsi), %ymm0
	LONG $0x0759fcc5             // vmulps	(%rdi), %ymm0, %ymm0
	LONG $0x0211fcc5             // vmovups	%ymm0, (%rdx)
	LONG $0x20c78348             // addq	$32, %rdi
	LONG $0x20c28348             // addq	$32, %rdx
	WORD $0xc183; BYTE $0xf8     // addl	$-8, %ecx

LBB1_8:
	WORD $0xc985             // testl	%ecx, %ecx
	JLE  LBB1_14
	WORD $0x8941; BYTE $0xc8 // movl	%ecx, %r8d
	WORD $0x8944; BYTE $0xc0 // movl	%r8d, %eax
	WORD $0xe083; BYTE $0x03 // andl	$3, %eax
	WORD $0xf983; BYTE $0x04 // cmpl	$4, %ecx
	JAE  LBB1_15
	WORD $0xc931             // xorl	%ecx, %ecx
	JMP  LBB1_11

LBB1_15:
	LONG $0xfce08141; WORD $0xffff; BYTE $0x7f // andl	$2147483644, %r8d               # imm = 0x7FFFFFFC
	WORD $0xc931                               // xorl	%ecx, %ecx

LBB1_16:
	LONG $0x0410fac5; BYTE $0x8f   // vmovss	(%rdi,%rcx,4), %xmm0            # xmm0 = mem[0],zero,zero,zero
	LONG $0x0659fac5               // vmulss	(%rsi), %xmm0, %xmm0
	LONG $0x0411fac5; BYTE $0x8a   // vmovss	%xmm0, (%rdx,%rcx,4)
	LONG $0x4410fac5; WORD $0x048f // vmovss	4(%rdi,%rcx,4), %xmm0           # xmm0 = mem[0],zero,zero,zero
	LONG $0x0659fac5               // vmulss	(%rsi), %xmm0, %xmm0
	LONG $0x4411fac5; WORD $0x048a // vmovss	%xmm0, 4(%rdx,%rcx,4)
	LONG $0x4410fac5; WORD $0x088f // vmovss	8(%rdi,%rcx,4), %xmm0           # xmm0 = mem[0],zero,zero,zero
	LONG $0x0659fac5               // vmulss	(%rsi), %xmm0, %xmm0
	LONG $0x4411fac5; WORD $0x088a // vmovss	%xmm0, 8(%rdx,%rcx,4)
	LONG $0x4410fac5; WORD $0x0c8f // vmovss	12(%rdi,%rcx,4), %xmm0          # xmm0 = mem[0],zero,zero,zero
	LONG $0x0659fac5               // vmulss	(%rsi), %xmm0, %xmm0
	LONG $0x4411fac5; WORD $0x0c8a // vmovss	%xmm0, 12(%rdx,%rcx,4)
	LONG $0x04c18348               // addq	$4, %rcx
	WORD $0x3949; BYTE $0xc8       // cmpq	%rcx, %r8
	JNE  LBB1_16

LBB1_11:
	WORD $0x8548; BYTE $0xc0 // testq	%rax, %rax
	JE   LBB1_14
	LONG $0x8a148d48         // leaq	(%rdx,%rcx,4), %rdx
	LONG $0x8f0c8d48         // leaq	(%rdi,%rcx,4), %rcx
	WORD $0xff31             // xorl	%edi, %edi

LBB1_13:
	LONG $0x0410fac5; BYTE $0xb9 // vmovss	(%rcx,%rdi,4), %xmm0            # xmm0 = mem[0],zero,zero,zero
	LONG $0x0659fac5             // vmulss	(%rsi), %xmm0, %xmm0
	LONG $0x0411fac5; BYTE $0xba // vmovss	%xmm0, (%rdx,%rdi,4)
	WORD $0xff48; BYTE $0xc7     // incq	%rdi
	WORD $0x3948; BYTE $0xf8     // cmpq	%rdi, %rax
	JNE  LBB1_13

LBB1_14:
	WORD $0x8948; BYTE $0xec // movq	%rbp, %rsp
	BYTE $0x5d               // popq	%rbp
	WORD $0xf8c5; BYTE $0x77 // vzeroupper
	BYTE $0xc3               // retq

TEXT ·_mm512_mul_const(SB), $0-32
	MOVQ a+0(FP), DI
	MOVQ b+8(FP), SI
	MOVQ n+16(FP), DX
	BYTE $0x55                     // pushq	%rbp
	WORD $0x8948; BYTE $0xe5       // movq	%rsp, %rbp
	LONG $0xf8e48348               // andq	$-8, %rsp
	LONG $0x0f4a8d48               // leaq	15(%rdx), %rcx
	WORD $0x8548; BYTE $0xd2       // testq	%rdx, %rdx
	LONG $0xca490f48               // cmovnsq	%rdx, %rcx
	LONG $0x04e9c148               // shrq	$4, %rcx
	WORD $0xc889                   // movl	%ecx, %eax
	WORD $0xe0c1; BYTE $0x04       // shll	$4, %eax
	WORD $0xc229                   // subl	%eax, %edx
	WORD $0xc985                   // testl	%ecx, %ecx
	JLE  LBB2_6
	WORD $0xc889                   // movl	%ecx, %eax
	WORD $0xe083; BYTE $0x03       // andl	$3, %eax
	WORD $0xf983; BYTE $0x04       // cmpl	$4, %ecx
	JB   LBB2_4
	LONG $0xfffce181; WORD $0x7fff // andl	$2147483644, %ecx               # imm = 0x7FFFFFFC

LBB2_3:
	LONG $0x487cf162; WORD $0x0710             // vmovups	(%rdi), %zmm0
	LONG $0x487cf162; WORD $0x4f10; BYTE $0x01 // vmovups	64(%rdi), %zmm1
	LONG $0x487cf162; WORD $0x5710; BYTE $0x02 // vmovups	128(%rdi), %zmm2
	LONG $0x587cf162; WORD $0x0659             // vmulps	(%rsi){1to16}, %zmm0, %zmm0
	LONG $0x487cf162; WORD $0x5f10; BYTE $0x03 // vmovups	192(%rdi), %zmm3
	LONG $0x487cf162; WORD $0x0711             // vmovups	%zmm0, (%rdi)
	LONG $0x5874f162; WORD $0x0659             // vmulps	(%rsi){1to16}, %zmm1, %zmm0
	LONG $0x487cf162; WORD $0x4711; BYTE $0x01 // vmovups	%zmm0, 64(%rdi)
	LONG $0x586cf162; WORD $0x0659             // vmulps	(%rsi){1to16}, %zmm2, %zmm0
	LONG $0x487cf162; WORD $0x4711; BYTE $0x02 // vmovups	%zmm0, 128(%rdi)
	LONG $0x5864f162; WORD $0x0659             // vmulps	(%rsi){1to16}, %zmm3, %zmm0
	LONG $0x487cf162; WORD $0x4711; BYTE $0x03 // vmovups	%zmm0, 192(%rdi)
	LONG $0x00c78148; WORD $0x0001; BYTE $0x00 // addq	$256, %rdi                      # imm = 0x100
	WORD $0xc183; BYTE $0xfc                   // addl	$-4, %ecx
	JNE  LBB2_3

LBB2_4:
	WORD $0xc085 // testl	%eax, %eax
	JE   LBB2_6

LBB2_5:
	LONG $0x487cf162; WORD $0x0710 // vmovups	(%rdi), %zmm0
	LONG $0x587cf162; WORD $0x0659 // vmulps	(%rsi){1to16}, %zmm0, %zmm0
	LONG $0x487cf162; WORD $0x0711 // vmovups	%zmm0, (%rdi)
	LONG $0x40c78348               // addq	$64, %rdi
	WORD $0xc8ff                   // decl	%eax
	JNE  LBB2_5

LBB2_6:
	WORD $0xfa83; BYTE $0x07     // cmpl	$7, %edx
	JLE  LBB2_8
	LONG $0x187de2c4; BYTE $0x06 // vbroadcastss	(%rsi), %ymm0
	LONG $0x0759fcc5             // vmulps	(%rdi), %ymm0, %ymm0
	LONG $0x0711fcc5             // vmovups	%ymm0, (%rdi)
	LONG $0x20c78348             // addq	$32, %rdi
	WORD $0xc283; BYTE $0xf8     // addl	$-8, %edx

LBB2_8:
	WORD $0xd285             // testl	%edx, %edx
	JLE  LBB2_14
	WORD $0xd189             // movl	%edx, %ecx
	WORD $0xc889             // movl	%ecx, %eax
	WORD $0xe083; BYTE $0x03 // andl	$3, %eax
	WORD $0xfa83; BYTE $0x04 // cmpl	$4, %edx
	JAE  LBB2_15
	WORD $0xd231             // xorl	%edx, %edx
	JMP  LBB2_11

LBB2_15:
	LONG $0xfffce181; WORD $0x7fff // andl	$2147483644, %ecx               # imm = 0x7FFFFFFC
	WORD $0xd231                   // xorl	%edx, %edx

LBB2_16:
	LONG $0x0610fac5               // vmovss	(%rsi), %xmm0                   # xmm0 = mem[0],zero,zero,zero
	LONG $0x0459fac5; BYTE $0x97   // vmulss	(%rdi,%rdx,4), %xmm0, %xmm0
	LONG $0x0411fac5; BYTE $0x97   // vmovss	%xmm0, (%rdi,%rdx,4)
	LONG $0x0610fac5               // vmovss	(%rsi), %xmm0                   # xmm0 = mem[0],zero,zero,zero
	LONG $0x4459fac5; WORD $0x0497 // vmulss	4(%rdi,%rdx,4), %xmm0, %xmm0
	LONG $0x4411fac5; WORD $0x0497 // vmovss	%xmm0, 4(%rdi,%rdx,4)
	LONG $0x0610fac5               // vmovss	(%rsi), %xmm0                   # xmm0 = mem[0],zero,zero,zero
	LONG $0x4459fac5; WORD $0x0897 // vmulss	8(%rdi,%rdx,4), %xmm0, %xmm0
	LONG $0x4411fac5; WORD $0x0897 // vmovss	%xmm0, 8(%rdi,%rdx,4)
	LONG $0x0610fac5               // vmovss	(%rsi), %xmm0                   # xmm0 = mem[0],zero,zero,zero
	LONG $0x4459fac5; WORD $0x0c97 // vmulss	12(%rdi,%rdx,4), %xmm0, %xmm0
	LONG $0x4411fac5; WORD $0x0c97 // vmovss	%xmm0, 12(%rdi,%rdx,4)
	LONG $0x04c28348               // addq	$4, %rdx
	WORD $0x3948; BYTE $0xd1       // cmpq	%rdx, %rcx
	JNE  LBB2_16

LBB2_11:
	WORD $0x8548; BYTE $0xc0 // testq	%rax, %rax
	JE   LBB2_14
	LONG $0x970c8d48         // leaq	(%rdi,%rdx,4), %rcx
	WORD $0xd231             // xorl	%edx, %edx

LBB2_13:
	LONG $0x0610fac5             // vmovss	(%rsi), %xmm0                   # xmm0 = mem[0],zero,zero,zero
	LONG $0x0459fac5; BYTE $0x91 // vmulss	(%rcx,%rdx,4), %xmm0, %xmm0
	LONG $0x0411fac5; BYTE $0x91 // vmovss	%xmm0, (%rcx,%rdx,4)
	WORD $0xff48; BYTE $0xc2     // incq	%rdx
	WORD $0x3948; BYTE $0xd0     // cmpq	%rdx, %rax
	JNE  LBB2_13

LBB2_14:
	WORD $0x8948; BYTE $0xec // movq	%rbp, %rsp
	BYTE $0x5d               // popq	%rbp
	WORD $0xf8c5; BYTE $0x77 // vzeroupper
	BYTE $0xc3               // retq

TEXT ·_mm512_mul_to(SB), $0-32
	MOVQ a+0(FP), DI
	MOVQ b+8(FP), SI
	MOVQ c+16(FP), DX
	MOVQ n+24(FP), CX
	BYTE $0x55                                 // pushq	%rbp
	WORD $0x8948; BYTE $0xe5                   // movq	%rsp, %rbp
	LONG $0xf8e48348                           // andq	$-8, %rsp
	LONG $0x0f418d4c                           // leaq	15(%rcx), %r8
	WORD $0x8548; BYTE $0xc9                   // testq	%rcx, %rcx
	LONG $0xc1490f4c                           // cmovnsq	%rcx, %r8
	LONG $0x04e8c149                           // shrq	$4, %r8
	WORD $0x8944; BYTE $0xc0                   // movl	%r8d, %eax
	WORD $0xe0c1; BYTE $0x04                   // shll	$4, %eax
	WORD $0xc129                               // subl	%eax, %ecx
	WORD $0x8545; BYTE $0xc0                   // testl	%r8d, %r8d
	JLE  LBB3_6
	WORD $0x8944; BYTE $0xc0                   // movl	%r8d, %eax
	WORD $0xe083; BYTE $0x03                   // andl	$3, %eax
	LONG $0x04f88341                           // cmpl	$4, %r8d
	JB   LBB3_4
	LONG $0xfce08141; WORD $0xffff; BYTE $0x7f // andl	$2147483644, %r8d               # imm = 0x7FFFFFFC

LBB3_3:
	LONG $0x487cf162; WORD $0x0710             // vmovups	(%rdi), %zmm0
	LONG $0x487cf162; WORD $0x0659             // vmulps	(%rsi), %zmm0, %zmm0
	LONG $0x487cf162; WORD $0x0211             // vmovups	%zmm0, (%rdx)
	LONG $0x487cf162; WORD $0x4710; BYTE $0x01 // vmovups	64(%rdi), %zmm0
	LONG $0x487cf162; WORD $0x4659; BYTE $0x01 // vmulps	64(%rsi), %zmm0, %zmm0
	LONG $0x487cf162; WORD $0x4211; BYTE $0x01 // vmovups	%zmm0, 64(%rdx)
	LONG $0x487cf162; WORD $0x4710; BYTE $0x02 // vmovups	128(%rdi), %zmm0
	LONG $0x487cf162; WORD $0x4659; BYTE $0x02 // vmulps	128(%rsi), %zmm0, %zmm0
	LONG $0x487cf162; WORD $0x4211; BYTE $0x02 // vmovups	%zmm0, 128(%rdx)
	LONG $0x487cf162; WORD $0x4710; BYTE $0x03 // vmovups	192(%rdi), %zmm0
	LONG $0x487cf162; WORD $0x4659; BYTE $0x03 // vmulps	192(%rsi), %zmm0, %zmm0
	LONG $0x487cf162; WORD $0x4211; BYTE $0x03 // vmovups	%zmm0, 192(%rdx)
	LONG $0x00c78148; WORD $0x0001; BYTE $0x00 // addq	$256, %rdi                      # imm = 0x100
	LONG $0x00c68148; WORD $0x0001; BYTE $0x00 // addq	$256, %rsi                      # imm = 0x100
	LONG $0x00c28148; WORD $0x0001; BYTE $0x00 // addq	$256, %rdx                      # imm = 0x100
	LONG $0xfcc08341                           // addl	$-4, %r8d
	JNE  LBB3_3

LBB3_4:
	WORD $0xc085 // testl	%eax, %eax
	JE   LBB3_6

LBB3_5:
	LONG $0x487cf162; WORD $0x0710 // vmovups	(%rdi), %zmm0
	LONG $0x487cf162; WORD $0x0659 // vmulps	(%rsi), %zmm0, %zmm0
	LONG $0x487cf162; WORD $0x0211 // vmovups	%zmm0, (%rdx)
	LONG $0x40c78348               // addq	$64, %rdi
	LONG $0x40c68348               // addq	$64, %rsi
	LONG $0x40c28348               // addq	$64, %rdx
	WORD $0xc8ff                   // decl	%eax
	JNE  LBB3_5

LBB3_6:
	WORD $0xf983; BYTE $0x07 // cmpl	$7, %ecx
	JLE  LBB3_8
	LONG $0x0710fcc5         // vmovups	(%rdi), %ymm0
	LONG $0x0659fcc5         // vmulps	(%rsi), %ymm0, %ymm0
	LONG $0x0211fcc5         // vmovups	%ymm0, (%rdx)
	LONG $0x20c78348         // addq	$32, %rdi
	LONG $0x20c68348         // addq	$32, %rsi
	LONG $0x20c28348         // addq	$32, %rdx
	WORD $0xc183; BYTE $0xf8 // addl	$-8, %ecx

LBB3_8:
	WORD $0xc985             // testl	%ecx, %ecx
	JLE  LBB3_14
	WORD $0x8941; BYTE $0xc8 // movl	%ecx, %r8d
	WORD $0x8944; BYTE $0xc0 // movl	%r8d, %eax
	WORD $0xe083; BYTE $0x03 // andl	$3, %eax
	WORD $0xf983; BYTE $0x04 // cmpl	$4, %ecx
	JAE  LBB3_15
	WORD $0xc931             // xorl	%ecx, %ecx
	JMP  LBB3_11

LBB3_15:
	LONG $0xfce08141; WORD $0xffff; BYTE $0x7f // andl	$2147483644, %r8d               # imm = 0x7FFFFFFC
	WORD $0xc931                               // xorl	%ecx, %ecx

LBB3_16:
	LONG $0x0410fac5; BYTE $0x8f   // vmovss	(%rdi,%rcx,4), %xmm0            # xmm0 = mem[0],zero,zero,zero
	LONG $0x0459fac5; BYTE $0x8e   // vmulss	(%rsi,%rcx,4), %xmm0, %xmm0
	LONG $0x0411fac5; BYTE $0x8a   // vmovss	%xmm0, (%rdx,%rcx,4)
	LONG $0x4410fac5; WORD $0x048f // vmovss	4(%rdi,%rcx,4), %xmm0           # xmm0 = mem[0],zero,zero,zero
	LONG $0x4459fac5; WORD $0x048e // vmulss	4(%rsi,%rcx,4), %xmm0, %xmm0
	LONG $0x4411fac5; WORD $0x048a // vmovss	%xmm0, 4(%rdx,%rcx,4)
	LONG $0x4410fac5; WORD $0x088f // vmovss	8(%rdi,%rcx,4), %xmm0           # xmm0 = mem[0],zero,zero,zero
	LONG $0x4459fac5; WORD $0x088e // vmulss	8(%rsi,%rcx,4), %xmm0, %xmm0
	LONG $0x4411fac5; WORD $0x088a // vmovss	%xmm0, 8(%rdx,%rcx,4)
	LONG $0x4410fac5; WORD $0x0c8f // vmovss	12(%rdi,%rcx,4), %xmm0          # xmm0 = mem[0],zero,zero,zero
	LONG $0x4459fac5; WORD $0x0c8e // vmulss	12(%rsi,%rcx,4), %xmm0, %xmm0
	LONG $0x4411fac5; WORD $0x0c8a // vmovss	%xmm0, 12(%rdx,%rcx,4)
	LONG $0x04c18348               // addq	$4, %rcx
	WORD $0x3949; BYTE $0xc8       // cmpq	%rcx, %r8
	JNE  LBB3_16

LBB3_11:
	WORD $0x8548; BYTE $0xc0 // testq	%rax, %rax
	JE   LBB3_14
	LONG $0x8a148d48         // leaq	(%rdx,%rcx,4), %rdx
	LONG $0x8e348d48         // leaq	(%rsi,%rcx,4), %rsi
	LONG $0x8f0c8d48         // leaq	(%rdi,%rcx,4), %rcx
	WORD $0xff31             // xorl	%edi, %edi

LBB3_13:
	LONG $0x0410fac5; BYTE $0xb9 // vmovss	(%rcx,%rdi,4), %xmm0            # xmm0 = mem[0],zero,zero,zero
	LONG $0x0459fac5; BYTE $0xbe // vmulss	(%rsi,%rdi,4), %xmm0, %xmm0
	LONG $0x0411fac5; BYTE $0xba // vmovss	%xmm0, (%rdx,%rdi,4)
	WORD $0xff48; BYTE $0xc7     // incq	%rdi
	WORD $0x3948; BYTE $0xf8     // cmpq	%rdi, %rax
	JNE  LBB3_13

LBB3_14:
	WORD $0x8948; BYTE $0xec // movq	%rbp, %rsp
	BYTE $0x5d               // popq	%rbp
	WORD $0xf8c5; BYTE $0x77 // vzeroupper
	BYTE $0xc3               // retq

TEXT ·_mm512_dot(SB), $0-32
	MOVQ a+0(FP), DI
	MOVQ b+8(FP), SI
	MOVQ n+16(FP), DX
	MOVQ ret+24(FP), CX
	BYTE $0x55                             // pushq	%rbp
	WORD $0x8948; BYTE $0xe5               // movq	%rsp, %rbp
	BYTE $0x53                             // pushq	%rbx
	LONG $0xf8e48348                       // andq	$-8, %rsp
	LONG $0x0f428d4c                       // leaq	15(%rdx), %r8
	WORD $0x8548; BYTE $0xd2               // testq	%rdx, %rdx
	LONG $0xc2490f4c                       // cmovnsq	%rdx, %r8
	LONG $0x04f8c149                       // sarq	$4, %r8
	WORD $0x8944; BYTE $0xc0               // movl	%r8d, %eax
	WORD $0xe0c1; BYTE $0x04               // shll	$4, %eax
	WORD $0xc229                           // subl	%eax, %edx
	WORD $0x8545; BYTE $0xc0               // testl	%r8d, %r8d
	JLE  LBB4_1
	LONG $0x487cf162; WORD $0x0710         // vmovups	(%rdi), %zmm0
	LONG $0x487cf162; WORD $0x0659         // vmulps	(%rsi), %zmm0, %zmm0
	LONG $0x40c78348                       // addq	$64, %rdi
	LONG $0x40c68348                       // addq	$64, %rsi
	LONG $0x01f88341                       // cmpl	$1, %r8d
	JE   LBB4_9
	WORD $0x894d; BYTE $0xc1               // movq	%r8, %r9
	LONG $0x06e1c149                       // shlq	$6, %r9
	QUAD $0x003fffffff80b848; WORD $0x0000 // movabsq	$274877906816, %rax             # imm = 0x3FFFFFFF80
	WORD $0x0149; BYTE $0xc1               // addq	%rax, %r9
	LONG $0x40c88348                       // orq	$64, %rax
	WORD $0x214c; BYTE $0xc8               // andq	%r9, %rax
	LONG $0xff588d45                       // leal	-1(%r8), %r11d
	LONG $0xfe488d45                       // leal	-2(%r8), %r9d
	LONG $0x03f98341                       // cmpl	$3, %r9d
	JAE  LBB4_18
	WORD $0x8949; BYTE $0xf9               // movq	%rdi, %r9
	WORD $0x8949; BYTE $0xf2               // movq	%rsi, %r10
	JMP  LBB4_5

LBB4_1:
	JMP LBB4_9

LBB4_18:
	WORD $0x8944; BYTE $0xdb // movl	%r11d, %ebx
	WORD $0xe383; BYTE $0xfc // andl	$-4, %ebx
	WORD $0x8949; BYTE $0xf9 // movq	%rdi, %r9
	WORD $0x8949; BYTE $0xf2 // movq	%rsi, %r10

LBB4_19:
	LONG $0x487cd162; WORD $0x0910             // vmovups	(%r9), %zmm1
	LONG $0x487cd162; WORD $0x5110; BYTE $0x01 // vmovups	64(%r9), %zmm2
	LONG $0x487cd162; WORD $0x5910; BYTE $0x02 // vmovups	128(%r9), %zmm3
	LONG $0x487dd262; WORD $0x0a98             // vfmadd132ps	(%r10), %zmm0, %zmm1    # zmm1 = (zmm1 * mem) + zmm0
	LONG $0x486dd262; WORD $0x4ab8; BYTE $0x01 // vfmadd231ps	64(%r10), %zmm2, %zmm1  # zmm1 = (zmm2 * mem) + zmm1
	LONG $0x4865d262; WORD $0x4ab8; BYTE $0x02 // vfmadd231ps	128(%r10), %zmm3, %zmm1 # zmm1 = (zmm3 * mem) + zmm1
	LONG $0x487cd162; WORD $0x5110; BYTE $0x03 // vmovups	192(%r9), %zmm2
	LONG $0x487cf162; WORD $0xc128             // vmovaps	%zmm1, %zmm0
	LONG $0x486dd262; WORD $0x42b8; BYTE $0x03 // vfmadd231ps	192(%r10), %zmm2, %zmm0 # zmm0 = (zmm2 * mem) + zmm0
	LONG $0x00c18149; WORD $0x0001; BYTE $0x00 // addq	$256, %r9                       # imm = 0x100
	LONG $0x00c28149; WORD $0x0001; BYTE $0x00 // addq	$256, %r10                      # imm = 0x100
	WORD $0xc383; BYTE $0xfc                   // addl	$-4, %ebx
	JNE  LBB4_19

LBB4_5:
	LONG $0x40588d48         // leaq	64(%rax), %rbx
	LONG $0x03c3f641         // testb	$3, %r11b
	JE   LBB4_8
	WORD $0xfe41; BYTE $0xc8 // decb	%r8b
	LONG $0xc0b60f45         // movzbl	%r8b, %r8d
	LONG $0x03e08341         // andl	$3, %r8d
	LONG $0x06e0c141         // shll	$6, %r8d
	WORD $0x3145; BYTE $0xdb // xorl	%r11d, %r11d

LBB4_7:
	LONG $0x487c9162; WORD $0x0c10; BYTE $0x19 // vmovups	(%r9,%r11), %zmm1
	LONG $0x48759262; WORD $0x04b8; BYTE $0x1a // vfmadd231ps	(%r10,%r11), %zmm1, %zmm0 # zmm0 = (zmm1 * mem) + zmm0
	LONG $0x40c38349                           // addq	$64, %r11
	WORD $0x3945; BYTE $0xd8                   // cmpl	%r11d, %r8d
	JNE  LBB4_7

LBB4_8:
	WORD $0x0148; BYTE $0xc7 // addq	%rax, %rdi
	LONG $0x40c78348         // addq	$64, %rdi
	WORD $0x0148; BYTE $0xde // addq	%rbx, %rsi

LBB4_9:
	LONG $0x48fdf362; WORD $0xc11b; BYTE $0x01 // vextractf64x4	$1, %zmm0, %ymm1
	LONG $0xc058f4c5                           // vaddps	%ymm0, %ymm1, %ymm0
	LONG $0x197de3c4; WORD $0x01c1             // vextractf128	$1, %ymm0, %xmm1
	LONG $0xc058f0c5                           // vaddps	%xmm0, %xmm1, %xmm0
	LONG $0xc8c6f9c5; BYTE $0x01               // vshufpd	$1, %xmm0, %xmm0, %xmm1         # xmm1 = xmm0[1,0]
	LONG $0xc158f8c5                           // vaddps	%xmm1, %xmm0, %xmm0
	LONG $0xc816fac5                           // vmovshdup	%xmm0, %xmm1            # xmm1 = xmm0[1,1,3,3]
	LONG $0xc158f8c5                           // vaddps	%xmm1, %xmm0, %xmm0
	LONG $0x0111fac5                           // vmovss	%xmm0, (%rcx)
	WORD $0xfa83; BYTE $0x07                   // cmpl	$7, %edx
	JLE  LBB4_11
	LONG $0x0f10fcc5                           // vmovups	(%rdi), %ymm1
	LONG $0x0e59f4c5                           // vmulps	(%rsi), %ymm1, %ymm1
	LONG $0x20c78348                           // addq	$32, %rdi
	LONG $0x20c68348                           // addq	$32, %rsi
	LONG $0x197de3c4; WORD $0x01ca             // vextractf128	$1, %ymm1, %xmm2
	LONG $0xc958e8c5                           // vaddps	%xmm1, %xmm2, %xmm1
	LONG $0xd1c6f1c5; BYTE $0x01               // vshufpd	$1, %xmm1, %xmm1, %xmm2         # xmm2 = xmm1[1,0]
	LONG $0xca58f0c5                           // vaddps	%xmm2, %xmm1, %xmm1
	LONG $0xd116fac5                           // vmovshdup	%xmm1, %xmm2            # xmm2 = xmm1[1,1,3,3]
	LONG $0xca58f2c5                           // vaddss	%xmm2, %xmm1, %xmm1
	LONG $0xc158fac5                           // vaddss	%xmm1, %xmm0, %xmm0
	LONG $0x0111fac5                           // vmovss	%xmm0, (%rcx)
	WORD $0xc283; BYTE $0xf8                   // addl	$-8, %edx

LBB4_11:
	WORD $0xd285             // testl	%edx, %edx
	JLE  LBB4_17
	WORD $0x8941; BYTE $0xd0 // movl	%edx, %r8d
	WORD $0x8944; BYTE $0xc0 // movl	%r8d, %eax
	WORD $0xe083; BYTE $0x03 // andl	$3, %eax
	WORD $0xfa83; BYTE $0x04 // cmpl	$4, %edx
	JAE  LBB4_20
	WORD $0xd231             // xorl	%edx, %edx
	JMP  LBB4_14

LBB4_20:
	LONG $0xfce08141; WORD $0xffff; BYTE $0x7f // andl	$2147483644, %r8d               # imm = 0x7FFFFFFC
	WORD $0xd231                               // xorl	%edx, %edx

LBB4_21:
	LONG $0x0c10fac5; BYTE $0x97               // vmovss	(%rdi,%rdx,4), %xmm1            # xmm1 = mem[0],zero,zero,zero
	LONG $0x9979e2c4; WORD $0x960c             // vfmadd132ss	(%rsi,%rdx,4), %xmm0, %xmm1 # xmm1 = (xmm1 * mem) + xmm0
	LONG $0x0911fac5                           // vmovss	%xmm1, (%rcx)
	LONG $0x4410fac5; WORD $0x0497             // vmovss	4(%rdi,%rdx,4), %xmm0           # xmm0 = mem[0],zero,zero,zero
	LONG $0x9971e2c4; WORD $0x9644; BYTE $0x04 // vfmadd132ss	4(%rsi,%rdx,4), %xmm1, %xmm0 # xmm0 = (xmm0 * mem) + xmm1
	LONG $0x0111fac5                           // vmovss	%xmm0, (%rcx)
	LONG $0x4c10fac5; WORD $0x0897             // vmovss	8(%rdi,%rdx,4), %xmm1           # xmm1 = mem[0],zero,zero,zero
	LONG $0x9979e2c4; WORD $0x964c; BYTE $0x08 // vfmadd132ss	8(%rsi,%rdx,4), %xmm0, %xmm1 # xmm1 = (xmm1 * mem) + xmm0
	LONG $0x0911fac5                           // vmovss	%xmm1, (%rcx)
	LONG $0x4410fac5; WORD $0x0c97             // vmovss	12(%rdi,%rdx,4), %xmm0          # xmm0 = mem[0],zero,zero,zero
	LONG $0x9971e2c4; WORD $0x9644; BYTE $0x0c // vfmadd132ss	12(%rsi,%rdx,4), %xmm1, %xmm0 # xmm0 = (xmm0 * mem) + xmm1
	LONG $0x0111fac5                           // vmovss	%xmm0, (%rcx)
	LONG $0x04c28348                           // addq	$4, %rdx
	WORD $0x3949; BYTE $0xd0                   // cmpq	%rdx, %r8
	JNE  LBB4_21

LBB4_14:
	WORD $0x8548; BYTE $0xc0 // testq	%rax, %rax
	JE   LBB4_17
	LONG $0x96348d48         // leaq	(%rsi,%rdx,4), %rsi
	LONG $0x97148d48         // leaq	(%rdi,%rdx,4), %rdx
	WORD $0xff31             // xorl	%edi, %edi

LBB4_16:
	LONG $0x0c10fac5; BYTE $0xba   // vmovss	(%rdx,%rdi,4), %xmm1            # xmm1 = mem[0],zero,zero,zero
	LONG $0xb971e2c4; WORD $0xbe04 // vfmadd231ss	(%rsi,%rdi,4), %xmm1, %xmm0 # xmm0 = (xmm1 * mem) + xmm0
	LONG $0x0111fac5               // vmovss	%xmm0, (%rcx)
	WORD $0xff48; BYTE $0xc7       // incq	%rdi
	WORD $0x3948; BYTE $0xf8       // cmpq	%rdi, %rax
	JNE  LBB4_16

LBB4_17:
	LONG $0xf8658d48         // leaq	-8(%rbp), %rsp
	BYTE $0x5b               // popq	%rbx
	BYTE $0x5d               // popq	%rbp
	WORD $0xf8c5; BYTE $0x77 // vzeroupper
	BYTE $0xc3               // retq

TEXT ·_mm512_euclidean(SB), $0-32
	MOVQ a+0(FP), DI
	MOVQ b+8(FP), SI
	MOVQ n+16(FP), DX
	MOVQ ret+24(FP), CX
	BYTE $0x55                             // pushq	%rbp
	WORD $0x8948; BYTE $0xe5               // movq	%rsp, %rbp
	BYTE $0x53                             // pushq	%rbx
	LONG $0xf8e48348                       // andq	$-8, %rsp
	LONG $0x0f428d4c                       // leaq	15(%rdx), %r8
	WORD $0x8548; BYTE $0xd2               // testq	%rdx, %rdx
	LONG $0xc2490f4c                       // cmovnsq	%rdx, %r8
	LONG $0x04f8c149                       // sarq	$4, %r8
	WORD $0x8944; BYTE $0xc0               // movl	%r8d, %eax
	WORD $0xe0c1; BYTE $0x04               // shll	$4, %eax
	WORD $0xc229                           // subl	%eax, %edx
	WORD $0x8545; BYTE $0xc0               // testl	%r8d, %r8d
	JLE  LBB5_1
	LONG $0x487cf162; WORD $0x0710         // vmovups	(%rdi), %zmm0
	LONG $0x487cf162; WORD $0x065c         // vsubps	(%rsi), %zmm0, %zmm0
	LONG $0x487cf162; WORD $0xc059         // vmulps	%zmm0, %zmm0, %zmm0
	LONG $0x40c78348                       // addq	$64, %rdi
	LONG $0x40c68348                       // addq	$64, %rsi
	LONG $0x01f88341                       // cmpl	$1, %r8d
	JE   LBB5_9
	WORD $0x894d; BYTE $0xc1               // movq	%r8, %r9
	LONG $0x06e1c149                       // shlq	$6, %r9
	QUAD $0x003fffffff80b848; WORD $0x0000 // movabsq	$274877906816, %rax             # imm = 0x3FFFFFFF80
	WORD $0x0149; BYTE $0xc1               // addq	%rax, %r9
	LONG $0x40c88348                       // orq	$64, %rax
	WORD $0x214c; BYTE $0xc8               // andq	%r9, %rax
	LONG $0xff588d45                       // leal	-1(%r8), %r11d
	LONG $0xfe488d45                       // leal	-2(%r8), %r9d
	LONG $0x03f98341                       // cmpl	$3, %r9d
	JAE  LBB5_18
	WORD $0x8949; BYTE $0xf9               // movq	%rdi, %r9
	WORD $0x8949; BYTE $0xf2               // movq	%rsi, %r10
	JMP  LBB5_5

LBB5_1:
	JMP LBB5_9

LBB5_18:
	WORD $0x8944; BYTE $0xdb // movl	%r11d, %ebx
	WORD $0xe383; BYTE $0xfc // andl	$-4, %ebx
	WORD $0x8949; BYTE $0xf9 // movq	%rdi, %r9
	WORD $0x8949; BYTE $0xf2 // movq	%rsi, %r10

LBB5_19:
	LONG $0x487cd162; WORD $0x0910             // vmovups	(%r9), %zmm1
	LONG $0x487cd162; WORD $0x5110; BYTE $0x01 // vmovups	64(%r9), %zmm2
	LONG $0x487cd162; WORD $0x5910; BYTE $0x02 // vmovups	128(%r9), %zmm3
	LONG $0x487cd162; WORD $0x6110; BYTE $0x03 // vmovups	192(%r9), %zmm4
	LONG $0x4874d162; WORD $0x0a5c             // vsubps	(%r10), %zmm1, %zmm1
	LONG $0x4874f162; WORD $0xc959             // vmulps	%zmm1, %zmm1, %zmm1
	LONG $0x487cf162; WORD $0xc158             // vaddps	%zmm1, %zmm0, %zmm0
	LONG $0x486cd162; WORD $0x4a5c; BYTE $0x01 // vsubps	64(%r10), %zmm2, %zmm1
	LONG $0x4874f162; WORD $0xc959             // vmulps	%zmm1, %zmm1, %zmm1
	LONG $0x487cf162; WORD $0xc158             // vaddps	%zmm1, %zmm0, %zmm0
	LONG $0x4864d162; WORD $0x4a5c; BYTE $0x02 // vsubps	128(%r10), %zmm3, %zmm1
	LONG $0x4874f162; WORD $0xc959             // vmulps	%zmm1, %zmm1, %zmm1
	LONG $0x487cf162; WORD $0xc158             // vaddps	%zmm1, %zmm0, %zmm0
	LONG $0x485cd162; WORD $0x4a5c; BYTE $0x03 // vsubps	192(%r10), %zmm4, %zmm1
	LONG $0x4874f162; WORD $0xc959             // vmulps	%zmm1, %zmm1, %zmm1
	LONG $0x487cf162; WORD $0xc158             // vaddps	%zmm1, %zmm0, %zmm0
	LONG $0x00c18149; WORD $0x0001; BYTE $0x00 // addq	$256, %r9                       # imm = 0x100
	LONG $0x00c28149; WORD $0x0001; BYTE $0x00 // addq	$256, %r10                      # imm = 0x100
	WORD $0xc383; BYTE $0xfc                   // addl	$-4, %ebx
	JNE  LBB5_19

LBB5_5:
	LONG $0x40588d48         // leaq	64(%rax), %rbx
	LONG $0x03c3f641         // testb	$3, %r11b
	JE   LBB5_8
	WORD $0xfe41; BYTE $0xc8 // decb	%r8b
	LONG $0xc0b60f45         // movzbl	%r8b, %r8d
	LONG $0x03e08341         // andl	$3, %r8d
	LONG $0x06e0c141         // shll	$6, %r8d
	WORD $0x3145; BYTE $0xdb // xorl	%r11d, %r11d

LBB5_7:
	LONG $0x487c9162; WORD $0x0c10; BYTE $0x19 // vmovups	(%r9,%r11), %zmm1
	LONG $0x48749162; WORD $0x0c5c; BYTE $0x1a // vsubps	(%r10,%r11), %zmm1, %zmm1
	LONG $0x4874f162; WORD $0xc959             // vmulps	%zmm1, %zmm1, %zmm1
	LONG $0x487cf162; WORD $0xc158             // vaddps	%zmm1, %zmm0, %zmm0
	LONG $0x40c38349                           // addq	$64, %r11
	WORD $0x3945; BYTE $0xd8                   // cmpl	%r11d, %r8d
	JNE  LBB5_7

LBB5_8:
	WORD $0x0148; BYTE $0xc7 // addq	%rax, %rdi
	LONG $0x40c78348         // addq	$64, %rdi
	WORD $0x0148; BYTE $0xde // addq	%rbx, %rsi

LBB5_9:
	LONG $0x48fdf362; WORD $0xc11b; BYTE $0x01 // vextractf64x4	$1, %zmm0, %ymm1
	LONG $0xc058f4c5                           // vaddps	%ymm0, %ymm1, %ymm0
	LONG $0x197de3c4; WORD $0x01c1             // vextractf128	$1, %ymm0, %xmm1
	LONG $0xc058f0c5                           // vaddps	%xmm0, %xmm1, %xmm0
	LONG $0xc8c6f9c5; BYTE $0x03               // vshufpd	$3, %xmm0, %xmm0, %xmm1         # xmm1 = xmm0[1,1]
	LONG $0xc158f8c5                           // vaddps	%xmm1, %xmm0, %xmm0
	LONG $0xc816fac5                           // vmovshdup	%xmm0, %xmm1            # xmm1 = xmm0[1,1,3,3]
	LONG $0xc158f8c5                           // vaddps	%xmm1, %xmm0, %xmm0
	LONG $0x0111fac5                           // vmovss	%xmm0, (%rcx)
	WORD $0xfa83; BYTE $0x07                   // cmpl	$7, %edx
	JLE  LBB5_11
	LONG $0x0f10fcc5                           // vmovups	(%rdi), %ymm1
	LONG $0x0e5cf4c5                           // vsubps	(%rsi), %ymm1, %ymm1
	LONG $0xc959f4c5                           // vmulps	%ymm1, %ymm1, %ymm1
	LONG $0x20c78348                           // addq	$32, %rdi
	LONG $0x20c68348                           // addq	$32, %rsi
	LONG $0x197de3c4; WORD $0x01ca             // vextractf128	$1, %ymm1, %xmm2
	LONG $0xc958e8c5                           // vaddps	%xmm1, %xmm2, %xmm1
	LONG $0xd1c6f1c5; BYTE $0x01               // vshufpd	$1, %xmm1, %xmm1, %xmm2         # xmm2 = xmm1[1,0]
	LONG $0xca58f0c5                           // vaddps	%xmm2, %xmm1, %xmm1
	LONG $0xd116fac5                           // vmovshdup	%xmm1, %xmm2            # xmm2 = xmm1[1,1,3,3]
	LONG $0xca58f2c5                           // vaddss	%xmm2, %xmm1, %xmm1
	LONG $0xc158fac5                           // vaddss	%xmm1, %xmm0, %xmm0
	LONG $0x0111fac5                           // vmovss	%xmm0, (%rcx)
	WORD $0xc283; BYTE $0xf8                   // addl	$-8, %edx

LBB5_11:
	WORD $0xd285             // testl	%edx, %edx
	JLE  LBB5_17
	WORD $0x8941; BYTE $0xd0 // movl	%edx, %r8d
	WORD $0x8944; BYTE $0xc0 // movl	%r8d, %eax
	WORD $0xe083; BYTE $0x03 // andl	$3, %eax
	WORD $0xfa83; BYTE $0x04 // cmpl	$4, %edx
	JAE  LBB5_20
	WORD $0xd231             // xorl	%edx, %edx
	JMP  LBB5_14

LBB5_20:
	LONG $0xfce08141; WORD $0xffff; BYTE $0x7f // andl	$2147483644, %r8d               # imm = 0x7FFFFFFC
	WORD $0xd231                               // xorl	%edx, %edx

LBB5_21:
	LONG $0x0c10fac5; BYTE $0x97   // vmovss	(%rdi,%rdx,4), %xmm1            # xmm1 = mem[0],zero,zero,zero
	LONG $0x0c5cf2c5; BYTE $0x96   // vsubss	(%rsi,%rdx,4), %xmm1, %xmm1
	LONG $0xa971e2c4; BYTE $0xc8   // vfmadd213ss	%xmm0, %xmm1, %xmm1     # xmm1 = (xmm1 * xmm1) + xmm0
	LONG $0x0911fac5               // vmovss	%xmm1, (%rcx)
	LONG $0x4410fac5; WORD $0x0497 // vmovss	4(%rdi,%rdx,4), %xmm0           # xmm0 = mem[0],zero,zero,zero
	LONG $0x445cfac5; WORD $0x0496 // vsubss	4(%rsi,%rdx,4), %xmm0, %xmm0
	LONG $0xa979e2c4; BYTE $0xc1   // vfmadd213ss	%xmm1, %xmm0, %xmm0     # xmm0 = (xmm0 * xmm0) + xmm1
	LONG $0x0111fac5               // vmovss	%xmm0, (%rcx)
	LONG $0x4c10fac5; WORD $0x0897 // vmovss	8(%rdi,%rdx,4), %xmm1           # xmm1 = mem[0],zero,zero,zero
	LONG $0x4c5cf2c5; WORD $0x0896 // vsubss	8(%rsi,%rdx,4), %xmm1, %xmm1
	LONG $0xa971e2c4; BYTE $0xc8   // vfmadd213ss	%xmm0, %xmm1, %xmm1     # xmm1 = (xmm1 * xmm1) + xmm0
	LONG $0x0911fac5               // vmovss	%xmm1, (%rcx)
	LONG $0x4410fac5; WORD $0x0c97 // vmovss	12(%rdi,%rdx,4), %xmm0          # xmm0 = mem[0],zero,zero,zero
	LONG $0x445cfac5; WORD $0x0c96 // vsubss	12(%rsi,%rdx,4), %xmm0, %xmm0
	LONG $0xa979e2c4; BYTE $0xc1   // vfmadd213ss	%xmm1, %xmm0, %xmm0     # xmm0 = (xmm0 * xmm0) + xmm1
	LONG $0x0111fac5               // vmovss	%xmm0, (%rcx)
	LONG $0x04c28348               // addq	$4, %rdx
	WORD $0x3949; BYTE $0xd0       // cmpq	%rdx, %r8
	JNE  LBB5_21

LBB5_14:
	WORD $0x8548; BYTE $0xc0 // testq	%rax, %rax
	JE   LBB5_17
	LONG $0x96348d48         // leaq	(%rsi,%rdx,4), %rsi
	LONG $0x97148d48         // leaq	(%rdi,%rdx,4), %rdx
	WORD $0xff31             // xorl	%edi, %edi

LBB5_16:
	LONG $0x0c10fac5; BYTE $0xba // vmovss	(%rdx,%rdi,4), %xmm1            # xmm1 = mem[0],zero,zero,zero
	LONG $0x0c5cf2c5; BYTE $0xbe // vsubss	(%rsi,%rdi,4), %xmm1, %xmm1
	LONG $0xb971e2c4; BYTE $0xc1 // vfmadd231ss	%xmm1, %xmm1, %xmm0     # xmm0 = (xmm1 * xmm1) + xmm0
	LONG $0x0111fac5             // vmovss	%xmm0, (%rcx)
	WORD $0xff48; BYTE $0xc7     // incq	%rdi
	WORD $0x3948; BYTE $0xf8     // cmpq	%rdi, %rax
	JNE  LBB5_16

LBB5_17:
	LONG $0xc051fac5         // vsqrtss	%xmm0, %xmm0, %xmm0
	LONG $0x0111fac5         // vmovss	%xmm0, (%rcx)
	LONG $0xf8658d48         // leaq	-8(%rbp), %rsp
	BYTE $0x5b               // popq	%rbx
	BYTE $0x5d               // popq	%rbp
	WORD $0xf8c5; BYTE $0x77 // vzeroupper
	BYTE $0xc3               // retq
