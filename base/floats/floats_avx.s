//go:build !noasm && amd64
// Code generated by GoAT. DO NOT EDIT.

TEXT ·_mm256_mul_const_add_to(SB), $0-32
	MOVQ a+0(FP), DI
	MOVQ b+8(FP), SI
	MOVQ c+16(FP), DX
	MOVQ n+24(FP), CX
	BYTE $0x55                                 // pushq	%rbp
	WORD $0x8948; BYTE $0xe5                   // movq	%rsp, %rbp
	BYTE $0x53                                 // pushq	%rbx
	LONG $0xf8e48348                           // andq	$-8, %rsp
	LONG $0x07418d4c                           // leaq	7(%rcx), %r8
	WORD $0x8548; BYTE $0xc9                   // testq	%rcx, %rcx
	LONG $0xc1490f4c                           // cmovnsq	%rcx, %r8
	WORD $0x894c; BYTE $0xc0                   // movq	%r8, %rax
	LONG $0x03e8c148                           // shrq	$3, %rax
	LONG $0xf8e08349                           // andq	$-8, %r8
	WORD $0x294c; BYTE $0xc1                   // subq	%r8, %rcx
	WORD $0xc085                               // testl	%eax, %eax
	JLE  LBB0_6
	WORD $0xf883; BYTE $0x01                   // cmpl	$1, %eax
	JE   LBB0_4
	WORD $0x8941; BYTE $0xc0                   // movl	%eax, %r8d
	LONG $0xfee08141; WORD $0xffff; BYTE $0x7f // andl	$2147483646, %r8d               # imm = 0x7FFFFFFE

LBB0_3:
	LONG $0x187de2c4; BYTE $0x06 // vbroadcastss	(%rsi), %ymm0
	LONG $0x0759fcc5             // vmulps	(%rdi), %ymm0, %ymm0
	LONG $0x0258fcc5             // vaddps	(%rdx), %ymm0, %ymm0
	LONG $0x0211fcc5             // vmovups	%ymm0, (%rdx)
	LONG $0x187de2c4; BYTE $0x06 // vbroadcastss	(%rsi), %ymm0
	LONG $0x4759fcc5; BYTE $0x20 // vmulps	32(%rdi), %ymm0, %ymm0
	LONG $0x4258fcc5; BYTE $0x20 // vaddps	32(%rdx), %ymm0, %ymm0
	LONG $0x4211fcc5; BYTE $0x20 // vmovups	%ymm0, 32(%rdx)
	LONG $0x40c78348             // addq	$64, %rdi
	LONG $0x40c28348             // addq	$64, %rdx
	LONG $0xfec08341             // addl	$-2, %r8d
	JNE  LBB0_3

LBB0_4:
	WORD $0x01a8                 // testb	$1, %al
	JE   LBB0_6
	LONG $0x187de2c4; BYTE $0x06 // vbroadcastss	(%rsi), %ymm0
	LONG $0x0759fcc5             // vmulps	(%rdi), %ymm0, %ymm0
	LONG $0x0258fcc5             // vaddps	(%rdx), %ymm0, %ymm0
	LONG $0x0211fcc5             // vmovups	%ymm0, (%rdx)
	LONG $0x20c78348             // addq	$32, %rdi
	LONG $0x20c28348             // addq	$32, %rdx

LBB0_6:
	WORD $0xc985             // testl	%ecx, %ecx
	JLE  LBB0_18
	WORD $0xc889             // movl	%ecx, %eax
	LONG $0x20f88348         // cmpq	$32, %rax
	JAE  LBB0_9
	WORD $0x3145; BYTE $0xc0 // xorl	%r8d, %r8d
	JMP  LBB0_14

LBB0_9:
	LONG $0x82048d4c             // leaq	(%rdx,%rax,4), %r8
	LONG $0x870c8d4c             // leaq	(%rdi,%rax,4), %r9
	LONG $0x04568d4c             // leaq	4(%rsi), %r10
	WORD $0x394c; BYTE $0xca     // cmpq	%r9, %rdx
	LONG $0xc3920f41             // setb	%r11b
	WORD $0x394c; BYTE $0xc7     // cmpq	%r8, %rdi
	WORD $0x920f; BYTE $0xc3     // setb	%bl
	WORD $0x394c; BYTE $0xd2     // cmpq	%r10, %rdx
	LONG $0xc1920f41             // setb	%r9b
	WORD $0x3949; BYTE $0xf0     // cmpq	%rsi, %r8
	LONG $0xc2970f41             // seta	%r10b
	WORD $0x3145; BYTE $0xc0     // xorl	%r8d, %r8d
	WORD $0x8441; BYTE $0xdb     // testb	%bl, %r11b
	JNE  LBB0_14
	WORD $0x2045; BYTE $0xd1     // andb	%r10b, %r9b
	JNE  LBB0_14
	WORD $0x8941; BYTE $0xc9     // movl	%ecx, %r9d
	LONG $0x1fe18341             // andl	$31, %r9d
	WORD $0x8949; BYTE $0xc0     // movq	%rax, %r8
	WORD $0x294d; BYTE $0xc8     // subq	%r9, %r8
	LONG $0x187de2c4; BYTE $0x06 // vbroadcastss	(%rsi), %ymm0
	WORD $0x3145; BYTE $0xd2     // xorl	%r10d, %r10d

LBB0_12:
	LONG $0x597ca1c4; WORD $0x970c             // vmulps	(%rdi,%r10,4), %ymm0, %ymm1
	LONG $0x5874a1c4; WORD $0x920c             // vaddps	(%rdx,%r10,4), %ymm1, %ymm1
	LONG $0x597ca1c4; WORD $0x9754; BYTE $0x20 // vmulps	32(%rdi,%r10,4), %ymm0, %ymm2
	LONG $0x586ca1c4; WORD $0x9254; BYTE $0x20 // vaddps	32(%rdx,%r10,4), %ymm2, %ymm2
	LONG $0x597ca1c4; WORD $0x975c; BYTE $0x40 // vmulps	64(%rdi,%r10,4), %ymm0, %ymm3
	LONG $0x5864a1c4; WORD $0x925c; BYTE $0x40 // vaddps	64(%rdx,%r10,4), %ymm3, %ymm3
	LONG $0x597ca1c4; WORD $0x9764; BYTE $0x60 // vmulps	96(%rdi,%r10,4), %ymm0, %ymm4
	LONG $0x585ca1c4; WORD $0x9264; BYTE $0x60 // vaddps	96(%rdx,%r10,4), %ymm4, %ymm4
	LONG $0x117ca1c4; WORD $0x920c             // vmovups	%ymm1, (%rdx,%r10,4)
	LONG $0x117ca1c4; WORD $0x9254; BYTE $0x20 // vmovups	%ymm2, 32(%rdx,%r10,4)
	LONG $0x117ca1c4; WORD $0x925c; BYTE $0x40 // vmovups	%ymm3, 64(%rdx,%r10,4)
	LONG $0x117ca1c4; WORD $0x9264; BYTE $0x60 // vmovups	%ymm4, 96(%rdx,%r10,4)
	LONG $0x20c28349                           // addq	$32, %r10
	WORD $0x394d; BYTE $0xd0                   // cmpq	%r10, %r8
	JNE  LBB0_12
	WORD $0x854d; BYTE $0xc9                   // testq	%r9, %r9
	JE   LBB0_18

LBB0_14:
	WORD $0x2944; BYTE $0xc1       // subl	%r8d, %ecx
	LONG $0x01488d4d               // leaq	1(%r8), %r9
	WORD $0xc1f6; BYTE $0x01       // testb	$1, %cl
	JE   LBB0_16
	LONG $0x107aa1c4; WORD $0x8704 // vmovss	(%rdi,%r8,4), %xmm0             # xmm0 = mem[0],zero,zero,zero
	LONG $0x0659fac5               // vmulss	(%rsi), %xmm0, %xmm0
	LONG $0x587aa1c4; WORD $0x8204 // vaddss	(%rdx,%r8,4), %xmm0, %xmm0
	LONG $0x117aa1c4; WORD $0x8204 // vmovss	%xmm0, (%rdx,%r8,4)
	WORD $0x894d; BYTE $0xc8       // movq	%r9, %r8

LBB0_16:
	WORD $0x394c; BYTE $0xc8 // cmpq	%r9, %rax
	JE   LBB0_18

LBB0_17:
	LONG $0x107aa1c4; WORD $0x8704             // vmovss	(%rdi,%r8,4), %xmm0             # xmm0 = mem[0],zero,zero,zero
	LONG $0x0659fac5                           // vmulss	(%rsi), %xmm0, %xmm0
	LONG $0x587aa1c4; WORD $0x8204             // vaddss	(%rdx,%r8,4), %xmm0, %xmm0
	LONG $0x117aa1c4; WORD $0x8204             // vmovss	%xmm0, (%rdx,%r8,4)
	LONG $0x107aa1c4; WORD $0x8744; BYTE $0x04 // vmovss	4(%rdi,%r8,4), %xmm0            # xmm0 = mem[0],zero,zero,zero
	LONG $0x0659fac5                           // vmulss	(%rsi), %xmm0, %xmm0
	LONG $0x587aa1c4; WORD $0x8244; BYTE $0x04 // vaddss	4(%rdx,%r8,4), %xmm0, %xmm0
	LONG $0x117aa1c4; WORD $0x8244; BYTE $0x04 // vmovss	%xmm0, 4(%rdx,%r8,4)
	LONG $0x02c08349                           // addq	$2, %r8
	WORD $0x394c; BYTE $0xc0                   // cmpq	%r8, %rax
	JNE  LBB0_17

LBB0_18:
	LONG $0xf8658d48         // leaq	-8(%rbp), %rsp
	BYTE $0x5b               // popq	%rbx
	BYTE $0x5d               // popq	%rbp
	WORD $0xf8c5; BYTE $0x77 // vzeroupper
	BYTE $0xc3               // retq

TEXT ·_mm256_mul_const_to(SB), $0-32
	MOVQ a+0(FP), DI
	MOVQ b+8(FP), SI
	MOVQ c+16(FP), DX
	MOVQ n+24(FP), CX
	BYTE $0x55                                 // pushq	%rbp
	WORD $0x8948; BYTE $0xe5                   // movq	%rsp, %rbp
	BYTE $0x53                                 // pushq	%rbx
	LONG $0xf8e48348                           // andq	$-8, %rsp
	LONG $0x07418d4c                           // leaq	7(%rcx), %r8
	WORD $0x8548; BYTE $0xc9                   // testq	%rcx, %rcx
	LONG $0xc1490f4c                           // cmovnsq	%rcx, %r8
	WORD $0x894c; BYTE $0xc0                   // movq	%r8, %rax
	LONG $0x03e8c148                           // shrq	$3, %rax
	LONG $0xf8e08349                           // andq	$-8, %r8
	WORD $0x294c; BYTE $0xc1                   // subq	%r8, %rcx
	WORD $0xc085                               // testl	%eax, %eax
	JLE  LBB1_6
	WORD $0xf883; BYTE $0x01                   // cmpl	$1, %eax
	JE   LBB1_4
	WORD $0x8941; BYTE $0xc0                   // movl	%eax, %r8d
	LONG $0xfee08141; WORD $0xffff; BYTE $0x7f // andl	$2147483646, %r8d               # imm = 0x7FFFFFFE

LBB1_3:
	LONG $0x187de2c4; BYTE $0x06 // vbroadcastss	(%rsi), %ymm0
	LONG $0x0759fcc5             // vmulps	(%rdi), %ymm0, %ymm0
	LONG $0x0211fcc5             // vmovups	%ymm0, (%rdx)
	LONG $0x187de2c4; BYTE $0x06 // vbroadcastss	(%rsi), %ymm0
	LONG $0x4759fcc5; BYTE $0x20 // vmulps	32(%rdi), %ymm0, %ymm0
	LONG $0x4211fcc5; BYTE $0x20 // vmovups	%ymm0, 32(%rdx)
	LONG $0x40c78348             // addq	$64, %rdi
	LONG $0x40c28348             // addq	$64, %rdx
	LONG $0xfec08341             // addl	$-2, %r8d
	JNE  LBB1_3

LBB1_4:
	WORD $0x01a8                 // testb	$1, %al
	JE   LBB1_6
	LONG $0x187de2c4; BYTE $0x06 // vbroadcastss	(%rsi), %ymm0
	LONG $0x0759fcc5             // vmulps	(%rdi), %ymm0, %ymm0
	LONG $0x0211fcc5             // vmovups	%ymm0, (%rdx)
	LONG $0x20c78348             // addq	$32, %rdi
	LONG $0x20c28348             // addq	$32, %rdx

LBB1_6:
	WORD $0xc985             // testl	%ecx, %ecx
	JLE  LBB1_19
	WORD $0xc889             // movl	%ecx, %eax
	LONG $0x20f88348         // cmpq	$32, %rax
	JAE  LBB1_9
	WORD $0x3145; BYTE $0xc0 // xorl	%r8d, %r8d
	JMP  LBB1_14

LBB1_9:
	LONG $0x82048d4c             // leaq	(%rdx,%rax,4), %r8
	LONG $0x870c8d4c             // leaq	(%rdi,%rax,4), %r9
	LONG $0x04568d4c             // leaq	4(%rsi), %r10
	WORD $0x394c; BYTE $0xca     // cmpq	%r9, %rdx
	LONG $0xc3920f41             // setb	%r11b
	WORD $0x394c; BYTE $0xc7     // cmpq	%r8, %rdi
	WORD $0x920f; BYTE $0xc3     // setb	%bl
	WORD $0x394c; BYTE $0xd2     // cmpq	%r10, %rdx
	LONG $0xc1920f41             // setb	%r9b
	WORD $0x3949; BYTE $0xf0     // cmpq	%rsi, %r8
	LONG $0xc2970f41             // seta	%r10b
	WORD $0x3145; BYTE $0xc0     // xorl	%r8d, %r8d
	WORD $0x8441; BYTE $0xdb     // testb	%bl, %r11b
	JNE  LBB1_14
	WORD $0x2045; BYTE $0xd1     // andb	%r10b, %r9b
	JNE  LBB1_14
	WORD $0x8941; BYTE $0xc9     // movl	%ecx, %r9d
	LONG $0x1fe18341             // andl	$31, %r9d
	WORD $0x8949; BYTE $0xc0     // movq	%rax, %r8
	WORD $0x294d; BYTE $0xc8     // subq	%r9, %r8
	LONG $0x187de2c4; BYTE $0x06 // vbroadcastss	(%rsi), %ymm0
	WORD $0x3145; BYTE $0xd2     // xorl	%r10d, %r10d

LBB1_12:
	LONG $0x597ca1c4; WORD $0x970c             // vmulps	(%rdi,%r10,4), %ymm0, %ymm1
	LONG $0x597ca1c4; WORD $0x9754; BYTE $0x20 // vmulps	32(%rdi,%r10,4), %ymm0, %ymm2
	LONG $0x597ca1c4; WORD $0x975c; BYTE $0x40 // vmulps	64(%rdi,%r10,4), %ymm0, %ymm3
	LONG $0x597ca1c4; WORD $0x9764; BYTE $0x60 // vmulps	96(%rdi,%r10,4), %ymm0, %ymm4
	LONG $0x117ca1c4; WORD $0x920c             // vmovups	%ymm1, (%rdx,%r10,4)
	LONG $0x117ca1c4; WORD $0x9254; BYTE $0x20 // vmovups	%ymm2, 32(%rdx,%r10,4)
	LONG $0x117ca1c4; WORD $0x925c; BYTE $0x40 // vmovups	%ymm3, 64(%rdx,%r10,4)
	LONG $0x117ca1c4; WORD $0x9264; BYTE $0x60 // vmovups	%ymm4, 96(%rdx,%r10,4)
	LONG $0x20c28349                           // addq	$32, %r10
	WORD $0x394d; BYTE $0xd0                   // cmpq	%r10, %r8
	JNE  LBB1_12
	WORD $0x854d; BYTE $0xc9                   // testq	%r9, %r9
	JE   LBB1_19

LBB1_14:
	WORD $0x2944; BYTE $0xc1 // subl	%r8d, %ecx
	WORD $0x894d; BYTE $0xc1 // movq	%r8, %r9
	WORD $0xe183; BYTE $0x03 // andl	$3, %ecx
	JE   LBB1_17
	WORD $0x894d; BYTE $0xc1 // movq	%r8, %r9

LBB1_16:
	LONG $0x107aa1c4; WORD $0x8f04 // vmovss	(%rdi,%r9,4), %xmm0             # xmm0 = mem[0],zero,zero,zero
	LONG $0x0659fac5               // vmulss	(%rsi), %xmm0, %xmm0
	LONG $0x117aa1c4; WORD $0x8a04 // vmovss	%xmm0, (%rdx,%r9,4)
	WORD $0xff49; BYTE $0xc1       // incq	%r9
	WORD $0xff48; BYTE $0xc9       // decq	%rcx
	JNE  LBB1_16

LBB1_17:
	WORD $0x2949; BYTE $0xc0 // subq	%rax, %r8
	LONG $0xfcf88349         // cmpq	$-4, %r8
	JA   LBB1_19

LBB1_18:
	LONG $0x107aa1c4; WORD $0x8f04             // vmovss	(%rdi,%r9,4), %xmm0             # xmm0 = mem[0],zero,zero,zero
	LONG $0x0659fac5                           // vmulss	(%rsi), %xmm0, %xmm0
	LONG $0x117aa1c4; WORD $0x8a04             // vmovss	%xmm0, (%rdx,%r9,4)
	LONG $0x107aa1c4; WORD $0x8f44; BYTE $0x04 // vmovss	4(%rdi,%r9,4), %xmm0            # xmm0 = mem[0],zero,zero,zero
	LONG $0x0659fac5                           // vmulss	(%rsi), %xmm0, %xmm0
	LONG $0x117aa1c4; WORD $0x8a44; BYTE $0x04 // vmovss	%xmm0, 4(%rdx,%r9,4)
	LONG $0x107aa1c4; WORD $0x8f44; BYTE $0x08 // vmovss	8(%rdi,%r9,4), %xmm0            # xmm0 = mem[0],zero,zero,zero
	LONG $0x0659fac5                           // vmulss	(%rsi), %xmm0, %xmm0
	LONG $0x117aa1c4; WORD $0x8a44; BYTE $0x08 // vmovss	%xmm0, 8(%rdx,%r9,4)
	LONG $0x107aa1c4; WORD $0x8f44; BYTE $0x0c // vmovss	12(%rdi,%r9,4), %xmm0           # xmm0 = mem[0],zero,zero,zero
	LONG $0x0659fac5                           // vmulss	(%rsi), %xmm0, %xmm0
	LONG $0x117aa1c4; WORD $0x8a44; BYTE $0x0c // vmovss	%xmm0, 12(%rdx,%r9,4)
	LONG $0x04c18349                           // addq	$4, %r9
	WORD $0x394c; BYTE $0xc8                   // cmpq	%r9, %rax
	JNE  LBB1_18

LBB1_19:
	LONG $0xf8658d48         // leaq	-8(%rbp), %rsp
	BYTE $0x5b               // popq	%rbx
	BYTE $0x5d               // popq	%rbp
	WORD $0xf8c5; BYTE $0x77 // vzeroupper
	BYTE $0xc3               // retq

TEXT ·_mm256_mul_const(SB), $0-32
	MOVQ a+0(FP), DI
	MOVQ b+8(FP), SI
	MOVQ n+16(FP), DX
	BYTE $0x55                     // pushq	%rbp
	WORD $0x8948; BYTE $0xe5       // movq	%rsp, %rbp
	LONG $0xf8e48348               // andq	$-8, %rsp
	LONG $0x074a8d48               // leaq	7(%rdx), %rcx
	WORD $0x8548; BYTE $0xd2       // testq	%rdx, %rdx
	LONG $0xca490f48               // cmovnsq	%rdx, %rcx
	WORD $0x8948; BYTE $0xc8       // movq	%rcx, %rax
	LONG $0x03e8c148               // shrq	$3, %rax
	LONG $0xf8e18348               // andq	$-8, %rcx
	WORD $0x2948; BYTE $0xca       // subq	%rcx, %rdx
	WORD $0xc085                   // testl	%eax, %eax
	JLE  LBB2_6
	WORD $0xf883; BYTE $0x01       // cmpl	$1, %eax
	JE   LBB2_4
	WORD $0xc189                   // movl	%eax, %ecx
	LONG $0xfffee181; WORD $0x7fff // andl	$2147483646, %ecx               # imm = 0x7FFFFFFE

LBB2_3:
	LONG $0x187de2c4; BYTE $0x06 // vbroadcastss	(%rsi), %ymm0
	LONG $0x0759fcc5             // vmulps	(%rdi), %ymm0, %ymm0
	LONG $0x0711fcc5             // vmovups	%ymm0, (%rdi)
	LONG $0x187de2c4; BYTE $0x06 // vbroadcastss	(%rsi), %ymm0
	LONG $0x4759fcc5; BYTE $0x20 // vmulps	32(%rdi), %ymm0, %ymm0
	LONG $0x4711fcc5; BYTE $0x20 // vmovups	%ymm0, 32(%rdi)
	LONG $0x40c78348             // addq	$64, %rdi
	WORD $0xc183; BYTE $0xfe     // addl	$-2, %ecx
	JNE  LBB2_3

LBB2_4:
	WORD $0x01a8                 // testb	$1, %al
	JE   LBB2_6
	LONG $0x187de2c4; BYTE $0x06 // vbroadcastss	(%rsi), %ymm0
	LONG $0x0759fcc5             // vmulps	(%rdi), %ymm0, %ymm0
	LONG $0x0711fcc5             // vmovups	%ymm0, (%rdi)
	LONG $0x20c78348             // addq	$32, %rdi

LBB2_6:
	WORD $0xd285             // testl	%edx, %edx
	JLE  LBB2_20
	WORD $0xd089             // movl	%edx, %eax
	LONG $0x20f88348         // cmpq	$32, %rax
	JB   LBB2_8
	LONG $0x044e8d48         // leaq	4(%rsi), %rcx
	WORD $0x3948; BYTE $0xcf // cmpq	%rcx, %rdi
	JAE  LBB2_12
	LONG $0x870c8d48         // leaq	(%rdi,%rax,4), %rcx
	WORD $0x3948; BYTE $0xf1 // cmpq	%rsi, %rcx
	JBE  LBB2_12

LBB2_8:
	WORD $0xc931 // xorl	%ecx, %ecx

LBB2_15:
	WORD $0xca29             // subl	%ecx, %edx
	WORD $0x8949; BYTE $0xc8 // movq	%rcx, %r8
	WORD $0xe283; BYTE $0x03 // andl	$3, %edx
	JE   LBB2_18
	WORD $0x8949; BYTE $0xc8 // movq	%rcx, %r8

LBB2_17:
	LONG $0x0610fac5               // vmovss	(%rsi), %xmm0                   # xmm0 = mem[0],zero,zero,zero
	LONG $0x597aa1c4; WORD $0x8704 // vmulss	(%rdi,%r8,4), %xmm0, %xmm0
	LONG $0x117aa1c4; WORD $0x8704 // vmovss	%xmm0, (%rdi,%r8,4)
	WORD $0xff49; BYTE $0xc0       // incq	%r8
	WORD $0xff48; BYTE $0xca       // decq	%rdx
	JNE  LBB2_17

LBB2_18:
	WORD $0x2948; BYTE $0xc1 // subq	%rax, %rcx
	LONG $0xfcf98348         // cmpq	$-4, %rcx
	JA   LBB2_20

LBB2_19:
	LONG $0x0610fac5                           // vmovss	(%rsi), %xmm0                   # xmm0 = mem[0],zero,zero,zero
	LONG $0x597aa1c4; WORD $0x8704             // vmulss	(%rdi,%r8,4), %xmm0, %xmm0
	LONG $0x117aa1c4; WORD $0x8704             // vmovss	%xmm0, (%rdi,%r8,4)
	LONG $0x0610fac5                           // vmovss	(%rsi), %xmm0                   # xmm0 = mem[0],zero,zero,zero
	LONG $0x597aa1c4; WORD $0x8744; BYTE $0x04 // vmulss	4(%rdi,%r8,4), %xmm0, %xmm0
	LONG $0x117aa1c4; WORD $0x8744; BYTE $0x04 // vmovss	%xmm0, 4(%rdi,%r8,4)
	LONG $0x0610fac5                           // vmovss	(%rsi), %xmm0                   # xmm0 = mem[0],zero,zero,zero
	LONG $0x597aa1c4; WORD $0x8744; BYTE $0x08 // vmulss	8(%rdi,%r8,4), %xmm0, %xmm0
	LONG $0x117aa1c4; WORD $0x8744; BYTE $0x08 // vmovss	%xmm0, 8(%rdi,%r8,4)
	LONG $0x0610fac5                           // vmovss	(%rsi), %xmm0                   # xmm0 = mem[0],zero,zero,zero
	LONG $0x597aa1c4; WORD $0x8744; BYTE $0x0c // vmulss	12(%rdi,%r8,4), %xmm0, %xmm0
	LONG $0x117aa1c4; WORD $0x8744; BYTE $0x0c // vmovss	%xmm0, 12(%rdi,%r8,4)
	LONG $0x04c08349                           // addq	$4, %r8
	WORD $0x394c; BYTE $0xc0                   // cmpq	%r8, %rax
	JNE  LBB2_19

LBB2_20:
	WORD $0x8948; BYTE $0xec // movq	%rbp, %rsp
	BYTE $0x5d               // popq	%rbp
	WORD $0xf8c5; BYTE $0x77 // vzeroupper
	BYTE $0xc3               // retq

LBB2_12:
	WORD $0x8941; BYTE $0xd0     // movl	%edx, %r8d
	LONG $0x1fe08341             // andl	$31, %r8d
	WORD $0x8948; BYTE $0xc1     // movq	%rax, %rcx
	WORD $0x294c; BYTE $0xc1     // subq	%r8, %rcx
	LONG $0x187de2c4; BYTE $0x06 // vbroadcastss	(%rsi), %ymm0
	WORD $0x3145; BYTE $0xc9     // xorl	%r9d, %r9d

LBB2_13:
	LONG $0x597ca1c4; WORD $0x8f0c             // vmulps	(%rdi,%r9,4), %ymm0, %ymm1
	LONG $0x597ca1c4; WORD $0x8f54; BYTE $0x20 // vmulps	32(%rdi,%r9,4), %ymm0, %ymm2
	LONG $0x597ca1c4; WORD $0x8f5c; BYTE $0x40 // vmulps	64(%rdi,%r9,4), %ymm0, %ymm3
	LONG $0x597ca1c4; WORD $0x8f64; BYTE $0x60 // vmulps	96(%rdi,%r9,4), %ymm0, %ymm4
	LONG $0x117ca1c4; WORD $0x8f0c             // vmovups	%ymm1, (%rdi,%r9,4)
	LONG $0x117ca1c4; WORD $0x8f54; BYTE $0x20 // vmovups	%ymm2, 32(%rdi,%r9,4)
	LONG $0x117ca1c4; WORD $0x8f5c; BYTE $0x40 // vmovups	%ymm3, 64(%rdi,%r9,4)
	LONG $0x117ca1c4; WORD $0x8f64; BYTE $0x60 // vmovups	%ymm4, 96(%rdi,%r9,4)
	LONG $0x20c18349                           // addq	$32, %r9
	WORD $0x394c; BYTE $0xc9                   // cmpq	%r9, %rcx
	JNE  LBB2_13
	WORD $0x854d; BYTE $0xc0                   // testq	%r8, %r8
	JNE  LBB2_15
	JMP  LBB2_20

TEXT ·_mm256_mul_to(SB), $0-32
	MOVQ a+0(FP), DI
	MOVQ b+8(FP), SI
	MOVQ c+16(FP), DX
	MOVQ n+24(FP), CX
	BYTE $0x55                                 // pushq	%rbp
	WORD $0x8948; BYTE $0xe5                   // movq	%rsp, %rbp
	LONG $0xf8e48348                           // andq	$-8, %rsp
	LONG $0x07418d48                           // leaq	7(%rcx), %rax
	WORD $0x8548; BYTE $0xc9                   // testq	%rcx, %rcx
	LONG $0xc1490f48                           // cmovnsq	%rcx, %rax
	WORD $0x8949; BYTE $0xc0                   // movq	%rax, %r8
	LONG $0x03e8c149                           // shrq	$3, %r8
	LONG $0xf8e08348                           // andq	$-8, %rax
	WORD $0x2948; BYTE $0xc1                   // subq	%rax, %rcx
	WORD $0x8545; BYTE $0xc0                   // testl	%r8d, %r8d
	JLE  LBB3_6
	WORD $0x8944; BYTE $0xc0                   // movl	%r8d, %eax
	WORD $0xe083; BYTE $0x03                   // andl	$3, %eax
	LONG $0x04f88341                           // cmpl	$4, %r8d
	JB   LBB3_4
	LONG $0xfce08141; WORD $0xffff; BYTE $0x7f // andl	$2147483644, %r8d               # imm = 0x7FFFFFFC

LBB3_3:
	LONG $0x0710fcc5             // vmovups	(%rdi), %ymm0
	LONG $0x0659fcc5             // vmulps	(%rsi), %ymm0, %ymm0
	LONG $0x0211fcc5             // vmovups	%ymm0, (%rdx)
	LONG $0x4710fcc5; BYTE $0x20 // vmovups	32(%rdi), %ymm0
	LONG $0x4659fcc5; BYTE $0x20 // vmulps	32(%rsi), %ymm0, %ymm0
	LONG $0x4211fcc5; BYTE $0x20 // vmovups	%ymm0, 32(%rdx)
	LONG $0x4710fcc5; BYTE $0x40 // vmovups	64(%rdi), %ymm0
	LONG $0x4659fcc5; BYTE $0x40 // vmulps	64(%rsi), %ymm0, %ymm0
	LONG $0x4211fcc5; BYTE $0x40 // vmovups	%ymm0, 64(%rdx)
	LONG $0x4710fcc5; BYTE $0x60 // vmovups	96(%rdi), %ymm0
	LONG $0x4659fcc5; BYTE $0x60 // vmulps	96(%rsi), %ymm0, %ymm0
	LONG $0x4211fcc5; BYTE $0x60 // vmovups	%ymm0, 96(%rdx)
	LONG $0x80ef8348             // subq	$-128, %rdi
	LONG $0x80ee8348             // subq	$-128, %rsi
	LONG $0x80ea8348             // subq	$-128, %rdx
	LONG $0xfcc08341             // addl	$-4, %r8d
	JNE  LBB3_3

LBB3_4:
	WORD $0xc085 // testl	%eax, %eax
	JE   LBB3_6

LBB3_5:
	LONG $0x0710fcc5 // vmovups	(%rdi), %ymm0
	LONG $0x0659fcc5 // vmulps	(%rsi), %ymm0, %ymm0
	LONG $0x0211fcc5 // vmovups	%ymm0, (%rdx)
	LONG $0x20c78348 // addq	$32, %rdi
	LONG $0x20c68348 // addq	$32, %rsi
	LONG $0x20c28348 // addq	$32, %rdx
	WORD $0xc8ff     // decl	%eax
	JNE  LBB3_5

LBB3_6:
	WORD $0xc985             // testl	%ecx, %ecx
	JLE  LBB3_19
	WORD $0xc889             // movl	%ecx, %eax
	LONG $0x20f88348         // cmpq	$32, %rax
	JAE  LBB3_9
	WORD $0x3145; BYTE $0xc0 // xorl	%r8d, %r8d
	JMP  LBB3_14

LBB3_9:
	WORD $0x8949; BYTE $0xd1                   // movq	%rdx, %r9
	WORD $0x2949; BYTE $0xf9                   // subq	%rdi, %r9
	WORD $0x3145; BYTE $0xc0                   // xorl	%r8d, %r8d
	LONG $0x80f98149; WORD $0x0000; BYTE $0x00 // cmpq	$128, %r9
	JB   LBB3_14
	WORD $0x8949; BYTE $0xd1                   // movq	%rdx, %r9
	WORD $0x2949; BYTE $0xf1                   // subq	%rsi, %r9
	LONG $0x80f98149; WORD $0x0000; BYTE $0x00 // cmpq	$128, %r9
	JB   LBB3_14
	WORD $0x8941; BYTE $0xc9                   // movl	%ecx, %r9d
	LONG $0x1fe18341                           // andl	$31, %r9d
	WORD $0x8949; BYTE $0xc0                   // movq	%rax, %r8
	WORD $0x294d; BYTE $0xc8                   // subq	%r9, %r8
	WORD $0x3145; BYTE $0xd2                   // xorl	%r10d, %r10d

LBB3_12:
	LONG $0x107ca1c4; WORD $0x9704             // vmovups	(%rdi,%r10,4), %ymm0
	LONG $0x107ca1c4; WORD $0x974c; BYTE $0x20 // vmovups	32(%rdi,%r10,4), %ymm1
	LONG $0x107ca1c4; WORD $0x9754; BYTE $0x40 // vmovups	64(%rdi,%r10,4), %ymm2
	LONG $0x107ca1c4; WORD $0x975c; BYTE $0x60 // vmovups	96(%rdi,%r10,4), %ymm3
	LONG $0x597ca1c4; WORD $0x9604             // vmulps	(%rsi,%r10,4), %ymm0, %ymm0
	LONG $0x5974a1c4; WORD $0x964c; BYTE $0x20 // vmulps	32(%rsi,%r10,4), %ymm1, %ymm1
	LONG $0x596ca1c4; WORD $0x9654; BYTE $0x40 // vmulps	64(%rsi,%r10,4), %ymm2, %ymm2
	LONG $0x5964a1c4; WORD $0x965c; BYTE $0x60 // vmulps	96(%rsi,%r10,4), %ymm3, %ymm3
	LONG $0x117ca1c4; WORD $0x9204             // vmovups	%ymm0, (%rdx,%r10,4)
	LONG $0x117ca1c4; WORD $0x924c; BYTE $0x20 // vmovups	%ymm1, 32(%rdx,%r10,4)
	LONG $0x117ca1c4; WORD $0x9254; BYTE $0x40 // vmovups	%ymm2, 64(%rdx,%r10,4)
	LONG $0x117ca1c4; WORD $0x925c; BYTE $0x60 // vmovups	%ymm3, 96(%rdx,%r10,4)
	LONG $0x20c28349                           // addq	$32, %r10
	WORD $0x394d; BYTE $0xd0                   // cmpq	%r10, %r8
	JNE  LBB3_12
	WORD $0x854d; BYTE $0xc9                   // testq	%r9, %r9
	JE   LBB3_19

LBB3_14:
	WORD $0x2944; BYTE $0xc1 // subl	%r8d, %ecx
	WORD $0x894d; BYTE $0xc1 // movq	%r8, %r9
	WORD $0xe183; BYTE $0x03 // andl	$3, %ecx
	JE   LBB3_17
	WORD $0x894d; BYTE $0xc1 // movq	%r8, %r9

LBB3_16:
	LONG $0x107aa1c4; WORD $0x8f04 // vmovss	(%rdi,%r9,4), %xmm0             # xmm0 = mem[0],zero,zero,zero
	LONG $0x597aa1c4; WORD $0x8e04 // vmulss	(%rsi,%r9,4), %xmm0, %xmm0
	LONG $0x117aa1c4; WORD $0x8a04 // vmovss	%xmm0, (%rdx,%r9,4)
	WORD $0xff49; BYTE $0xc1       // incq	%r9
	WORD $0xff48; BYTE $0xc9       // decq	%rcx
	JNE  LBB3_16

LBB3_17:
	WORD $0x2949; BYTE $0xc0 // subq	%rax, %r8
	LONG $0xfcf88349         // cmpq	$-4, %r8
	JA   LBB3_19

LBB3_18:
	LONG $0x107aa1c4; WORD $0x8f04             // vmovss	(%rdi,%r9,4), %xmm0             # xmm0 = mem[0],zero,zero,zero
	LONG $0x597aa1c4; WORD $0x8e04             // vmulss	(%rsi,%r9,4), %xmm0, %xmm0
	LONG $0x117aa1c4; WORD $0x8a04             // vmovss	%xmm0, (%rdx,%r9,4)
	LONG $0x107aa1c4; WORD $0x8f44; BYTE $0x04 // vmovss	4(%rdi,%r9,4), %xmm0            # xmm0 = mem[0],zero,zero,zero
	LONG $0x597aa1c4; WORD $0x8e44; BYTE $0x04 // vmulss	4(%rsi,%r9,4), %xmm0, %xmm0
	LONG $0x117aa1c4; WORD $0x8a44; BYTE $0x04 // vmovss	%xmm0, 4(%rdx,%r9,4)
	LONG $0x107aa1c4; WORD $0x8f44; BYTE $0x08 // vmovss	8(%rdi,%r9,4), %xmm0            # xmm0 = mem[0],zero,zero,zero
	LONG $0x597aa1c4; WORD $0x8e44; BYTE $0x08 // vmulss	8(%rsi,%r9,4), %xmm0, %xmm0
	LONG $0x117aa1c4; WORD $0x8a44; BYTE $0x08 // vmovss	%xmm0, 8(%rdx,%r9,4)
	LONG $0x107aa1c4; WORD $0x8f44; BYTE $0x0c // vmovss	12(%rdi,%r9,4), %xmm0           # xmm0 = mem[0],zero,zero,zero
	LONG $0x597aa1c4; WORD $0x8e44; BYTE $0x0c // vmulss	12(%rsi,%r9,4), %xmm0, %xmm0
	LONG $0x117aa1c4; WORD $0x8a44; BYTE $0x0c // vmovss	%xmm0, 12(%rdx,%r9,4)
	LONG $0x04c18349                           // addq	$4, %r9
	WORD $0x394c; BYTE $0xc8                   // cmpq	%r9, %rax
	JNE  LBB3_18

LBB3_19:
	WORD $0x8948; BYTE $0xec // movq	%rbp, %rsp
	BYTE $0x5d               // popq	%rbp
	WORD $0xf8c5; BYTE $0x77 // vzeroupper
	BYTE $0xc3               // retq

TEXT ·_mm256_dot(SB), $0-32
	MOVQ a+0(FP), DI
	MOVQ b+8(FP), SI
	MOVQ n+16(FP), DX
	MOVQ ret+24(FP), CX
	BYTE $0x55               // pushq	%rbp
	WORD $0x8948; BYTE $0xe5 // movq	%rsp, %rbp
	LONG $0xf8e48348         // andq	$-8, %rsp
	LONG $0x07428d48         // leaq	7(%rdx), %rax
	WORD $0x8548; BYTE $0xd2 // testq	%rdx, %rdx
	LONG $0xc2490f48         // cmovnsq	%rdx, %rax
	WORD $0x8949; BYTE $0xc1 // movq	%rax, %r9
	LONG $0x03e9c149         // shrq	$3, %r9
	LONG $0xf8e08348         // andq	$-8, %rax
	WORD $0x2948; BYTE $0xc2 // subq	%rax, %rdx
	WORD $0x8545; BYTE $0xc9 // testl	%r9d, %r9d
	JLE  LBB4_1
	LONG $0x0710fcc5         // vmovups	(%rdi), %ymm0
	LONG $0x0659fcc5         // vmulps	(%rsi), %ymm0, %ymm0
	LONG $0x20c78348         // addq	$32, %rdi
	LONG $0x20c68348         // addq	$32, %rsi
	LONG $0x01f98341         // cmpl	$1, %r9d
	JE   LBB4_8
	LONG $0xff418d45         // leal	-1(%r9), %r8d
	LONG $0xfec18341         // addl	$-2, %r9d
	WORD $0x8944; BYTE $0xc0 // movl	%r8d, %eax
	WORD $0xe083; BYTE $0x03 // andl	$3, %eax
	LONG $0x03f98341         // cmpl	$3, %r9d
	JB   LBB4_6
	LONG $0xfce08341         // andl	$-4, %r8d

LBB4_5:
	LONG $0x0f10fcc5             // vmovups	(%rdi), %ymm1
	LONG $0x5710fcc5; BYTE $0x20 // vmovups	32(%rdi), %ymm2
	LONG $0x5f10fcc5; BYTE $0x40 // vmovups	64(%rdi), %ymm3
	LONG $0x6710fcc5; BYTE $0x60 // vmovups	96(%rdi), %ymm4
	LONG $0x0e59f4c5             // vmulps	(%rsi), %ymm1, %ymm1
	LONG $0xc158fcc5             // vaddps	%ymm1, %ymm0, %ymm0
	LONG $0x4e59ecc5; BYTE $0x20 // vmulps	32(%rsi), %ymm2, %ymm1
	LONG $0x5659e4c5; BYTE $0x40 // vmulps	64(%rsi), %ymm3, %ymm2
	LONG $0xc158fcc5             // vaddps	%ymm1, %ymm0, %ymm0
	LONG $0xc258fcc5             // vaddps	%ymm2, %ymm0, %ymm0
	LONG $0x4e59dcc5; BYTE $0x60 // vmulps	96(%rsi), %ymm4, %ymm1
	LONG $0xc158fcc5             // vaddps	%ymm1, %ymm0, %ymm0
	LONG $0x80ef8348             // subq	$-128, %rdi
	LONG $0x80ee8348             // subq	$-128, %rsi
	LONG $0xfcc08341             // addl	$-4, %r8d
	JNE  LBB4_5

LBB4_6:
	WORD $0xc085 // testl	%eax, %eax
	JE   LBB4_8

LBB4_7:
	LONG $0x0f10fcc5 // vmovups	(%rdi), %ymm1
	LONG $0x0e59f4c5 // vmulps	(%rsi), %ymm1, %ymm1
	LONG $0xc158fcc5 // vaddps	%ymm1, %ymm0, %ymm0
	LONG $0x20c78348 // addq	$32, %rdi
	LONG $0x20c68348 // addq	$32, %rsi
	WORD $0xc8ff     // decl	%eax
	JNE  LBB4_7
	JMP  LBB4_8

LBB4_1:
LBB4_8:
	LONG $0x197de3c4; WORD $0x01c1 // vextractf128	$1, %ymm0, %xmm1
	LONG $0xc058f0c5               // vaddps	%xmm0, %xmm1, %xmm0
	LONG $0xc8c6f9c5; BYTE $0x01   // vshufpd	$1, %xmm0, %xmm0, %xmm1         # xmm1 = xmm0[1,0]
	LONG $0xc158f8c5               // vaddps	%xmm1, %xmm0, %xmm0
	LONG $0xc816fac5               // vmovshdup	%xmm0, %xmm1            # xmm1 = xmm0[1,1,3,3]
	LONG $0xc158fac5               // vaddss	%xmm1, %xmm0, %xmm0
	LONG $0x0111fac5               // vmovss	%xmm0, (%rcx)
	WORD $0xd285                   // testl	%edx, %edx
	JLE  LBB4_14
	WORD $0x8941; BYTE $0xd0       // movl	%edx, %r8d
	LONG $0xff408d49               // leaq	-1(%r8), %rax
	WORD $0xe283; BYTE $0x03       // andl	$3, %edx
	LONG $0x03f88348               // cmpq	$3, %rax
	JAE  LBB4_15
	WORD $0xc031                   // xorl	%eax, %eax
	JMP  LBB4_11

LBB4_15:
	WORD $0x2949; BYTE $0xd0 // subq	%rdx, %r8
	WORD $0xc031             // xorl	%eax, %eax

LBB4_16:
	LONG $0x0c10fac5; BYTE $0x87   // vmovss	(%rdi,%rax,4), %xmm1            # xmm1 = mem[0],zero,zero,zero
	LONG $0x0c59f2c5; BYTE $0x86   // vmulss	(%rsi,%rax,4), %xmm1, %xmm1
	LONG $0xc058f2c5               // vaddss	%xmm0, %xmm1, %xmm0
	LONG $0x0111fac5               // vmovss	%xmm0, (%rcx)
	LONG $0x4c10fac5; WORD $0x0487 // vmovss	4(%rdi,%rax,4), %xmm1           # xmm1 = mem[0],zero,zero,zero
	LONG $0x4c59f2c5; WORD $0x0486 // vmulss	4(%rsi,%rax,4), %xmm1, %xmm1
	LONG $0xc058f2c5               // vaddss	%xmm0, %xmm1, %xmm0
	LONG $0x0111fac5               // vmovss	%xmm0, (%rcx)
	LONG $0x4c10fac5; WORD $0x0887 // vmovss	8(%rdi,%rax,4), %xmm1           # xmm1 = mem[0],zero,zero,zero
	LONG $0x4c59f2c5; WORD $0x0886 // vmulss	8(%rsi,%rax,4), %xmm1, %xmm1
	LONG $0xc058f2c5               // vaddss	%xmm0, %xmm1, %xmm0
	LONG $0x0111fac5               // vmovss	%xmm0, (%rcx)
	LONG $0x4c10fac5; WORD $0x0c87 // vmovss	12(%rdi,%rax,4), %xmm1          # xmm1 = mem[0],zero,zero,zero
	LONG $0x4c59f2c5; WORD $0x0c86 // vmulss	12(%rsi,%rax,4), %xmm1, %xmm1
	LONG $0xc058f2c5               // vaddss	%xmm0, %xmm1, %xmm0
	LONG $0x0111fac5               // vmovss	%xmm0, (%rcx)
	LONG $0x04c08348               // addq	$4, %rax
	WORD $0x3949; BYTE $0xc0       // cmpq	%rax, %r8
	JNE  LBB4_16

LBB4_11:
	WORD $0x8548; BYTE $0xd2 // testq	%rdx, %rdx
	JE   LBB4_14
	LONG $0x86348d48         // leaq	(%rsi,%rax,4), %rsi
	LONG $0x87048d48         // leaq	(%rdi,%rax,4), %rax
	WORD $0xff31             // xorl	%edi, %edi

LBB4_13:
	LONG $0x0c10fac5; BYTE $0xb8 // vmovss	(%rax,%rdi,4), %xmm1            # xmm1 = mem[0],zero,zero,zero
	LONG $0x0c59f2c5; BYTE $0xbe // vmulss	(%rsi,%rdi,4), %xmm1, %xmm1
	LONG $0xc058f2c5             // vaddss	%xmm0, %xmm1, %xmm0
	LONG $0x0111fac5             // vmovss	%xmm0, (%rcx)
	WORD $0xff48; BYTE $0xc7     // incq	%rdi
	WORD $0x3948; BYTE $0xfa     // cmpq	%rdi, %rdx
	JNE  LBB4_13

LBB4_14:
	WORD $0x8948; BYTE $0xec // movq	%rbp, %rsp
	BYTE $0x5d               // popq	%rbp
	WORD $0xf8c5; BYTE $0x77 // vzeroupper
	BYTE $0xc3               // retq

TEXT ·_mm256_euclidean(SB), $0-32
	MOVQ a+0(FP), DI
	MOVQ b+8(FP), SI
	MOVQ n+16(FP), DX
	MOVQ ret+24(FP), CX
	BYTE $0x55               // pushq	%rbp
	WORD $0x8948; BYTE $0xe5 // movq	%rsp, %rbp
	LONG $0xf8e48348         // andq	$-8, %rsp
	LONG $0x07428d48         // leaq	7(%rdx), %rax
	WORD $0x8548; BYTE $0xd2 // testq	%rdx, %rdx
	LONG $0xc2490f48         // cmovnsq	%rdx, %rax
	WORD $0x8949; BYTE $0xc1 // movq	%rax, %r9
	LONG $0x03e9c149         // shrq	$3, %r9
	LONG $0xf8e08348         // andq	$-8, %rax
	WORD $0x2948; BYTE $0xc2 // subq	%rax, %rdx
	WORD $0x8545; BYTE $0xc9 // testl	%r9d, %r9d
	JLE  LBB5_1
	LONG $0x0710fcc5         // vmovups	(%rdi), %ymm0
	LONG $0x065cfcc5         // vsubps	(%rsi), %ymm0, %ymm0
	LONG $0xc059fcc5         // vmulps	%ymm0, %ymm0, %ymm0
	LONG $0x20c78348         // addq	$32, %rdi
	LONG $0x20c68348         // addq	$32, %rsi
	LONG $0x01f98341         // cmpl	$1, %r9d
	JE   LBB5_8
	LONG $0xff418d45         // leal	-1(%r9), %r8d
	LONG $0xfec18341         // addl	$-2, %r9d
	WORD $0x8944; BYTE $0xc0 // movl	%r8d, %eax
	WORD $0xe083; BYTE $0x03 // andl	$3, %eax
	LONG $0x03f98341         // cmpl	$3, %r9d
	JB   LBB5_6
	LONG $0xfce08341         // andl	$-4, %r8d

LBB5_5:
	LONG $0x0f10fcc5             // vmovups	(%rdi), %ymm1
	LONG $0x5710fcc5; BYTE $0x20 // vmovups	32(%rdi), %ymm2
	LONG $0x5f10fcc5; BYTE $0x40 // vmovups	64(%rdi), %ymm3
	LONG $0x6710fcc5; BYTE $0x60 // vmovups	96(%rdi), %ymm4
	LONG $0x0e5cf4c5             // vsubps	(%rsi), %ymm1, %ymm1
	LONG $0xc959f4c5             // vmulps	%ymm1, %ymm1, %ymm1
	LONG $0xc158fcc5             // vaddps	%ymm1, %ymm0, %ymm0
	LONG $0x4e5cecc5; BYTE $0x20 // vsubps	32(%rsi), %ymm2, %ymm1
	LONG $0xc959f4c5             // vmulps	%ymm1, %ymm1, %ymm1
	LONG $0xc158fcc5             // vaddps	%ymm1, %ymm0, %ymm0
	LONG $0x4e5ce4c5; BYTE $0x40 // vsubps	64(%rsi), %ymm3, %ymm1
	LONG $0xc959f4c5             // vmulps	%ymm1, %ymm1, %ymm1
	LONG $0xc158fcc5             // vaddps	%ymm1, %ymm0, %ymm0
	LONG $0x4e5cdcc5; BYTE $0x60 // vsubps	96(%rsi), %ymm4, %ymm1
	LONG $0xc959f4c5             // vmulps	%ymm1, %ymm1, %ymm1
	LONG $0xc158fcc5             // vaddps	%ymm1, %ymm0, %ymm0
	LONG $0x80ef8348             // subq	$-128, %rdi
	LONG $0x80ee8348             // subq	$-128, %rsi
	LONG $0xfcc08341             // addl	$-4, %r8d
	JNE  LBB5_5

LBB5_6:
	WORD $0xc085 // testl	%eax, %eax
	JE   LBB5_8

LBB5_7:
	LONG $0x0f10fcc5 // vmovups	(%rdi), %ymm1
	LONG $0x0e5cf4c5 // vsubps	(%rsi), %ymm1, %ymm1
	LONG $0xc959f4c5 // vmulps	%ymm1, %ymm1, %ymm1
	LONG $0xc158fcc5 // vaddps	%ymm1, %ymm0, %ymm0
	LONG $0x20c78348 // addq	$32, %rdi
	LONG $0x20c68348 // addq	$32, %rsi
	WORD $0xc8ff     // decl	%eax
	JNE  LBB5_7
	JMP  LBB5_8

LBB5_1:
LBB5_8:
	LONG $0x197de3c4; WORD $0x01c1 // vextractf128	$1, %ymm0, %xmm1
	LONG $0xc058f0c5               // vaddps	%xmm0, %xmm1, %xmm0
	LONG $0xc8c6f9c5; BYTE $0x01   // vshufpd	$1, %xmm0, %xmm0, %xmm1         # xmm1 = xmm0[1,0]
	LONG $0xc158f8c5               // vaddps	%xmm1, %xmm0, %xmm0
	LONG $0xc816fac5               // vmovshdup	%xmm0, %xmm1            # xmm1 = xmm0[1,1,3,3]
	LONG $0xc158fac5               // vaddss	%xmm1, %xmm0, %xmm0
	LONG $0x0111fac5               // vmovss	%xmm0, (%rcx)
	WORD $0xd285                   // testl	%edx, %edx
	JLE  LBB5_13
	WORD $0x8941; BYTE $0xd0       // movl	%edx, %r8d
	WORD $0xe283; BYTE $0x01       // andl	$1, %edx
	LONG $0x01f88349               // cmpq	$1, %r8
	JNE  LBB5_14
	WORD $0xc031                   // xorl	%eax, %eax
	JMP  LBB5_11

LBB5_14:
	WORD $0x2949; BYTE $0xd0 // subq	%rdx, %r8
	WORD $0xc031             // xorl	%eax, %eax

LBB5_15:
	LONG $0x0c10fac5; BYTE $0x87   // vmovss	(%rdi,%rax,4), %xmm1            # xmm1 = mem[0],zero,zero,zero
	LONG $0x0c5cf2c5; BYTE $0x86   // vsubss	(%rsi,%rax,4), %xmm1, %xmm1
	LONG $0xc959f2c5               // vmulss	%xmm1, %xmm1, %xmm1
	LONG $0xc058f2c5               // vaddss	%xmm0, %xmm1, %xmm0
	LONG $0x0111fac5               // vmovss	%xmm0, (%rcx)
	LONG $0x4c10fac5; WORD $0x0487 // vmovss	4(%rdi,%rax,4), %xmm1           # xmm1 = mem[0],zero,zero,zero
	LONG $0x4c5cf2c5; WORD $0x0486 // vsubss	4(%rsi,%rax,4), %xmm1, %xmm1
	LONG $0xc959f2c5               // vmulss	%xmm1, %xmm1, %xmm1
	LONG $0xc058f2c5               // vaddss	%xmm0, %xmm1, %xmm0
	LONG $0x0111fac5               // vmovss	%xmm0, (%rcx)
	LONG $0x02c08348               // addq	$2, %rax
	WORD $0x3949; BYTE $0xc0       // cmpq	%rax, %r8
	JNE  LBB5_15

LBB5_11:
	WORD $0x8548; BYTE $0xd2     // testq	%rdx, %rdx
	JE   LBB5_13
	LONG $0x0c10fac5; BYTE $0x87 // vmovss	(%rdi,%rax,4), %xmm1            # xmm1 = mem[0],zero,zero,zero
	LONG $0x0c5cf2c5; BYTE $0x86 // vsubss	(%rsi,%rax,4), %xmm1, %xmm1
	LONG $0xc959f2c5             // vmulss	%xmm1, %xmm1, %xmm1
	LONG $0xc058f2c5             // vaddss	%xmm0, %xmm1, %xmm0
	LONG $0x0111fac5             // vmovss	%xmm0, (%rcx)

LBB5_13:
	LONG $0xc051fac5         // vsqrtss	%xmm0, %xmm0, %xmm0
	LONG $0x0111fac5         // vmovss	%xmm0, (%rcx)
	WORD $0x8948; BYTE $0xec // movq	%rbp, %rsp
	BYTE $0x5d               // popq	%rbp
	WORD $0xf8c5; BYTE $0x77 // vzeroupper
	BYTE $0xc3               // retq
