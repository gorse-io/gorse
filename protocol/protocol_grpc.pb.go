// Copyright 2020 gorse Project Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.3
// source: protocol.proto

package protocol

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Master_PutUsers_FullMethodName        = "/protocol.Master/PutUsers"
	Master_PutItems_FullMethodName        = "/protocol.Master/PutItems"
	Master_PutFeedback_FullMethodName     = "/protocol.Master/PutFeedback"
	Master_GetUsers_FullMethodName        = "/protocol.Master/GetUsers"
	Master_GetItems_FullMethodName        = "/protocol.Master/GetItems"
	Master_GetFeedback_FullMethodName     = "/protocol.Master/GetFeedback"
	Master_GetMeta_FullMethodName         = "/protocol.Master/GetMeta"
	Master_GetRankingModel_FullMethodName = "/protocol.Master/GetRankingModel"
	Master_GetClickModel_FullMethodName   = "/protocol.Master/GetClickModel"
	Master_PushProgress_FullMethodName    = "/protocol.Master/PushProgress"
)

// MasterClient is the client API for Master service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MasterClient interface {
	PutUsers(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[User, PutUsersResponse], error)
	PutItems(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[Item, PutItemsResponse], error)
	PutFeedback(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[Feedback, PutFeedbackResponse], error)
	GetUsers(ctx context.Context, in *GetUsersRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[User], error)
	GetItems(ctx context.Context, in *GetItemsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Item], error)
	GetFeedback(ctx context.Context, in *GetFeedbackRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Feedback], error)
	// meta distribute
	GetMeta(ctx context.Context, in *NodeInfo, opts ...grpc.CallOption) (*Meta, error)
	// data distribute
	GetRankingModel(ctx context.Context, in *VersionInfo, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Fragment], error)
	GetClickModel(ctx context.Context, in *VersionInfo, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Fragment], error)
	PushProgress(ctx context.Context, in *PushProgressRequest, opts ...grpc.CallOption) (*PushProgressResponse, error)
}

type masterClient struct {
	cc grpc.ClientConnInterface
}

func NewMasterClient(cc grpc.ClientConnInterface) MasterClient {
	return &masterClient{cc}
}

func (c *masterClient) PutUsers(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[User, PutUsersResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Master_ServiceDesc.Streams[0], Master_PutUsers_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[User, PutUsersResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Master_PutUsersClient = grpc.ClientStreamingClient[User, PutUsersResponse]

func (c *masterClient) PutItems(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[Item, PutItemsResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Master_ServiceDesc.Streams[1], Master_PutItems_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[Item, PutItemsResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Master_PutItemsClient = grpc.ClientStreamingClient[Item, PutItemsResponse]

func (c *masterClient) PutFeedback(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[Feedback, PutFeedbackResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Master_ServiceDesc.Streams[2], Master_PutFeedback_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[Feedback, PutFeedbackResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Master_PutFeedbackClient = grpc.ClientStreamingClient[Feedback, PutFeedbackResponse]

func (c *masterClient) GetUsers(ctx context.Context, in *GetUsersRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[User], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Master_ServiceDesc.Streams[3], Master_GetUsers_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GetUsersRequest, User]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Master_GetUsersClient = grpc.ServerStreamingClient[User]

func (c *masterClient) GetItems(ctx context.Context, in *GetItemsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Item], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Master_ServiceDesc.Streams[4], Master_GetItems_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GetItemsRequest, Item]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Master_GetItemsClient = grpc.ServerStreamingClient[Item]

func (c *masterClient) GetFeedback(ctx context.Context, in *GetFeedbackRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Feedback], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Master_ServiceDesc.Streams[5], Master_GetFeedback_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GetFeedbackRequest, Feedback]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Master_GetFeedbackClient = grpc.ServerStreamingClient[Feedback]

func (c *masterClient) GetMeta(ctx context.Context, in *NodeInfo, opts ...grpc.CallOption) (*Meta, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Meta)
	err := c.cc.Invoke(ctx, Master_GetMeta_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterClient) GetRankingModel(ctx context.Context, in *VersionInfo, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Fragment], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Master_ServiceDesc.Streams[6], Master_GetRankingModel_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[VersionInfo, Fragment]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Master_GetRankingModelClient = grpc.ServerStreamingClient[Fragment]

func (c *masterClient) GetClickModel(ctx context.Context, in *VersionInfo, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Fragment], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Master_ServiceDesc.Streams[7], Master_GetClickModel_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[VersionInfo, Fragment]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Master_GetClickModelClient = grpc.ServerStreamingClient[Fragment]

func (c *masterClient) PushProgress(ctx context.Context, in *PushProgressRequest, opts ...grpc.CallOption) (*PushProgressResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PushProgressResponse)
	err := c.cc.Invoke(ctx, Master_PushProgress_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MasterServer is the server API for Master service.
// All implementations must embed UnimplementedMasterServer
// for forward compatibility.
type MasterServer interface {
	PutUsers(grpc.ClientStreamingServer[User, PutUsersResponse]) error
	PutItems(grpc.ClientStreamingServer[Item, PutItemsResponse]) error
	PutFeedback(grpc.ClientStreamingServer[Feedback, PutFeedbackResponse]) error
	GetUsers(*GetUsersRequest, grpc.ServerStreamingServer[User]) error
	GetItems(*GetItemsRequest, grpc.ServerStreamingServer[Item]) error
	GetFeedback(*GetFeedbackRequest, grpc.ServerStreamingServer[Feedback]) error
	// meta distribute
	GetMeta(context.Context, *NodeInfo) (*Meta, error)
	// data distribute
	GetRankingModel(*VersionInfo, grpc.ServerStreamingServer[Fragment]) error
	GetClickModel(*VersionInfo, grpc.ServerStreamingServer[Fragment]) error
	PushProgress(context.Context, *PushProgressRequest) (*PushProgressResponse, error)
	mustEmbedUnimplementedMasterServer()
}

// UnimplementedMasterServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMasterServer struct{}

func (UnimplementedMasterServer) PutUsers(grpc.ClientStreamingServer[User, PutUsersResponse]) error {
	return status.Errorf(codes.Unimplemented, "method PutUsers not implemented")
}
func (UnimplementedMasterServer) PutItems(grpc.ClientStreamingServer[Item, PutItemsResponse]) error {
	return status.Errorf(codes.Unimplemented, "method PutItems not implemented")
}
func (UnimplementedMasterServer) PutFeedback(grpc.ClientStreamingServer[Feedback, PutFeedbackResponse]) error {
	return status.Errorf(codes.Unimplemented, "method PutFeedback not implemented")
}
func (UnimplementedMasterServer) GetUsers(*GetUsersRequest, grpc.ServerStreamingServer[User]) error {
	return status.Errorf(codes.Unimplemented, "method GetUsers not implemented")
}
func (UnimplementedMasterServer) GetItems(*GetItemsRequest, grpc.ServerStreamingServer[Item]) error {
	return status.Errorf(codes.Unimplemented, "method GetItems not implemented")
}
func (UnimplementedMasterServer) GetFeedback(*GetFeedbackRequest, grpc.ServerStreamingServer[Feedback]) error {
	return status.Errorf(codes.Unimplemented, "method GetFeedback not implemented")
}
func (UnimplementedMasterServer) GetMeta(context.Context, *NodeInfo) (*Meta, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMeta not implemented")
}
func (UnimplementedMasterServer) GetRankingModel(*VersionInfo, grpc.ServerStreamingServer[Fragment]) error {
	return status.Errorf(codes.Unimplemented, "method GetRankingModel not implemented")
}
func (UnimplementedMasterServer) GetClickModel(*VersionInfo, grpc.ServerStreamingServer[Fragment]) error {
	return status.Errorf(codes.Unimplemented, "method GetClickModel not implemented")
}
func (UnimplementedMasterServer) PushProgress(context.Context, *PushProgressRequest) (*PushProgressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PushProgress not implemented")
}
func (UnimplementedMasterServer) mustEmbedUnimplementedMasterServer() {}
func (UnimplementedMasterServer) testEmbeddedByValue()                {}

// UnsafeMasterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MasterServer will
// result in compilation errors.
type UnsafeMasterServer interface {
	mustEmbedUnimplementedMasterServer()
}

func RegisterMasterServer(s grpc.ServiceRegistrar, srv MasterServer) {
	// If the following call pancis, it indicates UnimplementedMasterServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Master_ServiceDesc, srv)
}

func _Master_PutUsers_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MasterServer).PutUsers(&grpc.GenericServerStream[User, PutUsersResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Master_PutUsersServer = grpc.ClientStreamingServer[User, PutUsersResponse]

func _Master_PutItems_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MasterServer).PutItems(&grpc.GenericServerStream[Item, PutItemsResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Master_PutItemsServer = grpc.ClientStreamingServer[Item, PutItemsResponse]

func _Master_PutFeedback_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MasterServer).PutFeedback(&grpc.GenericServerStream[Feedback, PutFeedbackResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Master_PutFeedbackServer = grpc.ClientStreamingServer[Feedback, PutFeedbackResponse]

func _Master_GetUsers_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetUsersRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MasterServer).GetUsers(m, &grpc.GenericServerStream[GetUsersRequest, User]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Master_GetUsersServer = grpc.ServerStreamingServer[User]

func _Master_GetItems_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetItemsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MasterServer).GetItems(m, &grpc.GenericServerStream[GetItemsRequest, Item]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Master_GetItemsServer = grpc.ServerStreamingServer[Item]

func _Master_GetFeedback_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetFeedbackRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MasterServer).GetFeedback(m, &grpc.GenericServerStream[GetFeedbackRequest, Feedback]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Master_GetFeedbackServer = grpc.ServerStreamingServer[Feedback]

func _Master_GetMeta_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServer).GetMeta(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Master_GetMeta_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServer).GetMeta(ctx, req.(*NodeInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Master_GetRankingModel_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(VersionInfo)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MasterServer).GetRankingModel(m, &grpc.GenericServerStream[VersionInfo, Fragment]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Master_GetRankingModelServer = grpc.ServerStreamingServer[Fragment]

func _Master_GetClickModel_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(VersionInfo)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MasterServer).GetClickModel(m, &grpc.GenericServerStream[VersionInfo, Fragment]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Master_GetClickModelServer = grpc.ServerStreamingServer[Fragment]

func _Master_PushProgress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PushProgressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServer).PushProgress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Master_PushProgress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServer).PushProgress(ctx, req.(*PushProgressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Master_ServiceDesc is the grpc.ServiceDesc for Master service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Master_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protocol.Master",
	HandlerType: (*MasterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMeta",
			Handler:    _Master_GetMeta_Handler,
		},
		{
			MethodName: "PushProgress",
			Handler:    _Master_PushProgress_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PutUsers",
			Handler:       _Master_PutUsers_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "PutItems",
			Handler:       _Master_PutItems_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "PutFeedback",
			Handler:       _Master_PutFeedback_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "GetUsers",
			Handler:       _Master_GetUsers_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetItems",
			Handler:       _Master_GetItems_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetFeedback",
			Handler:       _Master_GetFeedback_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetRankingModel",
			Handler:       _Master_GetRankingModel_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetClickModel",
			Handler:       _Master_GetClickModel_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "protocol.proto",
}
