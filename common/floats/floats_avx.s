//go:build !noasm && amd64
// Code generated by GoAT. DO NOT EDIT.
// versions:
// 	clang   18.1.3 (1ubuntu1)
// 	objdump 2.42
// flags: -mavx -O3
// source: src/floats_avx.c

TEXT ·_mm256_mul_const_add_to(SB), $0-32
	MOVQ a+0(FP), DI
	MOVQ b+8(FP), SI
	MOVQ c+16(FP), DX
	MOVQ n+24(FP), CX
	BYTE $0x55                                 // pushq	%rbp
	WORD $0x8948; BYTE $0xe5                   // movq	%rsp, %rbp
	BYTE $0x53                                 // pushq	%rbx
	LONG $0xf8e48348                           // andq	$-8, %rsp
	LONG $0x07418d4c                           // leaq	7(%rcx), %r8
	WORD $0x8548; BYTE $0xc9                   // testq	%rcx, %rcx
	LONG $0xc1490f4c                           // cmovnsq	%rcx, %r8
	WORD $0x894c; BYTE $0xc0                   // movq	%r8, %rax
	LONG $0x03e8c148                           // shrq	$3, %rax
	LONG $0xf8e08349                           // andq	$-8, %r8
	WORD $0x294c; BYTE $0xc1                   // subq	%r8, %rcx
	WORD $0xc085                               // testl	%eax, %eax
	JLE  LBB0_6
	WORD $0xf883; BYTE $0x01                   // cmpl	$1, %eax
	JE   LBB0_4
	WORD $0x8941; BYTE $0xc0                   // movl	%eax, %r8d
	LONG $0xfee08141; WORD $0xffff; BYTE $0x7f // andl	$2147483646, %r8d               # imm = 0x7FFFFFFE

LBB0_3:
	LONG $0x187de2c4; BYTE $0x06 // vbroadcastss	(%rsi), %ymm0
	LONG $0x0759fcc5             // vmulps	(%rdi), %ymm0, %ymm0
	LONG $0x0258fcc5             // vaddps	(%rdx), %ymm0, %ymm0
	LONG $0x0211fcc5             // vmovups	%ymm0, (%rdx)
	LONG $0x187de2c4; BYTE $0x06 // vbroadcastss	(%rsi), %ymm0
	LONG $0x4759fcc5; BYTE $0x20 // vmulps	32(%rdi), %ymm0, %ymm0
	LONG $0x4258fcc5; BYTE $0x20 // vaddps	32(%rdx), %ymm0, %ymm0
	LONG $0x4211fcc5; BYTE $0x20 // vmovups	%ymm0, 32(%rdx)
	LONG $0x40c78348             // addq	$64, %rdi
	LONG $0x40c28348             // addq	$64, %rdx
	LONG $0xfec08341             // addl	$-2, %r8d
	JNE  LBB0_3

LBB0_4:
	WORD $0x01a8                 // testb	$1, %al
	JE   LBB0_6
	LONG $0x187de2c4; BYTE $0x06 // vbroadcastss	(%rsi), %ymm0
	LONG $0x0759fcc5             // vmulps	(%rdi), %ymm0, %ymm0
	LONG $0x0258fcc5             // vaddps	(%rdx), %ymm0, %ymm0
	LONG $0x0211fcc5             // vmovups	%ymm0, (%rdx)
	LONG $0x20c78348             // addq	$32, %rdi
	LONG $0x20c28348             // addq	$32, %rdx

LBB0_6:
	WORD $0xc985             // testl	%ecx, %ecx
	JLE  LBB0_18
	WORD $0xc889             // movl	%ecx, %eax
	LONG $0x20f88348         // cmpq	$32, %rax
	JAE  LBB0_9
	WORD $0x3145; BYTE $0xc0 // xorl	%r8d, %r8d
	JMP  LBB0_14

LBB0_9:
	LONG $0x82048d4c             // leaq	(%rdx,%rax,4), %r8
	LONG $0x870c8d4c             // leaq	(%rdi,%rax,4), %r9
	LONG $0x04568d4c             // leaq	4(%rsi), %r10
	WORD $0x394c; BYTE $0xca     // cmpq	%r9, %rdx
	LONG $0xc3920f41             // setb	%r11b
	WORD $0x394c; BYTE $0xc7     // cmpq	%r8, %rdi
	WORD $0x920f; BYTE $0xc3     // setb	%bl
	WORD $0x394c; BYTE $0xd2     // cmpq	%r10, %rdx
	LONG $0xc1920f41             // setb	%r9b
	WORD $0x3949; BYTE $0xf0     // cmpq	%rsi, %r8
	LONG $0xc2970f41             // seta	%r10b
	WORD $0x3145; BYTE $0xc0     // xorl	%r8d, %r8d
	WORD $0x8441; BYTE $0xdb     // testb	%bl, %r11b
	JNE  LBB0_14
	WORD $0x2045; BYTE $0xd1     // andb	%r10b, %r9b
	JNE  LBB0_14
	WORD $0x8941; BYTE $0xc9     // movl	%ecx, %r9d
	LONG $0x1fe18341             // andl	$31, %r9d
	WORD $0x8949; BYTE $0xc0     // movq	%rax, %r8
	WORD $0x294d; BYTE $0xc8     // subq	%r9, %r8
	LONG $0x187de2c4; BYTE $0x06 // vbroadcastss	(%rsi), %ymm0
	WORD $0x3145; BYTE $0xd2     // xorl	%r10d, %r10d

LBB0_12:
	LONG $0x597ca1c4; WORD $0x970c             // vmulps	(%rdi,%r10,4), %ymm0, %ymm1
	LONG $0x5874a1c4; WORD $0x920c             // vaddps	(%rdx,%r10,4), %ymm1, %ymm1
	LONG $0x597ca1c4; WORD $0x9754; BYTE $0x20 // vmulps	32(%rdi,%r10,4), %ymm0, %ymm2
	LONG $0x586ca1c4; WORD $0x9254; BYTE $0x20 // vaddps	32(%rdx,%r10,4), %ymm2, %ymm2
	LONG $0x597ca1c4; WORD $0x975c; BYTE $0x40 // vmulps	64(%rdi,%r10,4), %ymm0, %ymm3
	LONG $0x5864a1c4; WORD $0x925c; BYTE $0x40 // vaddps	64(%rdx,%r10,4), %ymm3, %ymm3
	LONG $0x597ca1c4; WORD $0x9764; BYTE $0x60 // vmulps	96(%rdi,%r10,4), %ymm0, %ymm4
	LONG $0x585ca1c4; WORD $0x9264; BYTE $0x60 // vaddps	96(%rdx,%r10,4), %ymm4, %ymm4
	LONG $0x117ca1c4; WORD $0x920c             // vmovups	%ymm1, (%rdx,%r10,4)
	LONG $0x117ca1c4; WORD $0x9254; BYTE $0x20 // vmovups	%ymm2, 32(%rdx,%r10,4)
	LONG $0x117ca1c4; WORD $0x925c; BYTE $0x40 // vmovups	%ymm3, 64(%rdx,%r10,4)
	LONG $0x117ca1c4; WORD $0x9264; BYTE $0x60 // vmovups	%ymm4, 96(%rdx,%r10,4)
	LONG $0x20c28349                           // addq	$32, %r10
	WORD $0x394d; BYTE $0xd0                   // cmpq	%r10, %r8
	JNE  LBB0_12
	WORD $0x854d; BYTE $0xc9                   // testq	%r9, %r9
	JE   LBB0_18

LBB0_14:
	WORD $0x2944; BYTE $0xc1       // subl	%r8d, %ecx
	LONG $0x01488d4d               // leaq	1(%r8), %r9
	WORD $0xc1f6; BYTE $0x01       // testb	$1, %cl
	JE   LBB0_16
	LONG $0x107aa1c4; WORD $0x8704 // vmovss	(%rdi,%r8,4), %xmm0             # xmm0 = mem[0],zero,zero,zero
	LONG $0x0659fac5               // vmulss	(%rsi), %xmm0, %xmm0
	LONG $0x587aa1c4; WORD $0x8204 // vaddss	(%rdx,%r8,4), %xmm0, %xmm0
	LONG $0x117aa1c4; WORD $0x8204 // vmovss	%xmm0, (%rdx,%r8,4)
	WORD $0x894d; BYTE $0xc8       // movq	%r9, %r8

LBB0_16:
	WORD $0x394c; BYTE $0xc8 // cmpq	%r9, %rax
	JE   LBB0_18

LBB0_17:
	LONG $0x107aa1c4; WORD $0x8704             // vmovss	(%rdi,%r8,4), %xmm0             # xmm0 = mem[0],zero,zero,zero
	LONG $0x0659fac5                           // vmulss	(%rsi), %xmm0, %xmm0
	LONG $0x587aa1c4; WORD $0x8204             // vaddss	(%rdx,%r8,4), %xmm0, %xmm0
	LONG $0x117aa1c4; WORD $0x8204             // vmovss	%xmm0, (%rdx,%r8,4)
	LONG $0x107aa1c4; WORD $0x8744; BYTE $0x04 // vmovss	4(%rdi,%r8,4), %xmm0            # xmm0 = mem[0],zero,zero,zero
	LONG $0x0659fac5                           // vmulss	(%rsi), %xmm0, %xmm0
	LONG $0x587aa1c4; WORD $0x8244; BYTE $0x04 // vaddss	4(%rdx,%r8,4), %xmm0, %xmm0
	LONG $0x117aa1c4; WORD $0x8244; BYTE $0x04 // vmovss	%xmm0, 4(%rdx,%r8,4)
	LONG $0x02c08349                           // addq	$2, %r8
	WORD $0x394c; BYTE $0xc0                   // cmpq	%r8, %rax
	JNE  LBB0_17

LBB0_18:
	LONG $0xf8658d48         // leaq	-8(%rbp), %rsp
	BYTE $0x5b               // popq	%rbx
	BYTE $0x5d               // popq	%rbp
	WORD $0xf8c5; BYTE $0x77 // vzeroupper
	BYTE $0xc3               // retq

TEXT ·_mm256_mul_const_to(SB), $0-32
	MOVQ a+0(FP), DI
	MOVQ b+8(FP), SI
	MOVQ c+16(FP), DX
	MOVQ n+24(FP), CX
	BYTE $0x55                                 // pushq	%rbp
	WORD $0x8948; BYTE $0xe5                   // movq	%rsp, %rbp
	BYTE $0x53                                 // pushq	%rbx
	LONG $0xf8e48348                           // andq	$-8, %rsp
	LONG $0x07418d4c                           // leaq	7(%rcx), %r8
	WORD $0x8548; BYTE $0xc9                   // testq	%rcx, %rcx
	LONG $0xc1490f4c                           // cmovnsq	%rcx, %r8
	WORD $0x894c; BYTE $0xc0                   // movq	%r8, %rax
	LONG $0x03e8c148                           // shrq	$3, %rax
	LONG $0xf8e08349                           // andq	$-8, %r8
	WORD $0x294c; BYTE $0xc1                   // subq	%r8, %rcx
	WORD $0xc085                               // testl	%eax, %eax
	JLE  LBB1_6
	WORD $0xf883; BYTE $0x01                   // cmpl	$1, %eax
	JE   LBB1_4
	WORD $0x8941; BYTE $0xc0                   // movl	%eax, %r8d
	LONG $0xfee08141; WORD $0xffff; BYTE $0x7f // andl	$2147483646, %r8d               # imm = 0x7FFFFFFE

LBB1_3:
	LONG $0x187de2c4; BYTE $0x06 // vbroadcastss	(%rsi), %ymm0
	LONG $0x0759fcc5             // vmulps	(%rdi), %ymm0, %ymm0
	LONG $0x0211fcc5             // vmovups	%ymm0, (%rdx)
	LONG $0x187de2c4; BYTE $0x06 // vbroadcastss	(%rsi), %ymm0
	LONG $0x4759fcc5; BYTE $0x20 // vmulps	32(%rdi), %ymm0, %ymm0
	LONG $0x4211fcc5; BYTE $0x20 // vmovups	%ymm0, 32(%rdx)
	LONG $0x40c78348             // addq	$64, %rdi
	LONG $0x40c28348             // addq	$64, %rdx
	LONG $0xfec08341             // addl	$-2, %r8d
	JNE  LBB1_3

LBB1_4:
	WORD $0x01a8                 // testb	$1, %al
	JE   LBB1_6
	LONG $0x187de2c4; BYTE $0x06 // vbroadcastss	(%rsi), %ymm0
	LONG $0x0759fcc5             // vmulps	(%rdi), %ymm0, %ymm0
	LONG $0x0211fcc5             // vmovups	%ymm0, (%rdx)
	LONG $0x20c78348             // addq	$32, %rdi
	LONG $0x20c28348             // addq	$32, %rdx

LBB1_6:
	WORD $0xc985             // testl	%ecx, %ecx
	JLE  LBB1_19
	WORD $0xc889             // movl	%ecx, %eax
	LONG $0x20f88348         // cmpq	$32, %rax
	JAE  LBB1_9
	WORD $0x3145; BYTE $0xc0 // xorl	%r8d, %r8d
	JMP  LBB1_14

LBB1_9:
	LONG $0x82048d4c             // leaq	(%rdx,%rax,4), %r8
	LONG $0x870c8d4c             // leaq	(%rdi,%rax,4), %r9
	LONG $0x04568d4c             // leaq	4(%rsi), %r10
	WORD $0x394c; BYTE $0xca     // cmpq	%r9, %rdx
	LONG $0xc3920f41             // setb	%r11b
	WORD $0x394c; BYTE $0xc7     // cmpq	%r8, %rdi
	WORD $0x920f; BYTE $0xc3     // setb	%bl
	WORD $0x394c; BYTE $0xd2     // cmpq	%r10, %rdx
	LONG $0xc1920f41             // setb	%r9b
	WORD $0x3949; BYTE $0xf0     // cmpq	%rsi, %r8
	LONG $0xc2970f41             // seta	%r10b
	WORD $0x3145; BYTE $0xc0     // xorl	%r8d, %r8d
	WORD $0x8441; BYTE $0xdb     // testb	%bl, %r11b
	JNE  LBB1_14
	WORD $0x2045; BYTE $0xd1     // andb	%r10b, %r9b
	JNE  LBB1_14
	WORD $0x8941; BYTE $0xc9     // movl	%ecx, %r9d
	LONG $0x1fe18341             // andl	$31, %r9d
	WORD $0x8949; BYTE $0xc0     // movq	%rax, %r8
	WORD $0x294d; BYTE $0xc8     // subq	%r9, %r8
	LONG $0x187de2c4; BYTE $0x06 // vbroadcastss	(%rsi), %ymm0
	WORD $0x3145; BYTE $0xd2     // xorl	%r10d, %r10d

LBB1_12:
	LONG $0x597ca1c4; WORD $0x970c             // vmulps	(%rdi,%r10,4), %ymm0, %ymm1
	LONG $0x597ca1c4; WORD $0x9754; BYTE $0x20 // vmulps	32(%rdi,%r10,4), %ymm0, %ymm2
	LONG $0x597ca1c4; WORD $0x975c; BYTE $0x40 // vmulps	64(%rdi,%r10,4), %ymm0, %ymm3
	LONG $0x597ca1c4; WORD $0x9764; BYTE $0x60 // vmulps	96(%rdi,%r10,4), %ymm0, %ymm4
	LONG $0x117ca1c4; WORD $0x920c             // vmovups	%ymm1, (%rdx,%r10,4)
	LONG $0x117ca1c4; WORD $0x9254; BYTE $0x20 // vmovups	%ymm2, 32(%rdx,%r10,4)
	LONG $0x117ca1c4; WORD $0x925c; BYTE $0x40 // vmovups	%ymm3, 64(%rdx,%r10,4)
	LONG $0x117ca1c4; WORD $0x9264; BYTE $0x60 // vmovups	%ymm4, 96(%rdx,%r10,4)
	LONG $0x20c28349                           // addq	$32, %r10
	WORD $0x394d; BYTE $0xd0                   // cmpq	%r10, %r8
	JNE  LBB1_12
	WORD $0x854d; BYTE $0xc9                   // testq	%r9, %r9
	JE   LBB1_19

LBB1_14:
	WORD $0x2944; BYTE $0xc1 // subl	%r8d, %ecx
	WORD $0x894d; BYTE $0xc1 // movq	%r8, %r9
	WORD $0xe183; BYTE $0x03 // andl	$3, %ecx
	JE   LBB1_17
	WORD $0x894d; BYTE $0xc1 // movq	%r8, %r9

LBB1_16:
	LONG $0x107aa1c4; WORD $0x8f04 // vmovss	(%rdi,%r9,4), %xmm0             # xmm0 = mem[0],zero,zero,zero
	LONG $0x0659fac5               // vmulss	(%rsi), %xmm0, %xmm0
	LONG $0x117aa1c4; WORD $0x8a04 // vmovss	%xmm0, (%rdx,%r9,4)
	WORD $0xff49; BYTE $0xc1       // incq	%r9
	WORD $0xff48; BYTE $0xc9       // decq	%rcx
	JNE  LBB1_16

LBB1_17:
	WORD $0x2949; BYTE $0xc0 // subq	%rax, %r8
	LONG $0xfcf88349         // cmpq	$-4, %r8
	JA   LBB1_19

LBB1_18:
	LONG $0x107aa1c4; WORD $0x8f04             // vmovss	(%rdi,%r9,4), %xmm0             # xmm0 = mem[0],zero,zero,zero
	LONG $0x0659fac5                           // vmulss	(%rsi), %xmm0, %xmm0
	LONG $0x117aa1c4; WORD $0x8a04             // vmovss	%xmm0, (%rdx,%r9,4)
	LONG $0x107aa1c4; WORD $0x8f44; BYTE $0x04 // vmovss	4(%rdi,%r9,4), %xmm0            # xmm0 = mem[0],zero,zero,zero
	LONG $0x0659fac5                           // vmulss	(%rsi), %xmm0, %xmm0
	LONG $0x117aa1c4; WORD $0x8a44; BYTE $0x04 // vmovss	%xmm0, 4(%rdx,%r9,4)
	LONG $0x107aa1c4; WORD $0x8f44; BYTE $0x08 // vmovss	8(%rdi,%r9,4), %xmm0            # xmm0 = mem[0],zero,zero,zero
	LONG $0x0659fac5                           // vmulss	(%rsi), %xmm0, %xmm0
	LONG $0x117aa1c4; WORD $0x8a44; BYTE $0x08 // vmovss	%xmm0, 8(%rdx,%r9,4)
	LONG $0x107aa1c4; WORD $0x8f44; BYTE $0x0c // vmovss	12(%rdi,%r9,4), %xmm0           # xmm0 = mem[0],zero,zero,zero
	LONG $0x0659fac5                           // vmulss	(%rsi), %xmm0, %xmm0
	LONG $0x117aa1c4; WORD $0x8a44; BYTE $0x0c // vmovss	%xmm0, 12(%rdx,%r9,4)
	LONG $0x04c18349                           // addq	$4, %r9
	WORD $0x394c; BYTE $0xc8                   // cmpq	%r9, %rax
	JNE  LBB1_18

LBB1_19:
	LONG $0xf8658d48         // leaq	-8(%rbp), %rsp
	BYTE $0x5b               // popq	%rbx
	BYTE $0x5d               // popq	%rbp
	WORD $0xf8c5; BYTE $0x77 // vzeroupper
	BYTE $0xc3               // retq

TEXT ·_mm256_mul_const(SB), $0-24
	MOVQ a+0(FP), DI
	MOVQ b+8(FP), SI
	MOVQ n+16(FP), DX
	BYTE $0x55                     // pushq	%rbp
	WORD $0x8948; BYTE $0xe5       // movq	%rsp, %rbp
	LONG $0xf8e48348               // andq	$-8, %rsp
	LONG $0x074a8d48               // leaq	7(%rdx), %rcx
	WORD $0x8548; BYTE $0xd2       // testq	%rdx, %rdx
	LONG $0xca490f48               // cmovnsq	%rdx, %rcx
	WORD $0x8948; BYTE $0xc8       // movq	%rcx, %rax
	LONG $0x03e8c148               // shrq	$3, %rax
	LONG $0xf8e18348               // andq	$-8, %rcx
	WORD $0x2948; BYTE $0xca       // subq	%rcx, %rdx
	WORD $0xc085                   // testl	%eax, %eax
	JLE  LBB2_6
	WORD $0xf883; BYTE $0x01       // cmpl	$1, %eax
	JE   LBB2_4
	WORD $0xc189                   // movl	%eax, %ecx
	LONG $0xfffee181; WORD $0x7fff // andl	$2147483646, %ecx               # imm = 0x7FFFFFFE

LBB2_3:
	LONG $0x187de2c4; BYTE $0x06 // vbroadcastss	(%rsi), %ymm0
	LONG $0x0759fcc5             // vmulps	(%rdi), %ymm0, %ymm0
	LONG $0x0711fcc5             // vmovups	%ymm0, (%rdi)
	LONG $0x187de2c4; BYTE $0x06 // vbroadcastss	(%rsi), %ymm0
	LONG $0x4759fcc5; BYTE $0x20 // vmulps	32(%rdi), %ymm0, %ymm0
	LONG $0x4711fcc5; BYTE $0x20 // vmovups	%ymm0, 32(%rdi)
	LONG $0x40c78348             // addq	$64, %rdi
	WORD $0xc183; BYTE $0xfe     // addl	$-2, %ecx
	JNE  LBB2_3

LBB2_4:
	WORD $0x01a8                 // testb	$1, %al
	JE   LBB2_6
	LONG $0x187de2c4; BYTE $0x06 // vbroadcastss	(%rsi), %ymm0
	LONG $0x0759fcc5             // vmulps	(%rdi), %ymm0, %ymm0
	LONG $0x0711fcc5             // vmovups	%ymm0, (%rdi)
	LONG $0x20c78348             // addq	$32, %rdi

LBB2_6:
	WORD $0xd285             // testl	%edx, %edx
	JLE  LBB2_20
	WORD $0xd089             // movl	%edx, %eax
	LONG $0x20f88348         // cmpq	$32, %rax
	JB   LBB2_8
	LONG $0x044e8d48         // leaq	4(%rsi), %rcx
	WORD $0x3948; BYTE $0xcf // cmpq	%rcx, %rdi
	JAE  LBB2_12
	LONG $0x870c8d48         // leaq	(%rdi,%rax,4), %rcx
	WORD $0x3948; BYTE $0xf1 // cmpq	%rsi, %rcx
	JBE  LBB2_12

LBB2_8:
	WORD $0xc931 // xorl	%ecx, %ecx

LBB2_15:
	WORD $0xca29             // subl	%ecx, %edx
	WORD $0x8949; BYTE $0xc8 // movq	%rcx, %r8
	WORD $0xe283; BYTE $0x03 // andl	$3, %edx
	JE   LBB2_18
	WORD $0x8949; BYTE $0xc8 // movq	%rcx, %r8

LBB2_17:
	LONG $0x0610fac5               // vmovss	(%rsi), %xmm0                   # xmm0 = mem[0],zero,zero,zero
	LONG $0x597aa1c4; WORD $0x8704 // vmulss	(%rdi,%r8,4), %xmm0, %xmm0
	LONG $0x117aa1c4; WORD $0x8704 // vmovss	%xmm0, (%rdi,%r8,4)
	WORD $0xff49; BYTE $0xc0       // incq	%r8
	WORD $0xff48; BYTE $0xca       // decq	%rdx
	JNE  LBB2_17

LBB2_18:
	WORD $0x2948; BYTE $0xc1 // subq	%rax, %rcx
	LONG $0xfcf98348         // cmpq	$-4, %rcx
	JA   LBB2_20

LBB2_19:
	LONG $0x0610fac5                           // vmovss	(%rsi), %xmm0                   # xmm0 = mem[0],zero,zero,zero
	LONG $0x597aa1c4; WORD $0x8704             // vmulss	(%rdi,%r8,4), %xmm0, %xmm0
	LONG $0x117aa1c4; WORD $0x8704             // vmovss	%xmm0, (%rdi,%r8,4)
	LONG $0x0610fac5                           // vmovss	(%rsi), %xmm0                   # xmm0 = mem[0],zero,zero,zero
	LONG $0x597aa1c4; WORD $0x8744; BYTE $0x04 // vmulss	4(%rdi,%r8,4), %xmm0, %xmm0
	LONG $0x117aa1c4; WORD $0x8744; BYTE $0x04 // vmovss	%xmm0, 4(%rdi,%r8,4)
	LONG $0x0610fac5                           // vmovss	(%rsi), %xmm0                   # xmm0 = mem[0],zero,zero,zero
	LONG $0x597aa1c4; WORD $0x8744; BYTE $0x08 // vmulss	8(%rdi,%r8,4), %xmm0, %xmm0
	LONG $0x117aa1c4; WORD $0x8744; BYTE $0x08 // vmovss	%xmm0, 8(%rdi,%r8,4)
	LONG $0x0610fac5                           // vmovss	(%rsi), %xmm0                   # xmm0 = mem[0],zero,zero,zero
	LONG $0x597aa1c4; WORD $0x8744; BYTE $0x0c // vmulss	12(%rdi,%r8,4), %xmm0, %xmm0
	LONG $0x117aa1c4; WORD $0x8744; BYTE $0x0c // vmovss	%xmm0, 12(%rdi,%r8,4)
	LONG $0x04c08349                           // addq	$4, %r8
	WORD $0x394c; BYTE $0xc0                   // cmpq	%r8, %rax
	JNE  LBB2_19

LBB2_20:
	WORD $0x8948; BYTE $0xec // movq	%rbp, %rsp
	BYTE $0x5d               // popq	%rbp
	WORD $0xf8c5; BYTE $0x77 // vzeroupper
	BYTE $0xc3               // retq

LBB2_12:
	WORD $0x8941; BYTE $0xd0     // movl	%edx, %r8d
	LONG $0x1fe08341             // andl	$31, %r8d
	WORD $0x8948; BYTE $0xc1     // movq	%rax, %rcx
	WORD $0x294c; BYTE $0xc1     // subq	%r8, %rcx
	LONG $0x187de2c4; BYTE $0x06 // vbroadcastss	(%rsi), %ymm0
	WORD $0x3145; BYTE $0xc9     // xorl	%r9d, %r9d

LBB2_13:
	LONG $0x597ca1c4; WORD $0x8f0c             // vmulps	(%rdi,%r9,4), %ymm0, %ymm1
	LONG $0x597ca1c4; WORD $0x8f54; BYTE $0x20 // vmulps	32(%rdi,%r9,4), %ymm0, %ymm2
	LONG $0x597ca1c4; WORD $0x8f5c; BYTE $0x40 // vmulps	64(%rdi,%r9,4), %ymm0, %ymm3
	LONG $0x597ca1c4; WORD $0x8f64; BYTE $0x60 // vmulps	96(%rdi,%r9,4), %ymm0, %ymm4
	LONG $0x117ca1c4; WORD $0x8f0c             // vmovups	%ymm1, (%rdi,%r9,4)
	LONG $0x117ca1c4; WORD $0x8f54; BYTE $0x20 // vmovups	%ymm2, 32(%rdi,%r9,4)
	LONG $0x117ca1c4; WORD $0x8f5c; BYTE $0x40 // vmovups	%ymm3, 64(%rdi,%r9,4)
	LONG $0x117ca1c4; WORD $0x8f64; BYTE $0x60 // vmovups	%ymm4, 96(%rdi,%r9,4)
	LONG $0x20c18349                           // addq	$32, %r9
	WORD $0x394c; BYTE $0xc9                   // cmpq	%r9, %rcx
	JNE  LBB2_13
	WORD $0x854d; BYTE $0xc0                   // testq	%r8, %r8
	JNE  LBB2_15
	JMP  LBB2_20

TEXT ·_mm256_mul_to(SB), $0-32
	MOVQ a+0(FP), DI
	MOVQ b+8(FP), SI
	MOVQ c+16(FP), DX
	MOVQ n+24(FP), CX
	BYTE $0x55                                 // pushq	%rbp
	WORD $0x8948; BYTE $0xe5                   // movq	%rsp, %rbp
	LONG $0xf8e48348                           // andq	$-8, %rsp
	LONG $0x07418d48                           // leaq	7(%rcx), %rax
	WORD $0x8548; BYTE $0xc9                   // testq	%rcx, %rcx
	LONG $0xc1490f48                           // cmovnsq	%rcx, %rax
	WORD $0x8949; BYTE $0xc0                   // movq	%rax, %r8
	LONG $0x03e8c149                           // shrq	$3, %r8
	LONG $0xf8e08348                           // andq	$-8, %rax
	WORD $0x2948; BYTE $0xc1                   // subq	%rax, %rcx
	WORD $0x8545; BYTE $0xc0                   // testl	%r8d, %r8d
	JLE  LBB3_6
	WORD $0x8944; BYTE $0xc0                   // movl	%r8d, %eax
	WORD $0xe083; BYTE $0x03                   // andl	$3, %eax
	LONG $0x04f88341                           // cmpl	$4, %r8d
	JB   LBB3_4
	LONG $0xfce08141; WORD $0xffff; BYTE $0x7f // andl	$2147483644, %r8d               # imm = 0x7FFFFFFC

LBB3_3:
	LONG $0x0710fcc5             // vmovups	(%rdi), %ymm0
	LONG $0x0659fcc5             // vmulps	(%rsi), %ymm0, %ymm0
	LONG $0x0211fcc5             // vmovups	%ymm0, (%rdx)
	LONG $0x4710fcc5; BYTE $0x20 // vmovups	32(%rdi), %ymm0
	LONG $0x4659fcc5; BYTE $0x20 // vmulps	32(%rsi), %ymm0, %ymm0
	LONG $0x4211fcc5; BYTE $0x20 // vmovups	%ymm0, 32(%rdx)
	LONG $0x4710fcc5; BYTE $0x40 // vmovups	64(%rdi), %ymm0
	LONG $0x4659fcc5; BYTE $0x40 // vmulps	64(%rsi), %ymm0, %ymm0
	LONG $0x4211fcc5; BYTE $0x40 // vmovups	%ymm0, 64(%rdx)
	LONG $0x4710fcc5; BYTE $0x60 // vmovups	96(%rdi), %ymm0
	LONG $0x4659fcc5; BYTE $0x60 // vmulps	96(%rsi), %ymm0, %ymm0
	LONG $0x4211fcc5; BYTE $0x60 // vmovups	%ymm0, 96(%rdx)
	LONG $0x80ef8348             // subq	$-128, %rdi
	LONG $0x80ee8348             // subq	$-128, %rsi
	LONG $0x80ea8348             // subq	$-128, %rdx
	LONG $0xfcc08341             // addl	$-4, %r8d
	JNE  LBB3_3

LBB3_4:
	WORD $0xc085 // testl	%eax, %eax
	JE   LBB3_6

LBB3_5:
	LONG $0x0710fcc5 // vmovups	(%rdi), %ymm0
	LONG $0x0659fcc5 // vmulps	(%rsi), %ymm0, %ymm0
	LONG $0x0211fcc5 // vmovups	%ymm0, (%rdx)
	LONG $0x20c78348 // addq	$32, %rdi
	LONG $0x20c68348 // addq	$32, %rsi
	LONG $0x20c28348 // addq	$32, %rdx
	WORD $0xc8ff     // decl	%eax
	JNE  LBB3_5

LBB3_6:
	WORD $0xc985             // testl	%ecx, %ecx
	JLE  LBB3_19
	WORD $0xc889             // movl	%ecx, %eax
	LONG $0x20f88348         // cmpq	$32, %rax
	JAE  LBB3_9
	WORD $0x3145; BYTE $0xc0 // xorl	%r8d, %r8d
	JMP  LBB3_14

LBB3_9:
	WORD $0x8949; BYTE $0xd1                   // movq	%rdx, %r9
	WORD $0x2949; BYTE $0xf9                   // subq	%rdi, %r9
	WORD $0x3145; BYTE $0xc0                   // xorl	%r8d, %r8d
	LONG $0x80f98149; WORD $0x0000; BYTE $0x00 // cmpq	$128, %r9
	JB   LBB3_14
	WORD $0x8949; BYTE $0xd1                   // movq	%rdx, %r9
	WORD $0x2949; BYTE $0xf1                   // subq	%rsi, %r9
	LONG $0x80f98149; WORD $0x0000; BYTE $0x00 // cmpq	$128, %r9
	JB   LBB3_14
	WORD $0x8941; BYTE $0xc9                   // movl	%ecx, %r9d
	LONG $0x1fe18341                           // andl	$31, %r9d
	WORD $0x8949; BYTE $0xc0                   // movq	%rax, %r8
	WORD $0x294d; BYTE $0xc8                   // subq	%r9, %r8
	WORD $0x3145; BYTE $0xd2                   // xorl	%r10d, %r10d

LBB3_12:
	LONG $0x107ca1c4; WORD $0x9704             // vmovups	(%rdi,%r10,4), %ymm0
	LONG $0x107ca1c4; WORD $0x974c; BYTE $0x20 // vmovups	32(%rdi,%r10,4), %ymm1
	LONG $0x107ca1c4; WORD $0x9754; BYTE $0x40 // vmovups	64(%rdi,%r10,4), %ymm2
	LONG $0x107ca1c4; WORD $0x975c; BYTE $0x60 // vmovups	96(%rdi,%r10,4), %ymm3
	LONG $0x597ca1c4; WORD $0x9604             // vmulps	(%rsi,%r10,4), %ymm0, %ymm0
	LONG $0x5974a1c4; WORD $0x964c; BYTE $0x20 // vmulps	32(%rsi,%r10,4), %ymm1, %ymm1
	LONG $0x596ca1c4; WORD $0x9654; BYTE $0x40 // vmulps	64(%rsi,%r10,4), %ymm2, %ymm2
	LONG $0x5964a1c4; WORD $0x965c; BYTE $0x60 // vmulps	96(%rsi,%r10,4), %ymm3, %ymm3
	LONG $0x117ca1c4; WORD $0x9204             // vmovups	%ymm0, (%rdx,%r10,4)
	LONG $0x117ca1c4; WORD $0x924c; BYTE $0x20 // vmovups	%ymm1, 32(%rdx,%r10,4)
	LONG $0x117ca1c4; WORD $0x9254; BYTE $0x40 // vmovups	%ymm2, 64(%rdx,%r10,4)
	LONG $0x117ca1c4; WORD $0x925c; BYTE $0x60 // vmovups	%ymm3, 96(%rdx,%r10,4)
	LONG $0x20c28349                           // addq	$32, %r10
	WORD $0x394d; BYTE $0xd0                   // cmpq	%r10, %r8
	JNE  LBB3_12
	WORD $0x854d; BYTE $0xc9                   // testq	%r9, %r9
	JE   LBB3_19

LBB3_14:
	WORD $0x2944; BYTE $0xc1 // subl	%r8d, %ecx
	WORD $0x894d; BYTE $0xc1 // movq	%r8, %r9
	WORD $0xe183; BYTE $0x03 // andl	$3, %ecx
	JE   LBB3_17
	WORD $0x894d; BYTE $0xc1 // movq	%r8, %r9

LBB3_16:
	LONG $0x107aa1c4; WORD $0x8f04 // vmovss	(%rdi,%r9,4), %xmm0             # xmm0 = mem[0],zero,zero,zero
	LONG $0x597aa1c4; WORD $0x8e04 // vmulss	(%rsi,%r9,4), %xmm0, %xmm0
	LONG $0x117aa1c4; WORD $0x8a04 // vmovss	%xmm0, (%rdx,%r9,4)
	WORD $0xff49; BYTE $0xc1       // incq	%r9
	WORD $0xff48; BYTE $0xc9       // decq	%rcx
	JNE  LBB3_16

LBB3_17:
	WORD $0x2949; BYTE $0xc0 // subq	%rax, %r8
	LONG $0xfcf88349         // cmpq	$-4, %r8
	JA   LBB3_19

LBB3_18:
	LONG $0x107aa1c4; WORD $0x8f04             // vmovss	(%rdi,%r9,4), %xmm0             # xmm0 = mem[0],zero,zero,zero
	LONG $0x597aa1c4; WORD $0x8e04             // vmulss	(%rsi,%r9,4), %xmm0, %xmm0
	LONG $0x117aa1c4; WORD $0x8a04             // vmovss	%xmm0, (%rdx,%r9,4)
	LONG $0x107aa1c4; WORD $0x8f44; BYTE $0x04 // vmovss	4(%rdi,%r9,4), %xmm0            # xmm0 = mem[0],zero,zero,zero
	LONG $0x597aa1c4; WORD $0x8e44; BYTE $0x04 // vmulss	4(%rsi,%r9,4), %xmm0, %xmm0
	LONG $0x117aa1c4; WORD $0x8a44; BYTE $0x04 // vmovss	%xmm0, 4(%rdx,%r9,4)
	LONG $0x107aa1c4; WORD $0x8f44; BYTE $0x08 // vmovss	8(%rdi,%r9,4), %xmm0            # xmm0 = mem[0],zero,zero,zero
	LONG $0x597aa1c4; WORD $0x8e44; BYTE $0x08 // vmulss	8(%rsi,%r9,4), %xmm0, %xmm0
	LONG $0x117aa1c4; WORD $0x8a44; BYTE $0x08 // vmovss	%xmm0, 8(%rdx,%r9,4)
	LONG $0x107aa1c4; WORD $0x8f44; BYTE $0x0c // vmovss	12(%rdi,%r9,4), %xmm0           # xmm0 = mem[0],zero,zero,zero
	LONG $0x597aa1c4; WORD $0x8e44; BYTE $0x0c // vmulss	12(%rsi,%r9,4), %xmm0, %xmm0
	LONG $0x117aa1c4; WORD $0x8a44; BYTE $0x0c // vmovss	%xmm0, 12(%rdx,%r9,4)
	LONG $0x04c18349                           // addq	$4, %r9
	WORD $0x394c; BYTE $0xc8                   // cmpq	%r9, %rax
	JNE  LBB3_18

LBB3_19:
	WORD $0x8948; BYTE $0xec // movq	%rbp, %rsp
	BYTE $0x5d               // popq	%rbp
	WORD $0xf8c5; BYTE $0x77 // vzeroupper
	BYTE $0xc3               // retq

TEXT ·_mm256_div_to(SB), $0-32
	MOVQ a+0(FP), DI
	MOVQ b+8(FP), SI
	MOVQ c+16(FP), DX
	MOVQ n+24(FP), CX
	BYTE $0x55                                 // pushq	%rbp
	WORD $0x8948; BYTE $0xe5                   // movq	%rsp, %rbp
	LONG $0xf8e48348                           // andq	$-8, %rsp
	LONG $0x07418d48                           // leaq	7(%rcx), %rax
	WORD $0x8548; BYTE $0xc9                   // testq	%rcx, %rcx
	LONG $0xc1490f48                           // cmovnsq	%rcx, %rax
	WORD $0x8949; BYTE $0xc0                   // movq	%rax, %r8
	LONG $0x03e8c149                           // shrq	$3, %r8
	LONG $0xf8e08348                           // andq	$-8, %rax
	WORD $0x2948; BYTE $0xc1                   // subq	%rax, %rcx
	WORD $0x8545; BYTE $0xc0                   // testl	%r8d, %r8d
	JLE  LBB4_6
	WORD $0x8944; BYTE $0xc0                   // movl	%r8d, %eax
	WORD $0xe083; BYTE $0x03                   // andl	$3, %eax
	LONG $0x04f88341                           // cmpl	$4, %r8d
	JB   LBB4_4
	LONG $0xfce08141; WORD $0xffff; BYTE $0x7f // andl	$2147483644, %r8d               # imm = 0x7FFFFFFC

LBB4_3:
	LONG $0x0710fcc5             // vmovups	(%rdi), %ymm0
	LONG $0x065efcc5             // vdivps	(%rsi), %ymm0, %ymm0
	LONG $0x0211fcc5             // vmovups	%ymm0, (%rdx)
	LONG $0x4710fcc5; BYTE $0x20 // vmovups	32(%rdi), %ymm0
	LONG $0x465efcc5; BYTE $0x20 // vdivps	32(%rsi), %ymm0, %ymm0
	LONG $0x4211fcc5; BYTE $0x20 // vmovups	%ymm0, 32(%rdx)
	LONG $0x4710fcc5; BYTE $0x40 // vmovups	64(%rdi), %ymm0
	LONG $0x465efcc5; BYTE $0x40 // vdivps	64(%rsi), %ymm0, %ymm0
	LONG $0x4211fcc5; BYTE $0x40 // vmovups	%ymm0, 64(%rdx)
	LONG $0x4710fcc5; BYTE $0x60 // vmovups	96(%rdi), %ymm0
	LONG $0x465efcc5; BYTE $0x60 // vdivps	96(%rsi), %ymm0, %ymm0
	LONG $0x4211fcc5; BYTE $0x60 // vmovups	%ymm0, 96(%rdx)
	LONG $0x80ef8348             // subq	$-128, %rdi
	LONG $0x80ee8348             // subq	$-128, %rsi
	LONG $0x80ea8348             // subq	$-128, %rdx
	LONG $0xfcc08341             // addl	$-4, %r8d
	JNE  LBB4_3

LBB4_4:
	WORD $0xc085 // testl	%eax, %eax
	JE   LBB4_6

LBB4_5:
	LONG $0x0710fcc5 // vmovups	(%rdi), %ymm0
	LONG $0x065efcc5 // vdivps	(%rsi), %ymm0, %ymm0
	LONG $0x0211fcc5 // vmovups	%ymm0, (%rdx)
	LONG $0x20c78348 // addq	$32, %rdi
	LONG $0x20c68348 // addq	$32, %rsi
	LONG $0x20c28348 // addq	$32, %rdx
	WORD $0xc8ff     // decl	%eax
	JNE  LBB4_5

LBB4_6:
	WORD $0xc985             // testl	%ecx, %ecx
	JLE  LBB4_19
	WORD $0xc889             // movl	%ecx, %eax
	LONG $0x08f88348         // cmpq	$8, %rax
	JAE  LBB4_9
	WORD $0x3145; BYTE $0xc0 // xorl	%r8d, %r8d
	JMP  LBB4_14

LBB4_9:
	WORD $0x8949; BYTE $0xd1 // movq	%rdx, %r9
	WORD $0x2949; BYTE $0xf9 // subq	%rdi, %r9
	WORD $0x3145; BYTE $0xc0 // xorl	%r8d, %r8d
	LONG $0x20f98349         // cmpq	$32, %r9
	JB   LBB4_14
	WORD $0x8949; BYTE $0xd1 // movq	%rdx, %r9
	WORD $0x2949; BYTE $0xf1 // subq	%rsi, %r9
	LONG $0x20f98349         // cmpq	$32, %r9
	JB   LBB4_14
	WORD $0x8941; BYTE $0xc9 // movl	%ecx, %r9d
	LONG $0x07e18341         // andl	$7, %r9d
	WORD $0x8949; BYTE $0xc0 // movq	%rax, %r8
	WORD $0x294d; BYTE $0xc8 // subq	%r9, %r8
	WORD $0x3145; BYTE $0xd2 // xorl	%r10d, %r10d

LBB4_12:
	LONG $0x107ca1c4; WORD $0x9704 // vmovups	(%rdi,%r10,4), %ymm0
	LONG $0x5e7ca1c4; WORD $0x9604 // vdivps	(%rsi,%r10,4), %ymm0, %ymm0
	LONG $0x117ca1c4; WORD $0x9204 // vmovups	%ymm0, (%rdx,%r10,4)
	LONG $0x08c28349               // addq	$8, %r10
	WORD $0x394d; BYTE $0xd0       // cmpq	%r10, %r8
	JNE  LBB4_12
	WORD $0x854d; BYTE $0xc9       // testq	%r9, %r9
	JE   LBB4_19

LBB4_14:
	WORD $0x2944; BYTE $0xc1 // subl	%r8d, %ecx
	WORD $0x894d; BYTE $0xc1 // movq	%r8, %r9
	WORD $0xe183; BYTE $0x03 // andl	$3, %ecx
	JE   LBB4_17
	WORD $0x894d; BYTE $0xc1 // movq	%r8, %r9

LBB4_16:
	LONG $0x107aa1c4; WORD $0x8f04 // vmovss	(%rdi,%r9,4), %xmm0             # xmm0 = mem[0],zero,zero,zero
	LONG $0x5e7aa1c4; WORD $0x8e04 // vdivss	(%rsi,%r9,4), %xmm0, %xmm0
	LONG $0x117aa1c4; WORD $0x8a04 // vmovss	%xmm0, (%rdx,%r9,4)
	WORD $0xff49; BYTE $0xc1       // incq	%r9
	WORD $0xff48; BYTE $0xc9       // decq	%rcx
	JNE  LBB4_16

LBB4_17:
	WORD $0x2949; BYTE $0xc0 // subq	%rax, %r8
	LONG $0xfcf88349         // cmpq	$-4, %r8
	JA   LBB4_19

LBB4_18:
	LONG $0x107aa1c4; WORD $0x8f04             // vmovss	(%rdi,%r9,4), %xmm0             # xmm0 = mem[0],zero,zero,zero
	LONG $0x5e7aa1c4; WORD $0x8e04             // vdivss	(%rsi,%r9,4), %xmm0, %xmm0
	LONG $0x117aa1c4; WORD $0x8a04             // vmovss	%xmm0, (%rdx,%r9,4)
	LONG $0x107aa1c4; WORD $0x8f44; BYTE $0x04 // vmovss	4(%rdi,%r9,4), %xmm0            # xmm0 = mem[0],zero,zero,zero
	LONG $0x5e7aa1c4; WORD $0x8e44; BYTE $0x04 // vdivss	4(%rsi,%r9,4), %xmm0, %xmm0
	LONG $0x117aa1c4; WORD $0x8a44; BYTE $0x04 // vmovss	%xmm0, 4(%rdx,%r9,4)
	LONG $0x107aa1c4; WORD $0x8f44; BYTE $0x08 // vmovss	8(%rdi,%r9,4), %xmm0            # xmm0 = mem[0],zero,zero,zero
	LONG $0x5e7aa1c4; WORD $0x8e44; BYTE $0x08 // vdivss	8(%rsi,%r9,4), %xmm0, %xmm0
	LONG $0x117aa1c4; WORD $0x8a44; BYTE $0x08 // vmovss	%xmm0, 8(%rdx,%r9,4)
	LONG $0x107aa1c4; WORD $0x8f44; BYTE $0x0c // vmovss	12(%rdi,%r9,4), %xmm0           # xmm0 = mem[0],zero,zero,zero
	LONG $0x5e7aa1c4; WORD $0x8e44; BYTE $0x0c // vdivss	12(%rsi,%r9,4), %xmm0, %xmm0
	LONG $0x117aa1c4; WORD $0x8a44; BYTE $0x0c // vmovss	%xmm0, 12(%rdx,%r9,4)
	LONG $0x04c18349                           // addq	$4, %r9
	WORD $0x394c; BYTE $0xc8                   // cmpq	%r9, %rax
	JNE  LBB4_18

LBB4_19:
	WORD $0x8948; BYTE $0xec // movq	%rbp, %rsp
	BYTE $0x5d               // popq	%rbp
	WORD $0xf8c5; BYTE $0x77 // vzeroupper
	BYTE $0xc3               // retq

TEXT ·_mm256_sqrt_to(SB), $0-24
	MOVQ a+0(FP), DI
	MOVQ b+8(FP), SI
	MOVQ n+16(FP), DX
	BYTE $0x55                     // pushq	%rbp
	WORD $0x8948; BYTE $0xe5       // movq	%rsp, %rbp
	LONG $0xf8e48348               // andq	$-8, %rsp
	LONG $0x07428d48               // leaq	7(%rdx), %rax
	WORD $0x8548; BYTE $0xd2       // testq	%rdx, %rdx
	LONG $0xc2490f48               // cmovnsq	%rdx, %rax
	WORD $0x8948; BYTE $0xc1       // movq	%rax, %rcx
	LONG $0x03e9c148               // shrq	$3, %rcx
	LONG $0xf8e08348               // andq	$-8, %rax
	WORD $0x2948; BYTE $0xc2       // subq	%rax, %rdx
	WORD $0xc985                   // testl	%ecx, %ecx
	JLE  LBB5_6
	WORD $0xc889                   // movl	%ecx, %eax
	WORD $0xe083; BYTE $0x03       // andl	$3, %eax
	WORD $0xf983; BYTE $0x04       // cmpl	$4, %ecx
	JB   LBB5_4
	LONG $0xfffce181; WORD $0x7fff // andl	$2147483644, %ecx               # imm = 0x7FFFFFFC

LBB5_3:
	LONG $0x0751fcc5             // vsqrtps	(%rdi), %ymm0
	LONG $0x0611fcc5             // vmovups	%ymm0, (%rsi)
	LONG $0x4751fcc5; BYTE $0x20 // vsqrtps	32(%rdi), %ymm0
	LONG $0x4611fcc5; BYTE $0x20 // vmovups	%ymm0, 32(%rsi)
	LONG $0x4751fcc5; BYTE $0x40 // vsqrtps	64(%rdi), %ymm0
	LONG $0x4611fcc5; BYTE $0x40 // vmovups	%ymm0, 64(%rsi)
	LONG $0x4751fcc5; BYTE $0x60 // vsqrtps	96(%rdi), %ymm0
	LONG $0x4611fcc5; BYTE $0x60 // vmovups	%ymm0, 96(%rsi)
	LONG $0x80ef8348             // subq	$-128, %rdi
	LONG $0x80ee8348             // subq	$-128, %rsi
	WORD $0xc183; BYTE $0xfc     // addl	$-4, %ecx
	JNE  LBB5_3

LBB5_4:
	WORD $0xc085 // testl	%eax, %eax
	JE   LBB5_6

LBB5_5:
	LONG $0x0751fcc5 // vsqrtps	(%rdi), %ymm0
	LONG $0x0611fcc5 // vmovups	%ymm0, (%rsi)
	LONG $0x20c78348 // addq	$32, %rdi
	LONG $0x20c68348 // addq	$32, %rsi
	WORD $0xc8ff     // decl	%eax
	JNE  LBB5_5

LBB5_6:
	WORD $0xd285             // testl	%edx, %edx
	JLE  LBB5_17
	WORD $0xd089             // movl	%edx, %eax
	WORD $0xc931             // xorl	%ecx, %ecx
	LONG $0x08f88348         // cmpq	$8, %rax
	JB   LBB5_12
	WORD $0x8949; BYTE $0xf0 // movq	%rsi, %r8
	WORD $0x2949; BYTE $0xf8 // subq	%rdi, %r8
	LONG $0x20f88349         // cmpq	$32, %r8
	JB   LBB5_12
	WORD $0x8941; BYTE $0xd0 // movl	%edx, %r8d
	LONG $0x07e08341         // andl	$7, %r8d
	WORD $0x8948; BYTE $0xc1 // movq	%rax, %rcx
	WORD $0x294c; BYTE $0xc1 // subq	%r8, %rcx
	WORD $0x3145; BYTE $0xc9 // xorl	%r9d, %r9d

LBB5_10:
	LONG $0x517ca1c4; WORD $0x8f04 // vsqrtps	(%rdi,%r9,4), %ymm0
	LONG $0x117ca1c4; WORD $0x8e04 // vmovups	%ymm0, (%rsi,%r9,4)
	LONG $0x08c18349               // addq	$8, %r9
	WORD $0x394c; BYTE $0xc9       // cmpq	%r9, %rcx
	JNE  LBB5_10
	WORD $0x854d; BYTE $0xc0       // testq	%r8, %r8
	JE   LBB5_17

LBB5_12:
	WORD $0xca29             // subl	%ecx, %edx
	WORD $0x8949; BYTE $0xc8 // movq	%rcx, %r8
	WORD $0xe283; BYTE $0x03 // andl	$3, %edx
	JE   LBB5_15
	WORD $0x8949; BYTE $0xc8 // movq	%rcx, %r8

LBB5_14:
	LONG $0x107aa1c4; WORD $0x8704 // vmovss	(%rdi,%r8,4), %xmm0             # xmm0 = mem[0],zero,zero,zero
	LONG $0xc051fac5               // vsqrtss	%xmm0, %xmm0, %xmm0
	LONG $0x117aa1c4; WORD $0x8604 // vmovss	%xmm0, (%rsi,%r8,4)
	WORD $0xff49; BYTE $0xc0       // incq	%r8
	WORD $0xff48; BYTE $0xca       // decq	%rdx
	JNE  LBB5_14

LBB5_15:
	WORD $0x2948; BYTE $0xc1 // subq	%rax, %rcx
	LONG $0xfcf98348         // cmpq	$-4, %rcx
	JA   LBB5_17

LBB5_16:
	LONG $0x107aa1c4; WORD $0x8704             // vmovss	(%rdi,%r8,4), %xmm0             # xmm0 = mem[0],zero,zero,zero
	LONG $0xc051fac5                           // vsqrtss	%xmm0, %xmm0, %xmm0
	LONG $0x117aa1c4; WORD $0x8604             // vmovss	%xmm0, (%rsi,%r8,4)
	LONG $0x107aa1c4; WORD $0x8744; BYTE $0x04 // vmovss	4(%rdi,%r8,4), %xmm0            # xmm0 = mem[0],zero,zero,zero
	LONG $0xc051fac5                           // vsqrtss	%xmm0, %xmm0, %xmm0
	LONG $0x117aa1c4; WORD $0x8644; BYTE $0x04 // vmovss	%xmm0, 4(%rsi,%r8,4)
	LONG $0x107aa1c4; WORD $0x8744; BYTE $0x08 // vmovss	8(%rdi,%r8,4), %xmm0            # xmm0 = mem[0],zero,zero,zero
	LONG $0xc051fac5                           // vsqrtss	%xmm0, %xmm0, %xmm0
	LONG $0x117aa1c4; WORD $0x8644; BYTE $0x08 // vmovss	%xmm0, 8(%rsi,%r8,4)
	LONG $0x107aa1c4; WORD $0x8744; BYTE $0x0c // vmovss	12(%rdi,%r8,4), %xmm0           # xmm0 = mem[0],zero,zero,zero
	LONG $0xc051fac5                           // vsqrtss	%xmm0, %xmm0, %xmm0
	LONG $0x117aa1c4; WORD $0x8644; BYTE $0x0c // vmovss	%xmm0, 12(%rsi,%r8,4)
	LONG $0x04c08349                           // addq	$4, %r8
	WORD $0x394c; BYTE $0xc0                   // cmpq	%r8, %rax
	JNE  LBB5_16

LBB5_17:
	WORD $0x8948; BYTE $0xec // movq	%rbp, %rsp
	BYTE $0x5d               // popq	%rbp
	WORD $0xf8c5; BYTE $0x77 // vzeroupper
	BYTE $0xc3               // retq

TEXT ·_mm256_dot(SB), $8-32
	MOVQ a+0(FP), DI
	MOVQ b+8(FP), SI
	MOVQ n+16(FP), DX
	BYTE $0x55               // pushq	%rbp
	WORD $0x8948; BYTE $0xe5 // movq	%rsp, %rbp
	LONG $0xf8e48348         // andq	$-8, %rsp
	LONG $0x07428d48         // leaq	7(%rdx), %rax
	WORD $0x8548; BYTE $0xd2 // testq	%rdx, %rdx
	LONG $0xc2490f48         // cmovnsq	%rdx, %rax
	WORD $0x8949; BYTE $0xc0 // movq	%rax, %r8
	LONG $0x03e8c149         // shrq	$3, %r8
	LONG $0xf8e08348         // andq	$-8, %rax
	WORD $0x2948; BYTE $0xc2 // subq	%rax, %rdx
	WORD $0x8545; BYTE $0xc0 // testl	%r8d, %r8d
	JLE  LBB6_1
	LONG $0x0710fcc5         // vmovups	(%rdi), %ymm0
	LONG $0x0659fcc5         // vmulps	(%rsi), %ymm0, %ymm0
	LONG $0x20c78348         // addq	$32, %rdi
	LONG $0x20c68348         // addq	$32, %rsi
	LONG $0x01f88341         // cmpl	$1, %r8d
	JE   LBB6_8
	LONG $0xff488d41         // leal	-1(%r8), %ecx
	LONG $0xfec08341         // addl	$-2, %r8d
	WORD $0xc889             // movl	%ecx, %eax
	WORD $0xe083; BYTE $0x03 // andl	$3, %eax
	LONG $0x03f88341         // cmpl	$3, %r8d
	JB   LBB6_6
	WORD $0xe183; BYTE $0xfc // andl	$-4, %ecx

LBB6_5:
	LONG $0x0f10fcc5             // vmovups	(%rdi), %ymm1
	LONG $0x5710fcc5; BYTE $0x20 // vmovups	32(%rdi), %ymm2
	LONG $0x5f10fcc5; BYTE $0x40 // vmovups	64(%rdi), %ymm3
	LONG $0x6710fcc5; BYTE $0x60 // vmovups	96(%rdi), %ymm4
	LONG $0x0e59f4c5             // vmulps	(%rsi), %ymm1, %ymm1
	LONG $0xc158fcc5             // vaddps	%ymm1, %ymm0, %ymm0
	LONG $0x4e59ecc5; BYTE $0x20 // vmulps	32(%rsi), %ymm2, %ymm1
	LONG $0x5659e4c5; BYTE $0x40 // vmulps	64(%rsi), %ymm3, %ymm2
	LONG $0xc158fcc5             // vaddps	%ymm1, %ymm0, %ymm0
	LONG $0xc258fcc5             // vaddps	%ymm2, %ymm0, %ymm0
	LONG $0x4e59dcc5; BYTE $0x60 // vmulps	96(%rsi), %ymm4, %ymm1
	LONG $0xc158fcc5             // vaddps	%ymm1, %ymm0, %ymm0
	LONG $0x80ef8348             // subq	$-128, %rdi
	LONG $0x80ee8348             // subq	$-128, %rsi
	WORD $0xc183; BYTE $0xfc     // addl	$-4, %ecx
	JNE  LBB6_5

LBB6_6:
	WORD $0xc085 // testl	%eax, %eax
	JE   LBB6_8

LBB6_7:
	LONG $0x0f10fcc5 // vmovups	(%rdi), %ymm1
	LONG $0x0e59f4c5 // vmulps	(%rsi), %ymm1, %ymm1
	LONG $0xc158fcc5 // vaddps	%ymm1, %ymm0, %ymm0
	LONG $0x20c78348 // addq	$32, %rdi
	LONG $0x20c68348 // addq	$32, %rsi
	WORD $0xc8ff     // decl	%eax
	JNE  LBB6_7
	JMP  LBB6_8

LBB6_1:
	LONG $0xc057f8c5 // vxorps	%xmm0, %xmm0, %xmm0

LBB6_8:
	LONG $0x197de3c4; WORD $0x01c1 // vextractf128	$1, %ymm0, %xmm1
	LONG $0xc058f0c5               // vaddps	%xmm0, %xmm1, %xmm0
	LONG $0xc8c6f9c5; BYTE $0x01   // vshufpd	$1, %xmm0, %xmm0, %xmm1         # xmm1 = xmm0[1,0]
	LONG $0xc158f8c5               // vaddps	%xmm1, %xmm0, %xmm0
	LONG $0xc816fac5               // vmovshdup	%xmm0, %xmm1            # xmm1 = xmm0[1,1,3,3]
	LONG $0xc158fac5               // vaddss	%xmm1, %xmm0, %xmm0
	WORD $0xd285                   // testl	%edx, %edx
	JLE  LBB6_16
	WORD $0xd189                   // movl	%edx, %ecx
	LONG $0xff418d48               // leaq	-1(%rcx), %rax
	WORD $0xe283; BYTE $0x03       // andl	$3, %edx
	LONG $0x03f88348               // cmpq	$3, %rax
	JAE  LBB6_11
	WORD $0xc031                   // xorl	%eax, %eax
	JMP  LBB6_13

LBB6_11:
	WORD $0x2948; BYTE $0xd1 // subq	%rdx, %rcx
	WORD $0xc031             // xorl	%eax, %eax

LBB6_12:
	LONG $0x0c10fac5; BYTE $0x87   // vmovss	(%rdi,%rax,4), %xmm1            # xmm1 = mem[0],zero,zero,zero
	LONG $0x5410fac5; WORD $0x0487 // vmovss	4(%rdi,%rax,4), %xmm2           # xmm2 = mem[0],zero,zero,zero
	LONG $0x0c59f2c5; BYTE $0x86   // vmulss	(%rsi,%rax,4), %xmm1, %xmm1
	LONG $0x5459eac5; WORD $0x0486 // vmulss	4(%rsi,%rax,4), %xmm2, %xmm2
	LONG $0xc058f2c5               // vaddss	%xmm0, %xmm1, %xmm0
	LONG $0x4c10fac5; WORD $0x0887 // vmovss	8(%rdi,%rax,4), %xmm1           # xmm1 = mem[0],zero,zero,zero
	LONG $0x4c59f2c5; WORD $0x0886 // vmulss	8(%rsi,%rax,4), %xmm1, %xmm1
	LONG $0xc058eac5               // vaddss	%xmm0, %xmm2, %xmm0
	LONG $0x5410fac5; WORD $0x0c87 // vmovss	12(%rdi,%rax,4), %xmm2          # xmm2 = mem[0],zero,zero,zero
	LONG $0x5459eac5; WORD $0x0c86 // vmulss	12(%rsi,%rax,4), %xmm2, %xmm2
	LONG $0xc058f2c5               // vaddss	%xmm0, %xmm1, %xmm0
	LONG $0xc058eac5               // vaddss	%xmm0, %xmm2, %xmm0
	LONG $0x04c08348               // addq	$4, %rax
	WORD $0x3948; BYTE $0xc1       // cmpq	%rax, %rcx
	JNE  LBB6_12

LBB6_13:
	WORD $0x8548; BYTE $0xd2 // testq	%rdx, %rdx
	JE   LBB6_16
	LONG $0x860c8d48         // leaq	(%rsi,%rax,4), %rcx
	LONG $0x87048d48         // leaq	(%rdi,%rax,4), %rax
	WORD $0xf631             // xorl	%esi, %esi

LBB6_15:
	LONG $0x0c10fac5; BYTE $0xb0 // vmovss	(%rax,%rsi,4), %xmm1            # xmm1 = mem[0],zero,zero,zero
	LONG $0x0c59f2c5; BYTE $0xb1 // vmulss	(%rcx,%rsi,4), %xmm1, %xmm1
	LONG $0xc058f2c5             // vaddss	%xmm0, %xmm1, %xmm0
	WORD $0xff48; BYTE $0xc6     // incq	%rsi
	WORD $0x3948; BYTE $0xf2     // cmpq	%rsi, %rdx
	JNE  LBB6_15

LBB6_16:
	WORD  $0x8948; BYTE $0xec // movq	%rbp, %rsp
	BYTE  $0x5d               // popq	%rbp
	WORD  $0xf8c5; BYTE $0x77 // vzeroupper
	MOVSS X0, result+24(FP)
	RET

TEXT ·_mm256_euclidean(SB), $8-32
	MOVQ a+0(FP), DI
	MOVQ b+8(FP), SI
	MOVQ n+16(FP), DX
	BYTE $0x55               // pushq	%rbp
	WORD $0x8948; BYTE $0xe5 // movq	%rsp, %rbp
	LONG $0xf8e48348         // andq	$-8, %rsp
	LONG $0x07428d48         // leaq	7(%rdx), %rax
	WORD $0x8548; BYTE $0xd2 // testq	%rdx, %rdx
	LONG $0xc2490f48         // cmovnsq	%rdx, %rax
	WORD $0x8949; BYTE $0xc0 // movq	%rax, %r8
	LONG $0x03e8c149         // shrq	$3, %r8
	LONG $0xf8e08348         // andq	$-8, %rax
	WORD $0x2948; BYTE $0xc2 // subq	%rax, %rdx
	WORD $0x8545; BYTE $0xc0 // testl	%r8d, %r8d
	JLE  LBB7_1
	LONG $0x0710fcc5         // vmovups	(%rdi), %ymm0
	LONG $0x065cfcc5         // vsubps	(%rsi), %ymm0, %ymm0
	LONG $0xc059fcc5         // vmulps	%ymm0, %ymm0, %ymm0
	LONG $0x20c78348         // addq	$32, %rdi
	LONG $0x20c68348         // addq	$32, %rsi
	LONG $0x01f88341         // cmpl	$1, %r8d
	JE   LBB7_8
	LONG $0xff488d41         // leal	-1(%r8), %ecx
	LONG $0xfec08341         // addl	$-2, %r8d
	WORD $0xc889             // movl	%ecx, %eax
	WORD $0xe083; BYTE $0x03 // andl	$3, %eax
	LONG $0x03f88341         // cmpl	$3, %r8d
	JB   LBB7_6
	WORD $0xe183; BYTE $0xfc // andl	$-4, %ecx

LBB7_5:
	LONG $0x0f10fcc5             // vmovups	(%rdi), %ymm1
	LONG $0x5710fcc5; BYTE $0x20 // vmovups	32(%rdi), %ymm2
	LONG $0x5f10fcc5; BYTE $0x40 // vmovups	64(%rdi), %ymm3
	LONG $0x6710fcc5; BYTE $0x60 // vmovups	96(%rdi), %ymm4
	LONG $0x0e5cf4c5             // vsubps	(%rsi), %ymm1, %ymm1
	LONG $0xc959f4c5             // vmulps	%ymm1, %ymm1, %ymm1
	LONG $0xc158fcc5             // vaddps	%ymm1, %ymm0, %ymm0
	LONG $0x4e5cecc5; BYTE $0x20 // vsubps	32(%rsi), %ymm2, %ymm1
	LONG $0xc959f4c5             // vmulps	%ymm1, %ymm1, %ymm1
	LONG $0xc158fcc5             // vaddps	%ymm1, %ymm0, %ymm0
	LONG $0x4e5ce4c5; BYTE $0x40 // vsubps	64(%rsi), %ymm3, %ymm1
	LONG $0xc959f4c5             // vmulps	%ymm1, %ymm1, %ymm1
	LONG $0xc158fcc5             // vaddps	%ymm1, %ymm0, %ymm0
	LONG $0x4e5cdcc5; BYTE $0x60 // vsubps	96(%rsi), %ymm4, %ymm1
	LONG $0xc959f4c5             // vmulps	%ymm1, %ymm1, %ymm1
	LONG $0xc158fcc5             // vaddps	%ymm1, %ymm0, %ymm0
	LONG $0x80ef8348             // subq	$-128, %rdi
	LONG $0x80ee8348             // subq	$-128, %rsi
	WORD $0xc183; BYTE $0xfc     // addl	$-4, %ecx
	JNE  LBB7_5

LBB7_6:
	WORD $0xc085 // testl	%eax, %eax
	JE   LBB7_8

LBB7_7:
	LONG $0x0f10fcc5 // vmovups	(%rdi), %ymm1
	LONG $0x0e5cf4c5 // vsubps	(%rsi), %ymm1, %ymm1
	LONG $0xc959f4c5 // vmulps	%ymm1, %ymm1, %ymm1
	LONG $0xc158fcc5 // vaddps	%ymm1, %ymm0, %ymm0
	LONG $0x20c78348 // addq	$32, %rdi
	LONG $0x20c68348 // addq	$32, %rsi
	WORD $0xc8ff     // decl	%eax
	JNE  LBB7_7
	JMP  LBB7_8

LBB7_1:
	LONG $0xc057f8c5 // vxorps	%xmm0, %xmm0, %xmm0

LBB7_8:
	LONG $0x197de3c4; WORD $0x01c1 // vextractf128	$1, %ymm0, %xmm1
	LONG $0xc058f0c5               // vaddps	%xmm0, %xmm1, %xmm0
	LONG $0xc8c6f9c5; BYTE $0x01   // vshufpd	$1, %xmm0, %xmm0, %xmm1         # xmm1 = xmm0[1,0]
	LONG $0xc158f8c5               // vaddps	%xmm1, %xmm0, %xmm0
	LONG $0xc816fac5               // vmovshdup	%xmm0, %xmm1            # xmm1 = xmm0[1,1,3,3]
	LONG $0xc158fac5               // vaddss	%xmm1, %xmm0, %xmm0
	WORD $0xd285                   // testl	%edx, %edx
	JLE  LBB7_14
	WORD $0xd189                   // movl	%edx, %ecx
	LONG $0xff418d48               // leaq	-1(%rcx), %rax
	WORD $0xe283; BYTE $0x03       // andl	$3, %edx
	LONG $0x03f88348               // cmpq	$3, %rax
	JAE  LBB7_15
	WORD $0xc031                   // xorl	%eax, %eax
	JMP  LBB7_11

LBB7_15:
	WORD $0x2948; BYTE $0xd1 // subq	%rdx, %rcx
	WORD $0xc031             // xorl	%eax, %eax

LBB7_16:
	LONG $0x0c10fac5; BYTE $0x87   // vmovss	(%rdi,%rax,4), %xmm1            # xmm1 = mem[0],zero,zero,zero
	LONG $0x5410fac5; WORD $0x0487 // vmovss	4(%rdi,%rax,4), %xmm2           # xmm2 = mem[0],zero,zero,zero
	LONG $0x0c5cf2c5; BYTE $0x86   // vsubss	(%rsi,%rax,4), %xmm1, %xmm1
	LONG $0xc959f2c5               // vmulss	%xmm1, %xmm1, %xmm1
	LONG $0xc058f2c5               // vaddss	%xmm0, %xmm1, %xmm0
	LONG $0x4c5ceac5; WORD $0x0486 // vsubss	4(%rsi,%rax,4), %xmm2, %xmm1
	LONG $0xc959f2c5               // vmulss	%xmm1, %xmm1, %xmm1
	LONG $0xc058f2c5               // vaddss	%xmm0, %xmm1, %xmm0
	LONG $0x4c10fac5; WORD $0x0887 // vmovss	8(%rdi,%rax,4), %xmm1           # xmm1 = mem[0],zero,zero,zero
	LONG $0x4c5cf2c5; WORD $0x0886 // vsubss	8(%rsi,%rax,4), %xmm1, %xmm1
	LONG $0xc959f2c5               // vmulss	%xmm1, %xmm1, %xmm1
	LONG $0xc058f2c5               // vaddss	%xmm0, %xmm1, %xmm0
	LONG $0x4c10fac5; WORD $0x0c87 // vmovss	12(%rdi,%rax,4), %xmm1          # xmm1 = mem[0],zero,zero,zero
	LONG $0x4c5cf2c5; WORD $0x0c86 // vsubss	12(%rsi,%rax,4), %xmm1, %xmm1
	LONG $0xc959f2c5               // vmulss	%xmm1, %xmm1, %xmm1
	LONG $0xc058f2c5               // vaddss	%xmm0, %xmm1, %xmm0
	LONG $0x04c08348               // addq	$4, %rax
	WORD $0x3948; BYTE $0xc1       // cmpq	%rax, %rcx
	JNE  LBB7_16

LBB7_11:
	WORD $0x8548; BYTE $0xd2 // testq	%rdx, %rdx
	JE   LBB7_14
	LONG $0x860c8d48         // leaq	(%rsi,%rax,4), %rcx
	LONG $0x87048d48         // leaq	(%rdi,%rax,4), %rax
	WORD $0xf631             // xorl	%esi, %esi

LBB7_13:
	LONG $0x0c10fac5; BYTE $0xb0 // vmovss	(%rax,%rsi,4), %xmm1            # xmm1 = mem[0],zero,zero,zero
	LONG $0x0c5cf2c5; BYTE $0xb1 // vsubss	(%rcx,%rsi,4), %xmm1, %xmm1
	LONG $0xc959f2c5             // vmulss	%xmm1, %xmm1, %xmm1
	LONG $0xc058f2c5             // vaddss	%xmm0, %xmm1, %xmm0
	WORD $0xff48; BYTE $0xc6     // incq	%rsi
	WORD $0x3948; BYTE $0xf2     // cmpq	%rsi, %rdx
	JNE  LBB7_13

LBB7_14:
	LONG  $0xc051fac5         // vsqrtss	%xmm0, %xmm0, %xmm0
	WORD  $0x8948; BYTE $0xec // movq	%rbp, %rsp
	BYTE  $0x5d               // popq	%rbp
	WORD  $0xf8c5; BYTE $0x77 // vzeroupper
	MOVSS X0, result+24(FP)
	RET

TEXT ·_mm256_mm(SB), $0-64
	MOVQ a+0(FP), DI
	MOVQ b+8(FP), SI
	MOVQ c+16(FP), DX
	MOVQ m+24(FP), CX
	MOVQ n+32(FP), R8
	MOVQ k+40(FP), R9
	MOVQ transA+48(FP), R10
	MOVQ transB+56(FP), R11
	BYTE $0x55                                 // pushq	%rbp
	WORD $0x8948; BYTE $0xe5                   // movq	%rsp, %rbp
	WORD $0x5741                               // pushq	%r15
	WORD $0x5641                               // pushq	%r14
	WORD $0x5541                               // pushq	%r13
	WORD $0x5441                               // pushq	%r12
	BYTE $0x53                                 // pushq	%rbx
	LONG $0xf0e48348                           // andq	$-16, %rsp
	LONG $0x90ec8148; WORD $0x0000; BYTE $0x00 // subq	$144, %rsp
	LONG $0x244c8948; BYTE $0x08               // movq	%rcx, 8(%rsp)                   # 8-byte Spill
	LONG $0x24548948; BYTE $0x30               // movq	%rdx, 48(%rsp)                  # 8-byte Spill
	LONG $0x24748948; BYTE $0x18               // movq	%rsi, 24(%rsp)                  # 8-byte Spill
	LONG $0x247c8948; BYTE $0x28               // movq	%rdi, 40(%rsp)                  # 8-byte Spill
	LONG $0x184db60f                           // movzbl	24(%rbp), %ecx
	LONG $0x1045b60f                           // movzbl	16(%rbp), %eax
	WORD $0xc084                               // testb	%al, %al
	LONG $0x244c894c; BYTE $0x10               // movq	%r9, 16(%rsp)                   # 8-byte Spill
	JNE  LBB8_18
	WORD $0xc984                               // testb	%cl, %cl
	JNE  LBB8_18
	LONG $0x247c8348; WORD $0x0008             // cmpq	$0, 8(%rsp)                     # 8-byte Folded Reload
	JLE  LBB8_111
	LONG $0x247c8348; WORD $0x0010             // cmpq	$0, 16(%rsp)                    # 8-byte Folded Reload
	JLE  LBB8_111
	WORD $0x854d; BYTE $0xc0                   // testq	%r8, %r8
	JLE  LBB8_111
	QUAD $0x0000000085048d4a                   // leaq	(,%r8,4), %rax
	LONG $0x24548b48; BYTE $0x10               // movq	16(%rsp), %rdx                  # 8-byte Reload
	QUAD $0x00000000950c8d48                   // leaq	(,%rdx,4), %rcx
	LONG $0x244c8948; BYTE $0x48               // movq	%rcx, 72(%rsp)                  # 8-byte Spill
	WORD $0x8948; BYTE $0xd1                   // movq	%rdx, %rcx
	LONG $0xc8af0f49                           // imulq	%r8, %rcx
	LONG $0x24748b48; BYTE $0x18               // movq	24(%rsp), %rsi                  # 8-byte Reload
	LONG $0x8e0c8d48                           // leaq	(%rsi,%rcx,4), %rcx
	LONG $0x244c8948; BYTE $0x70               // movq	%rcx, 112(%rsp)                 # 8-byte Spill
	LONG $0x244c8b48; BYTE $0x30               // movq	48(%rsp), %rcx                  # 8-byte Reload
	LONG $0x813c8d4a                           // leaq	(%rcx,%r8,4), %rdi
	LONG $0x247c8948; BYTE $0x68               // movq	%rdi, 104(%rsp)                 # 8-byte Spill
	LONG $0x247c8b48; BYTE $0x28               // movq	40(%rsp), %rdi                  # 8-byte Reload
	LONG $0x97148d48                           // leaq	(%rdi,%rdx,4), %rdx
	LONG $0x24548948; BYTE $0x60               // movq	%rdx, 96(%rsp)                  # 8-byte Spill
	WORD $0x894c; BYTE $0xc3                   // movq	%r8, %rbx
	LONG $0xe0e38348                           // andq	$-32, %rbx
	LONG $0xff508d49                           // leaq	-1(%r8), %rdx
	LONG $0x24548948; BYTE $0x38               // movq	%rdx, 56(%rsp)                  # 8-byte Spill
	LONG $0x60568d48                           // leaq	96(%rsi), %rdx
	LONG $0x24548948; BYTE $0x58               // movq	%rdx, 88(%rsp)                  # 8-byte Spill
	LONG $0x60618d4c                           // leaq	96(%rcx), %r12
	LONG $0x04568d48                           // leaq	4(%rsi), %rdx
	LONG $0x24548948; BYTE $0x78               // movq	%rdx, 120(%rsp)                 # 8-byte Spill
	LONG $0x04518d48                           // leaq	4(%rcx), %rdx
	WORD $0x3145; BYTE $0xff                   // xorl	%r15d, %r15d
	JMP  LBB8_6

LBB8_17:
	LONG $0x247c8b4c; BYTE $0x40 // movq	64(%rsp), %r15                  # 8-byte Reload
	WORD $0xff49; BYTE $0xc7     // incq	%r15
	WORD $0x0149; BYTE $0xc4     // addq	%rax, %r12
	WORD $0x0148; BYTE $0xc2     // addq	%rax, %rdx
	LONG $0x247c3b4c; BYTE $0x08 // cmpq	8(%rsp), %r15                   # 8-byte Folded Reload
	JE   LBB8_111

LBB8_6:
	WORD $0x8548; BYTE $0xc0       // testq	%rax, %rax
	LONG $0x2444980f; BYTE $0x50   // sets	80(%rsp)                        # 1-byte Folded Spill
	WORD $0x8948; BYTE $0xc7       // movq	%rax, %rdi
	LONG $0xffaf0f49               // imulq	%r15, %rdi
	LONG $0x24748b48; BYTE $0x30   // movq	48(%rsp), %rsi                  # 8-byte Reload
	LONG $0x3e0c8d4c               // leaq	(%rsi,%rdi), %r9
	LONG $0x247c0348; BYTE $0x68   // addq	104(%rsp), %rdi                 # 8-byte Folded Reload
	LONG $0x244c8b48; BYTE $0x48   // movq	72(%rsp), %rcx                  # 8-byte Reload
	LONG $0xcfaf0f49               // imulq	%r15, %rcx
	LONG $0x24748b4c; BYTE $0x28   // movq	40(%rsp), %r14                  # 8-byte Reload
	LONG $0x0e148d4d               // leaq	(%r14,%rcx), %r10
	LONG $0x244c0348; BYTE $0x60   // addq	96(%rsp), %rcx                  # 8-byte Folded Reload
	WORD $0x894d; BYTE $0xfb       // movq	%r15, %r11
	LONG $0x5caf0f4c; WORD $0x1024 // imulq	16(%rsp), %r11                  # 8-byte Folded Reload
	LONG $0x247c894c; BYTE $0x40   // movq	%r15, 64(%rsp)                  # 8-byte Spill
	LONG $0xf8af0f4d               // imulq	%r8, %r15
	WORD $0x3949; BYTE $0xc9       // cmpq	%rcx, %r9
	LONG $0xc5920f41               // setb	%r13b
	WORD $0x3949; BYTE $0xfa       // cmpq	%rdi, %r10
	LONG $0x9e0c8d4b               // leaq	(%r14,%r11,4), %rcx
	LONG $0xbe148d4e               // leaq	(%rsi,%r15,4), %r10
	LONG $0xc3920f41               // setb	%r11b
	WORD $0x2045; BYTE $0xeb       // andb	%r13b, %r11b
	LONG $0x244c3b4c; BYTE $0x70   // cmpq	112(%rsp), %r9                  # 8-byte Folded Reload
	LONG $0xc1920f41               // setb	%r9b
	LONG $0x247c3b48; BYTE $0x18   // cmpq	24(%rsp), %rdi                  # 8-byte Folded Reload
	LONG $0xc7970f40               // seta	%dil
	WORD $0x2044; BYTE $0xcf       // andb	%r9b, %dil
	LONG $0x245c0a44; BYTE $0x50   // orb	80(%rsp), %r11b                 # 1-byte Folded Reload
	WORD $0x0841; BYTE $0xfb       // orb	%dil, %r11b
	LONG $0x24748b48; BYTE $0x78   // movq	120(%rsp), %rsi                 # 8-byte Reload
	LONG $0x247c8b4c; BYTE $0x58   // movq	88(%rsp), %r15                  # 8-byte Reload
	WORD $0x3145; BYTE $0xed       // xorl	%r13d, %r13d
	JMP  LBB8_7

LBB8_16:
	WORD $0xff49; BYTE $0xc5     // incq	%r13
	WORD $0x0149; BYTE $0xc7     // addq	%rax, %r15
	WORD $0x0148; BYTE $0xc6     // addq	%rax, %rsi
	LONG $0x246c3b4c; BYTE $0x10 // cmpq	16(%rsp), %r13                  # 8-byte Folded Reload
	JE   LBB8_17

LBB8_7:
	LONG $0x20f88349         // cmpq	$32, %r8
	LONG $0xc7920f40         // setb	%dil
	WORD $0x0844; BYTE $0xdf // orb	%r11b, %dil
	JE   LBB8_9
	WORD $0x3145; BYTE $0xc9 // xorl	%r9d, %r9d
	JMP  LBB8_12

LBB8_9:
	LONG $0x187da2c4; WORD $0xa904 // vbroadcastss	(%rcx,%r13,4), %ymm0
	WORD $0xff31                   // xorl	%edi, %edi

LBB8_10:
	LONG $0x597cc1c4; WORD $0xbf4c; BYTE $0xa0 // vmulps	-96(%r15,%rdi,4), %ymm0, %ymm1
	LONG $0x5874c1c4; WORD $0xbc4c; BYTE $0xa0 // vaddps	-96(%r12,%rdi,4), %ymm1, %ymm1
	LONG $0x597cc1c4; WORD $0xbf54; BYTE $0xc0 // vmulps	-64(%r15,%rdi,4), %ymm0, %ymm2
	LONG $0x586cc1c4; WORD $0xbc54; BYTE $0xc0 // vaddps	-64(%r12,%rdi,4), %ymm2, %ymm2
	LONG $0x597cc1c4; WORD $0xbf5c; BYTE $0xe0 // vmulps	-32(%r15,%rdi,4), %ymm0, %ymm3
	LONG $0x5864c1c4; WORD $0xbc5c; BYTE $0xe0 // vaddps	-32(%r12,%rdi,4), %ymm3, %ymm3
	LONG $0x597cc1c4; WORD $0xbf24             // vmulps	(%r15,%rdi,4), %ymm0, %ymm4
	LONG $0x585cc1c4; WORD $0xbc24             // vaddps	(%r12,%rdi,4), %ymm4, %ymm4
	LONG $0x117cc1c4; WORD $0xbc4c; BYTE $0xa0 // vmovups	%ymm1, -96(%r12,%rdi,4)
	LONG $0x117cc1c4; WORD $0xbc54; BYTE $0xc0 // vmovups	%ymm2, -64(%r12,%rdi,4)
	LONG $0x117cc1c4; WORD $0xbc5c; BYTE $0xe0 // vmovups	%ymm3, -32(%r12,%rdi,4)
	LONG $0x117cc1c4; WORD $0xbc24             // vmovups	%ymm4, (%r12,%rdi,4)
	LONG $0x20c78348                           // addq	$32, %rdi
	WORD $0x3948; BYTE $0xfb                   // cmpq	%rdi, %rbx
	JNE  LBB8_10
	WORD $0x8949; BYTE $0xd9                   // movq	%rbx, %r9
	WORD $0x394c; BYTE $0xc3                   // cmpq	%r8, %rbx
	JE   LBB8_16

LBB8_12:
	WORD $0x894c; BYTE $0xcf       // movq	%r9, %rdi
	LONG $0x01c0f641               // testb	$1, %r8b
	JE   LBB8_14
	WORD $0x894c; BYTE $0xef       // movq	%r13, %rdi
	LONG $0xf8af0f49               // imulq	%r8, %rdi
	LONG $0x24748b4c; BYTE $0x18   // movq	24(%rsp), %r14                  # 8-byte Reload
	LONG $0xbe3c8d49               // leaq	(%r14,%rdi,4), %rdi
	LONG $0x107aa1c4; WORD $0xa904 // vmovss	(%rcx,%r13,4), %xmm0            # xmm0 = mem[0],zero,zero,zero
	LONG $0x597aa1c4; WORD $0x8f04 // vmulss	(%rdi,%r9,4), %xmm0, %xmm0
	LONG $0x587a81c4; WORD $0x8a04 // vaddss	(%r10,%r9,4), %xmm0, %xmm0
	LONG $0x117a81c4; WORD $0x8a04 // vmovss	%xmm0, (%r10,%r9,4)
	WORD $0x894c; BYTE $0xcf       // movq	%r9, %rdi
	LONG $0x01cf8348               // orq	$1, %rdi

LBB8_14:
	LONG $0x244c3b4c; BYTE $0x38 // cmpq	56(%rsp), %r9                   # 8-byte Folded Reload
	JE   LBB8_16

LBB8_15:
	LONG $0x107aa1c4; WORD $0xa904 // vmovss	(%rcx,%r13,4), %xmm0            # xmm0 = mem[0],zero,zero,zero
	LONG $0x4459fac5; WORD $0xfcbe // vmulss	-4(%rsi,%rdi,4), %xmm0, %xmm0
	LONG $0x4458fac5; WORD $0xfcba // vaddss	-4(%rdx,%rdi,4), %xmm0, %xmm0
	LONG $0x4411fac5; WORD $0xfcba // vmovss	%xmm0, -4(%rdx,%rdi,4)
	LONG $0x107aa1c4; WORD $0xa904 // vmovss	(%rcx,%r13,4), %xmm0            # xmm0 = mem[0],zero,zero,zero
	LONG $0x0459fac5; BYTE $0xbe   // vmulss	(%rsi,%rdi,4), %xmm0, %xmm0
	LONG $0x0458fac5; BYTE $0xba   // vaddss	(%rdx,%rdi,4), %xmm0, %xmm0
	LONG $0x0411fac5; BYTE $0xba   // vmovss	%xmm0, (%rdx,%rdi,4)
	LONG $0x02c78348               // addq	$2, %rdi
	WORD $0x3949; BYTE $0xf8       // cmpq	%rdi, %r8
	JNE  LBB8_15
	JMP  LBB8_16

LBB8_18:
	WORD $0xc984                   // testb	%cl, %cl
	JE   LBB8_78
	WORD $0xc084                   // testb	%al, %al
	JNE  LBB8_78
	LONG $0x247c8348; WORD $0x0008 // cmpq	$0, 8(%rsp)                     # 8-byte Folded Reload
	JLE  LBB8_111
	LONG $0x24448b48; BYTE $0x10   // movq	16(%rsp), %rax                  # 8-byte Reload
	LONG $0x07708d48               // leaq	7(%rax), %rsi
	WORD $0x8548; BYTE $0xc0       // testq	%rax, %rax
	LONG $0xf0490f48               // cmovnsq	%rax, %rsi
	WORD $0x854d; BYTE $0xc0       // testq	%r8, %r8
	JLE  LBB8_111
	WORD $0x8948; BYTE $0xf1       // movq	%rsi, %rcx
	LONG $0xf8e18348               // andq	$-8, %rcx
	LONG $0x247c8b48; BYTE $0x10   // movq	16(%rsp), %rdi                  # 8-byte Reload
	WORD $0x8948; BYTE $0xf8       // movq	%rdi, %rax
	WORD $0x2948; BYTE $0xc8       // subq	%rcx, %rax
	LONG $0x03fec148               // sarq	$3, %rsi
	WORD $0xfe83; BYTE $0x02       // cmpl	$2, %esi
	JL   LBB8_49
	WORD $0xc085                   // testl	%eax, %eax
	JLE  LBB8_24
	WORD $0x8941; BYTE $0xc2       // movl	%eax, %r10d
	LONG $0xff5e8d44               // leal	-1(%rsi), %r11d
	WORD $0x4e8d; BYTE $0xfe       // leal	-2(%rsi), %ecx
	LONG $0x38244c89               // movl	%ecx, 56(%rsp)                  # 4-byte Spill
	LONG $0xff728d4d               // leaq	-1(%r10), %r14
	WORD $0x8945; BYTE $0xdf       // movl	%r11d, %r15d
	LONG $0x03e78341               // andl	$3, %r15d
	LONG $0xfce38341               // andl	$-4, %r11d
	WORD $0xe083; BYTE $0x03       // andl	$3, %eax
	WORD $0x2949; BYTE $0xc2       // subq	%rax, %r10
	WORD $0xf631                   // xorl	%esi, %esi
	JMP  LBB8_29

LBB8_41:
	LONG $0x24748b48; BYTE $0x40 // movq	64(%rsp), %rsi                  # 8-byte Reload
	WORD $0xff48; BYTE $0xc6     // incq	%rsi
	LONG $0x24743b48; BYTE $0x08 // cmpq	8(%rsp), %rsi                   # 8-byte Folded Reload
	JE   LBB8_111

LBB8_29:
	WORD $0x8948; BYTE $0xf1       // movq	%rsi, %rcx
	LONG $0x4caf0f48; WORD $0x1024 // imulq	16(%rsp), %rcx                  # 8-byte Folded Reload
	LONG $0x24548b48; BYTE $0x28   // movq	40(%rsp), %rdx                  # 8-byte Reload
	LONG $0x8a2c8d4c               // leaq	(%rdx,%rcx,4), %r13
	LONG $0x8a0c8d48               // leaq	(%rdx,%rcx,4), %rcx
	LONG $0x20c18348               // addq	$32, %rcx
	LONG $0x24748948; BYTE $0x40   // movq	%rsi, 64(%rsp)                  # 8-byte Spill
	WORD $0x8948; BYTE $0xf2       // movq	%rsi, %rdx
	LONG $0xd0af0f49               // imulq	%r8, %rdx
	LONG $0x24748b48; BYTE $0x30   // movq	48(%rsp), %rsi                  # 8-byte Reload
	LONG $0x96148d48               // leaq	(%rsi,%rdx,4), %rdx
	WORD $0xdb31                   // xorl	%ebx, %ebx
	JMP  LBB8_30

LBB8_40:
	LONG $0x0411fac5; BYTE $0x9a // vmovss	%xmm0, (%rdx,%rbx,4)
	WORD $0xff48; BYTE $0xc3     // incq	%rbx
	WORD $0x394c; BYTE $0xc3     // cmpq	%r8, %rbx
	JE   LBB8_41

LBB8_30:
	WORD $0x8948; BYTE $0xde       // movq	%rbx, %rsi
	LONG $0x74af0f48; WORD $0x1024 // imulq	16(%rsp), %rsi                  # 8-byte Folded Reload
	LONG $0x107cc1c4; WORD $0x0045 // vmovups	(%r13), %ymm0
	LONG $0x247c8b48; BYTE $0x18   // movq	24(%rsp), %rdi                  # 8-byte Reload
	LONG $0x0459fcc5; BYTE $0xb7   // vmulps	(%rdi,%rsi,4), %ymm0, %ymm0
	LONG $0xb73c8d48               // leaq	(%rdi,%rsi,4), %rdi
	LONG $0x20c78348               // addq	$32, %rdi
	WORD $0x8944; BYTE $0xde       // movl	%r11d, %esi
	WORD $0x8949; BYTE $0xcc       // movq	%rcx, %r12
	LONG $0x38247c83; BYTE $0x03   // cmpl	$3, 56(%rsp)                    # 4-byte Folded Reload
	JB   LBB8_32

LBB8_31:
	LONG $0x107cc1c4; WORD $0x240c             // vmovups	(%r12), %ymm1
	LONG $0x107cc1c4; WORD $0x2454; BYTE $0x20 // vmovups	32(%r12), %ymm2
	LONG $0x107cc1c4; WORD $0x245c; BYTE $0x40 // vmovups	64(%r12), %ymm3
	LONG $0x107cc1c4; WORD $0x2464; BYTE $0x60 // vmovups	96(%r12), %ymm4
	LONG $0x0f59f4c5                           // vmulps	(%rdi), %ymm1, %ymm1
	LONG $0xc158fcc5                           // vaddps	%ymm1, %ymm0, %ymm0
	LONG $0x4f59ecc5; BYTE $0x20               // vmulps	32(%rdi), %ymm2, %ymm1
	LONG $0x5759e4c5; BYTE $0x40               // vmulps	64(%rdi), %ymm3, %ymm2
	LONG $0xc158fcc5                           // vaddps	%ymm1, %ymm0, %ymm0
	LONG $0xc258fcc5                           // vaddps	%ymm2, %ymm0, %ymm0
	LONG $0x4f59dcc5; BYTE $0x60               // vmulps	96(%rdi), %ymm4, %ymm1
	LONG $0xc158fcc5                           // vaddps	%ymm1, %ymm0, %ymm0
	LONG $0x80ec8349                           // subq	$-128, %r12
	LONG $0x80ef8348                           // subq	$-128, %rdi
	WORD $0xc683; BYTE $0xfc                   // addl	$-4, %esi
	JNE  LBB8_31

LBB8_32:
	WORD $0x8545; BYTE $0xff // testl	%r15d, %r15d
	JE   LBB8_35
	WORD $0x8944; BYTE $0xfe // movl	%r15d, %esi

LBB8_34:
	LONG $0x107cc1c4; WORD $0x240c // vmovups	(%r12), %ymm1
	LONG $0x0f59f4c5               // vmulps	(%rdi), %ymm1, %ymm1
	LONG $0xc158fcc5               // vaddps	%ymm1, %ymm0, %ymm0
	LONG $0x20c48349               // addq	$32, %r12
	LONG $0x20c78348               // addq	$32, %rdi
	WORD $0xceff                   // decl	%esi
	JNE  LBB8_34

LBB8_35:
	LONG $0x197de3c4; WORD $0x01c1 // vextractf128	$1, %ymm0, %xmm1
	LONG $0xc058f0c5               // vaddps	%xmm0, %xmm1, %xmm0
	LONG $0xc8c6f9c5; BYTE $0x01   // vshufpd	$1, %xmm0, %xmm0, %xmm1         # xmm1 = xmm0[1,0]
	LONG $0xc158f8c5               // vaddps	%xmm1, %xmm0, %xmm0
	LONG $0xc816fac5               // vmovshdup	%xmm0, %xmm1            # xmm1 = xmm0[1,1,3,3]
	LONG $0xc158fac5               // vaddss	%xmm1, %xmm0, %xmm0
	WORD $0xf631                   // xorl	%esi, %esi
	LONG $0x03fe8349               // cmpq	$3, %r14
	JB   LBB8_37

LBB8_36:
	LONG $0x107ac1c4; WORD $0xb40c             // vmovss	(%r12,%rsi,4), %xmm1            # xmm1 = mem[0],zero,zero,zero
	LONG $0x107ac1c4; WORD $0xb454; BYTE $0x04 // vmovss	4(%r12,%rsi,4), %xmm2           # xmm2 = mem[0],zero,zero,zero
	LONG $0x0c59f2c5; BYTE $0xb7               // vmulss	(%rdi,%rsi,4), %xmm1, %xmm1
	LONG $0x5459eac5; WORD $0x04b7             // vmulss	4(%rdi,%rsi,4), %xmm2, %xmm2
	LONG $0xc058f2c5                           // vaddss	%xmm0, %xmm1, %xmm0
	LONG $0x107ac1c4; WORD $0xb44c; BYTE $0x08 // vmovss	8(%r12,%rsi,4), %xmm1           # xmm1 = mem[0],zero,zero,zero
	LONG $0x4c59f2c5; WORD $0x08b7             // vmulss	8(%rdi,%rsi,4), %xmm1, %xmm1
	LONG $0xc058eac5                           // vaddss	%xmm0, %xmm2, %xmm0
	LONG $0x107ac1c4; WORD $0xb454; BYTE $0x0c // vmovss	12(%r12,%rsi,4), %xmm2          # xmm2 = mem[0],zero,zero,zero
	LONG $0x5459eac5; WORD $0x0cb7             // vmulss	12(%rdi,%rsi,4), %xmm2, %xmm2
	LONG $0xc058f2c5                           // vaddss	%xmm0, %xmm1, %xmm0
	LONG $0xc058eac5                           // vaddss	%xmm0, %xmm2, %xmm0
	LONG $0x04c68348                           // addq	$4, %rsi
	WORD $0x3949; BYTE $0xf2                   // cmpq	%rsi, %r10
	JNE  LBB8_36

LBB8_37:
	WORD $0x8548; BYTE $0xc0 // testq	%rax, %rax
	JE   LBB8_40
	LONG $0xb73c8d48         // leaq	(%rdi,%rsi,4), %rdi
	LONG $0xb4348d49         // leaq	(%r12,%rsi,4), %rsi
	WORD $0x3145; BYTE $0xc9 // xorl	%r9d, %r9d

LBB8_39:
	LONG $0x107aa1c4; WORD $0x8e0c // vmovss	(%rsi,%r9,4), %xmm1             # xmm1 = mem[0],zero,zero,zero
	LONG $0x5972a1c4; WORD $0x8f0c // vmulss	(%rdi,%r9,4), %xmm1, %xmm1
	LONG $0xc058f2c5               // vaddss	%xmm0, %xmm1, %xmm0
	WORD $0xff49; BYTE $0xc1       // incq	%r9
	WORD $0x394c; BYTE $0xc8       // cmpq	%r9, %rax
	JNE  LBB8_39
	JMP  LBB8_40

LBB8_78:
	WORD $0x854d; BYTE $0xc9       // testq	%r9, %r9
	LONG $0xc69f0f40               // setg	%sil
	WORD $0x854d; BYTE $0xc0       // testq	%r8, %r8
	WORD $0x9f0f; BYTE $0xc2       // setg	%dl
	WORD $0x2040; BYTE $0xf2       // andb	%sil, %dl
	WORD $0xc084                   // testb	%al, %al
	JE   LBB8_94
	WORD $0xc984                   // testb	%cl, %cl
	JNE  LBB8_94
	LONG $0x247c8348; WORD $0x0008 // cmpq	$0, 8(%rsp)                     # 8-byte Folded Reload
	WORD $0x9e0f; BYTE $0xc0       // setle	%al
	WORD $0xf280; BYTE $0x01       // xorb	$1, %dl
	WORD $0xc208                   // orb	%al, %dl
	JNE  LBB8_111
	QUAD $0x0000000085148d4a       // leaq	(,%r8,4), %rdx
	LONG $0x244c8b48; BYTE $0x10   // movq	16(%rsp), %rcx                  # 8-byte Reload
	LONG $0xff418d48               // leaq	-1(%rcx), %rax
	LONG $0x44af0f48; WORD $0x0824 // imulq	8(%rsp), %rax                   # 8-byte Folded Reload
	LONG $0xc8af0f49               // imulq	%r8, %rcx
	LONG $0x24748b48; BYTE $0x18   // movq	24(%rsp), %rsi                  # 8-byte Reload
	LONG $0x8e0c8d48               // leaq	(%rsi,%rcx,4), %rcx
	LONG $0x244c8948; BYTE $0x48   // movq	%rcx, 72(%rsp)                  # 8-byte Spill
	LONG $0x244c8b48; BYTE $0x30   // movq	48(%rsp), %rcx                  # 8-byte Reload
	LONG $0x813c8d4a               // leaq	(%rcx,%r8,4), %rdi
	LONG $0x247c8948; BYTE $0x70   // movq	%rdi, 112(%rsp)                 # 8-byte Spill
	LONG $0x247c8b48; BYTE $0x28   // movq	40(%rsp), %rdi                  # 8-byte Reload
	LONG $0x87048d48               // leaq	(%rdi,%rax,4), %rax
	LONG $0x04c08348               // addq	$4, %rax
	LONG $0x24448948; BYTE $0x68   // movq	%rax, 104(%rsp)                 # 8-byte Spill
	WORD $0x894c; BYTE $0xc3       // movq	%r8, %rbx
	LONG $0xe0e38348               // andq	$-32, %rbx
	LONG $0xff408d49               // leaq	-1(%r8), %rax
	LONG $0x24448948; BYTE $0x38   // movq	%rax, 56(%rsp)                  # 8-byte Spill
	LONG $0x60468d48               // leaq	96(%rsi), %rax
	LONG $0x24448948; BYTE $0x60   // movq	%rax, 96(%rsp)                  # 8-byte Spill
	LONG $0x60618d4c               // leaq	96(%rcx), %r12
	LONG $0x04468d48               // leaq	4(%rsi), %rax
	LONG $0x24448948; BYTE $0x58   // movq	%rax, 88(%rsp)                  # 8-byte Spill
	LONG $0x04418d48               // leaq	4(%rcx), %rax
	WORD $0x3145; BYTE $0xf6       // xorl	%r14d, %r14d
	JMP  LBB8_82

LBB8_93:
	LONG $0x24748b4c; BYTE $0x50 // movq	80(%rsp), %r14                  # 8-byte Reload
	WORD $0xff49; BYTE $0xc6     // incq	%r14
	WORD $0x0149; BYTE $0xd4     // addq	%rdx, %r12
	WORD $0x0148; BYTE $0xd0     // addq	%rdx, %rax
	LONG $0x24743b4c; BYTE $0x08 // cmpq	8(%rsp), %r14                   # 8-byte Folded Reload
	JE   LBB8_111

LBB8_82:
	WORD $0x8548; BYTE $0xd2               // testq	%rdx, %rdx
	LONG $0xc6980f40                       // sets	%sil
	QUAD $0x000000000000b948; WORD $0x2000 // movabsq	$2305843009213693952, %rcx      # imm = 0x2000000000000000
	LONG $0x244c8548; BYTE $0x08           // testq	%rcx, 8(%rsp)                   # 8-byte Folded Reload
	LONG $0xc7950f40                       // setne	%dil
	WORD $0x8949; BYTE $0xd1               // movq	%rdx, %r9
	LONG $0xceaf0f4d                       // imulq	%r14, %r9
	LONG $0x246c8b4c; BYTE $0x30           // movq	48(%rsp), %r13                  # 8-byte Reload
	LONG $0x291c8d4f                       // leaq	(%r9,%r13), %r11
	LONG $0x244c034c; BYTE $0x70           // addq	112(%rsp), %r9                  # 8-byte Folded Reload
	LONG $0x244c8b48; BYTE $0x28           // movq	40(%rsp), %rcx                  # 8-byte Reload
	LONG $0xb10c8d4a                       // leaq	(%rcx,%r14,4), %rcx
	LONG $0x24548b4c; BYTE $0x68           // movq	104(%rsp), %r10                 # 8-byte Reload
	LONG $0xb2148d4f                       // leaq	(%r10,%r14,4), %r10
	LONG $0x2474894c; BYTE $0x50           // movq	%r14, 80(%rsp)                  # 8-byte Spill
	LONG $0xf0af0f4d                       // imulq	%r8, %r14
	WORD $0x394d; BYTE $0xd3               // cmpq	%r10, %r11
	LONG $0xc2920f41                       // setb	%r10b
	WORD $0x394c; BYTE $0xc9               // cmpq	%r9, %rcx
	LONG $0xc7920f41                       // setb	%r15b
	WORD $0x2045; BYTE $0xd7               // andb	%r10b, %r15b
	QUAD $0x00000000b5148d4e               // leaq	(,%r14,4), %r10
	WORD $0x014d; BYTE $0xea               // addq	%r13, %r10
	LONG $0x2454894c; BYTE $0x40           // movq	%r10, 64(%rsp)                  # 8-byte Spill
	WORD $0x0841; BYTE $0xff               // orb	%dil, %r15b
	LONG $0x245c3b4c; BYTE $0x48           // cmpq	72(%rsp), %r11                  # 8-byte Folded Reload
	LONG $0xc7920f40                       // setb	%dil
	LONG $0x244c3b4c; BYTE $0x18           // cmpq	24(%rsp), %r9                   # 8-byte Folded Reload
	LONG $0xc3970f41                       // seta	%r11b
	WORD $0x2041; BYTE $0xfb               // andb	%dil, %r11b
	WORD $0x0841; BYTE $0xf3               // orb	%sil, %r11b
	WORD $0x0845; BYTE $0xfb               // orb	%r15b, %r11b
	LONG $0x24748b48; BYTE $0x58           // movq	88(%rsp), %rsi                  # 8-byte Reload
	LONG $0x247c8b4c; BYTE $0x60           // movq	96(%rsp), %r15                  # 8-byte Reload
	WORD $0xff31                           // xorl	%edi, %edi
	JMP  LBB8_83

LBB8_92:
	WORD $0xff48; BYTE $0xc7     // incq	%rdi
	WORD $0x0149; BYTE $0xd7     // addq	%rdx, %r15
	WORD $0x0148; BYTE $0xd6     // addq	%rdx, %rsi
	LONG $0x247c3b48; BYTE $0x10 // cmpq	16(%rsp), %rdi                  # 8-byte Folded Reload
	JE   LBB8_93

LBB8_83:
	LONG $0x20f88349               // cmpq	$32, %r8
	LONG $0xc1920f41               // setb	%r9b
	WORD $0x8949; BYTE $0xfd       // movq	%rdi, %r13
	LONG $0x6caf0f4c; WORD $0x0824 // imulq	8(%rsp), %r13                   # 8-byte Folded Reload
	WORD $0x0845; BYTE $0xd9       // orb	%r11b, %r9b
	JE   LBB8_85
	WORD $0x3145; BYTE $0xf6       // xorl	%r14d, %r14d
	JMP  LBB8_88

LBB8_85:
	LONG $0x187da2c4; WORD $0xa904 // vbroadcastss	(%rcx,%r13,4), %ymm0
	WORD $0x3145; BYTE $0xc9       // xorl	%r9d, %r9d

LBB8_86:
	LONG $0x597c81c4; WORD $0x8f4c; BYTE $0xa0 // vmulps	-96(%r15,%r9,4), %ymm0, %ymm1
	LONG $0x587481c4; WORD $0x8c4c; BYTE $0xa0 // vaddps	-96(%r12,%r9,4), %ymm1, %ymm1
	LONG $0x597c81c4; WORD $0x8f54; BYTE $0xc0 // vmulps	-64(%r15,%r9,4), %ymm0, %ymm2
	LONG $0x586c81c4; WORD $0x8c54; BYTE $0xc0 // vaddps	-64(%r12,%r9,4), %ymm2, %ymm2
	LONG $0x597c81c4; WORD $0x8f5c; BYTE $0xe0 // vmulps	-32(%r15,%r9,4), %ymm0, %ymm3
	LONG $0x586481c4; WORD $0x8c5c; BYTE $0xe0 // vaddps	-32(%r12,%r9,4), %ymm3, %ymm3
	LONG $0x597c81c4; WORD $0x8f24             // vmulps	(%r15,%r9,4), %ymm0, %ymm4
	LONG $0x585c81c4; WORD $0x8c24             // vaddps	(%r12,%r9,4), %ymm4, %ymm4
	LONG $0x117c81c4; WORD $0x8c4c; BYTE $0xa0 // vmovups	%ymm1, -96(%r12,%r9,4)
	LONG $0x117c81c4; WORD $0x8c54; BYTE $0xc0 // vmovups	%ymm2, -64(%r12,%r9,4)
	LONG $0x117c81c4; WORD $0x8c5c; BYTE $0xe0 // vmovups	%ymm3, -32(%r12,%r9,4)
	LONG $0x117c81c4; WORD $0x8c24             // vmovups	%ymm4, (%r12,%r9,4)
	LONG $0x20c18349                           // addq	$32, %r9
	WORD $0x394c; BYTE $0xcb                   // cmpq	%r9, %rbx
	JNE  LBB8_86
	WORD $0x8949; BYTE $0xde                   // movq	%rbx, %r14
	WORD $0x394c; BYTE $0xc3                   // cmpq	%r8, %rbx
	JE   LBB8_92

LBB8_88:
	WORD $0x894d; BYTE $0xf1       // movq	%r14, %r9
	LONG $0x01c0f641               // testb	$1, %r8b
	JE   LBB8_90
	WORD $0x8949; BYTE $0xf9       // movq	%rdi, %r9
	LONG $0xc8af0f4d               // imulq	%r8, %r9
	LONG $0x24548b4c; BYTE $0x18   // movq	24(%rsp), %r10                  # 8-byte Reload
	LONG $0x8a0c8d4f               // leaq	(%r10,%r9,4), %r9
	LONG $0x107aa1c4; WORD $0xa904 // vmovss	(%rcx,%r13,4), %xmm0            # xmm0 = mem[0],zero,zero,zero
	LONG $0x597a81c4; WORD $0xb104 // vmulss	(%r9,%r14,4), %xmm0, %xmm0
	LONG $0x244c8b4c; BYTE $0x40   // movq	64(%rsp), %r9                   # 8-byte Reload
	LONG $0x587a81c4; WORD $0xb104 // vaddss	(%r9,%r14,4), %xmm0, %xmm0
	LONG $0x117a81c4; WORD $0xb104 // vmovss	%xmm0, (%r9,%r14,4)
	WORD $0x894d; BYTE $0xf1       // movq	%r14, %r9
	LONG $0x01c98349               // orq	$1, %r9

LBB8_90:
	LONG $0x24743b4c; BYTE $0x38 // cmpq	56(%rsp), %r14                  # 8-byte Folded Reload
	JE   LBB8_92

LBB8_91:
	LONG $0x107aa1c4; WORD $0xa904             // vmovss	(%rcx,%r13,4), %xmm0            # xmm0 = mem[0],zero,zero,zero
	LONG $0x597aa1c4; WORD $0x8e44; BYTE $0xfc // vmulss	-4(%rsi,%r9,4), %xmm0, %xmm0
	LONG $0x587aa1c4; WORD $0x8844; BYTE $0xfc // vaddss	-4(%rax,%r9,4), %xmm0, %xmm0
	LONG $0x117aa1c4; WORD $0x8844; BYTE $0xfc // vmovss	%xmm0, -4(%rax,%r9,4)
	LONG $0x107aa1c4; WORD $0xa904             // vmovss	(%rcx,%r13,4), %xmm0            # xmm0 = mem[0],zero,zero,zero
	LONG $0x597aa1c4; WORD $0x8e04             // vmulss	(%rsi,%r9,4), %xmm0, %xmm0
	LONG $0x587aa1c4; WORD $0x8804             // vaddss	(%rax,%r9,4), %xmm0, %xmm0
	LONG $0x117aa1c4; WORD $0x8804             // vmovss	%xmm0, (%rax,%r9,4)
	LONG $0x02c18349                           // addq	$2, %r9
	WORD $0x394d; BYTE $0xc8                   // cmpq	%r9, %r8
	JNE  LBB8_91
	JMP  LBB8_92

LBB8_94:
	WORD $0xca20                   // andb	%cl, %dl
	WORD $0xfa80; BYTE $0x01       // cmpb	$1, %dl
	JNE  LBB8_111
	LONG $0x247c8348; WORD $0x0008 // cmpq	$0, 8(%rsp)                     # 8-byte Folded Reload
	JLE  LBB8_111
	WORD $0xc084                   // testb	%al, %al
	JE   LBB8_111
	QUAD $0x00000000850c8d4e       // leaq	(,%r8,4), %r9
	LONG $0x24548b48; BYTE $0x10   // movq	16(%rsp), %rdx                  # 8-byte Reload
	LONG $0xff428d48               // leaq	-1(%rdx), %rax
	LONG $0x44af0f48; WORD $0x0824 // imulq	8(%rsp), %rax                   # 8-byte Folded Reload
	LONG $0x020c8d4a               // leaq	(%rdx,%r8), %rcx
	LONG $0x24748b48; BYTE $0x18   // movq	24(%rsp), %rsi                  # 8-byte Reload
	LONG $0x8e0c8d48               // leaq	(%rsi,%rcx,4), %rcx
	LONG $0xfcc18348               // addq	$-4, %rcx
	LONG $0x244c8948; BYTE $0x60   // movq	%rcx, 96(%rsp)                  # 8-byte Spill
	LONG $0x244c8b48; BYTE $0x30   // movq	48(%rsp), %rcx                  # 8-byte Reload
	LONG $0x813c8d4a               // leaq	(%rcx,%r8,4), %rdi
	LONG $0x247c8948; BYTE $0x58   // movq	%rdi, 88(%rsp)                  # 8-byte Spill
	LONG $0x247c8b48; BYTE $0x28   // movq	40(%rsp), %rdi                  # 8-byte Reload
	LONG $0x87048d48               // leaq	(%rdi,%rax,4), %rax
	LONG $0x04c08348               // addq	$4, %rax
	LONG $0x24448948; BYTE $0x78   // movq	%rax, 120(%rsp)                 # 8-byte Spill
	LONG $0x20f88349               // cmpq	$32, %r8
	WORD $0x930f; BYTE $0xc0       // setae	%al
	LONG $0x01fa8348               // cmpq	$1, %rdx
	LONG $0xc3940f41               // sete	%r11b
	WORD $0x2041; BYTE $0xc3       // andb	%al, %r11b
	WORD $0x894d; BYTE $0xc6       // movq	%r8, %r14
	LONG $0xe0e68349               // andq	$-32, %r14
	LONG $0xff408d49               // leaq	-1(%r8), %rax
	LONG $0x24448948; BYTE $0x40   // movq	%rax, 64(%rsp)                  # 8-byte Spill
	LONG $0x60468d48               // leaq	96(%rsi), %rax
	QUAD $0x0000008024848948       // movq	%rax, 128(%rsp)                 # 8-byte Spill
	LONG $0x60698d4c               // leaq	96(%rcx), %r13
	QUAD $0x0000000095048d48       // leaq	(,%rdx,4), %rax
	LONG $0x24448948; BYTE $0x48   // movq	%rax, 72(%rsp)                  # 8-byte Spill
	QUAD $0x00000000d53c8d48       // leaq	(,%rdx,8), %rdi
	LONG $0x04518d4c               // leaq	4(%rcx), %r10
	LONG $0x01f38041               // xorb	$1, %r11b
	LONG $0x245c8844; BYTE $0x27   // movb	%r11b, 39(%rsp)                 # 1-byte Spill
	WORD $0x3145; BYTE $0xdb       // xorl	%r11d, %r11d
	LONG $0x244c894c; BYTE $0x68   // movq	%r9, 104(%rsp)                  # 8-byte Spill
	JMP  LBB8_98

LBB8_110:
	LONG $0x245c8b4c; BYTE $0x70 // movq	112(%rsp), %r11                 # 8-byte Reload
	WORD $0xff49; BYTE $0xc3     // incq	%r11
	LONG $0x244c8b4c; BYTE $0x68 // movq	104(%rsp), %r9                  # 8-byte Reload
	WORD $0x014d; BYTE $0xcd     // addq	%r9, %r13
	WORD $0x014d; BYTE $0xca     // addq	%r9, %r10
	LONG $0x245c3b4c; BYTE $0x08 // cmpq	8(%rsp), %r11                   # 8-byte Folded Reload
	JE   LBB8_111

LBB8_98:
	QUAD $0x000000000000b848; WORD $0x2000 // movabsq	$2305843009213693952, %rax      # imm = 0x2000000000000000
	LONG $0x24448548; BYTE $0x08           // testq	%rax, 8(%rsp)                   # 8-byte Folded Reload
	WORD $0x950f; BYTE $0xc0               // setne	%al
	WORD $0x894c; BYTE $0xca               // movq	%r9, %rdx
	LONG $0xd3af0f49                       // imulq	%r11, %rdx
	LONG $0x245c8b48; BYTE $0x30           // movq	48(%rsp), %rbx                  # 8-byte Reload
	LONG $0x13348d48                       // leaq	(%rbx,%rdx), %rsi
	LONG $0x24540348; BYTE $0x58           // addq	88(%rsp), %rdx                  # 8-byte Folded Reload
	LONG $0x244c8b48; BYTE $0x28           // movq	40(%rsp), %rcx                  # 8-byte Reload
	LONG $0x990c8d4a                       // leaq	(%rcx,%r11,4), %rcx
	LONG $0x244c8b4c; BYTE $0x78           // movq	120(%rsp), %r9                  # 8-byte Reload
	LONG $0x990c8d4f                       // leaq	(%r9,%r11,4), %r9
	LONG $0x245c894c; BYTE $0x70           // movq	%r11, 112(%rsp)                 # 8-byte Spill
	LONG $0xd8af0f4d                       // imulq	%r8, %r11
	LONG $0x9b1c8d4e                       // leaq	(%rbx,%r11,4), %r11
	LONG $0x245c894c; BYTE $0x50           // movq	%r11, 80(%rsp)                  # 8-byte Spill
	WORD $0x394c; BYTE $0xce               // cmpq	%r9, %rsi
	LONG $0xc1920f41                       // setb	%r9b
	WORD $0x3948; BYTE $0xd1               // cmpq	%rdx, %rcx
	LONG $0xc3920f41                       // setb	%r11b
	WORD $0x2045; BYTE $0xcb               // andb	%r9b, %r11b
	WORD $0x0841; BYTE $0xc3               // orb	%al, %r11b
	LONG $0x24743b48; BYTE $0x60           // cmpq	96(%rsp), %rsi                  # 8-byte Folded Reload
	WORD $0x920f; BYTE $0xc0               // setb	%al
	LONG $0x245c8b48; BYTE $0x18           // movq	24(%rsp), %rbx                  # 8-byte Reload
	WORD $0x3948; BYTE $0xda               // cmpq	%rbx, %rdx
	WORD $0x970f; BYTE $0xc2               // seta	%dl
	WORD $0xc220                           // andb	%al, %dl
	WORD $0x0844; BYTE $0xda               // orb	%r11b, %dl
	LONG $0x2724540a                       // orb	39(%rsp), %dl                   # 1-byte Folded Reload
	LONG $0x38245488                       // movb	%dl, 56(%rsp)                   # 1-byte Spill
	QUAD $0x0000008024948b48               // movq	128(%rsp), %rdx                 # 8-byte Reload
	WORD $0x3145; BYTE $0xff               // xorl	%r15d, %r15d
	JMP  LBB8_99

LBB8_109:
	WORD $0xff49; BYTE $0xc7     // incq	%r15
	LONG $0x04c28348             // addq	$4, %rdx
	LONG $0x04c38348             // addq	$4, %rbx
	LONG $0x247c3b4c; BYTE $0x10 // cmpq	16(%rsp), %r15                  # 8-byte Folded Reload
	JE   LBB8_110

LBB8_99:
	WORD $0x894d; BYTE $0xfb       // movq	%r15, %r11
	LONG $0x5caf0f4c; WORD $0x0824 // imulq	8(%rsp), %r11                   # 8-byte Folded Reload
	LONG $0x38247c80; BYTE $0x00   // cmpb	$0, 56(%rsp)                    # 1-byte Folded Reload
	JE   LBB8_101
	WORD $0x3145; BYTE $0xc9       // xorl	%r9d, %r9d
	JMP  LBB8_104

LBB8_101:
	LONG $0x187da2c4; WORD $0x9904 // vbroadcastss	(%rcx,%r11,4), %ymm0
	WORD $0xc031                   // xorl	%eax, %eax

LBB8_102:
	LONG $0x4c59fcc5; WORD $0xa082             // vmulps	-96(%rdx,%rax,4), %ymm0, %ymm1
	LONG $0x5874c1c4; WORD $0x854c; BYTE $0xa0 // vaddps	-96(%r13,%rax,4), %ymm1, %ymm1
	LONG $0x5459fcc5; WORD $0xc082             // vmulps	-64(%rdx,%rax,4), %ymm0, %ymm2
	LONG $0x586cc1c4; WORD $0x8554; BYTE $0xc0 // vaddps	-64(%r13,%rax,4), %ymm2, %ymm2
	LONG $0x5c59fcc5; WORD $0xe082             // vmulps	-32(%rdx,%rax,4), %ymm0, %ymm3
	LONG $0x5864c1c4; WORD $0x855c; BYTE $0xe0 // vaddps	-32(%r13,%rax,4), %ymm3, %ymm3
	LONG $0x2459fcc5; BYTE $0x82               // vmulps	(%rdx,%rax,4), %ymm0, %ymm4
	LONG $0x585cc1c4; WORD $0x8564; BYTE $0x00 // vaddps	(%r13,%rax,4), %ymm4, %ymm4
	LONG $0x117cc1c4; WORD $0x854c; BYTE $0xa0 // vmovups	%ymm1, -96(%r13,%rax,4)
	LONG $0x117cc1c4; WORD $0x8554; BYTE $0xc0 // vmovups	%ymm2, -64(%r13,%rax,4)
	LONG $0x117cc1c4; WORD $0x855c; BYTE $0xe0 // vmovups	%ymm3, -32(%r13,%rax,4)
	LONG $0x117cc1c4; WORD $0x8564; BYTE $0x00 // vmovups	%ymm4, (%r13,%rax,4)
	LONG $0x20c08348                           // addq	$32, %rax
	WORD $0x3949; BYTE $0xc6                   // cmpq	%rax, %r14
	JNE  LBB8_102
	WORD $0x894d; BYTE $0xf1                   // movq	%r14, %r9
	WORD $0x394d; BYTE $0xc6                   // cmpq	%r8, %r14
	JE   LBB8_109

LBB8_104:
	WORD $0x894c; BYTE $0xc8       // movq	%r9, %rax
	LONG $0x01c0f641               // testb	$1, %r8b
	JE   LBB8_106
	LONG $0x24448b48; BYTE $0x18   // movq	24(%rsp), %rax                  # 8-byte Reload
	LONG $0xb8048d4a               // leaq	(%rax,%r15,4), %rax
	LONG $0x107aa1c4; WORD $0x9904 // vmovss	(%rcx,%r11,4), %xmm0            # xmm0 = mem[0],zero,zero,zero
	WORD $0x894c; BYTE $0xce       // movq	%r9, %rsi
	LONG $0x74af0f48; WORD $0x1024 // imulq	16(%rsp), %rsi                  # 8-byte Folded Reload
	LONG $0x0459fac5; BYTE $0xb0   // vmulss	(%rax,%rsi,4), %xmm0, %xmm0
	LONG $0x24448b48; BYTE $0x50   // movq	80(%rsp), %rax                  # 8-byte Reload
	LONG $0x587aa1c4; WORD $0x8804 // vaddss	(%rax,%r9,4), %xmm0, %xmm0
	LONG $0x117aa1c4; WORD $0x8804 // vmovss	%xmm0, (%rax,%r9,4)
	WORD $0x894c; BYTE $0xc8       // movq	%r9, %rax
	LONG $0x01c88348               // orq	$1, %rax

LBB8_106:
	LONG $0x244c3b4c; BYTE $0x40 // cmpq	64(%rsp), %r9                   # 8-byte Folded Reload
	JE   LBB8_109
	LONG $0x24748b48; BYTE $0x48 // movq	72(%rsp), %rsi                  # 8-byte Reload
	WORD $0x8949; BYTE $0xf1     // movq	%rsi, %r9
	LONG $0xc8af0f4c             // imulq	%rax, %r9
	LONG $0x01608d4c             // leaq	1(%rax), %r12
	LONG $0xe6af0f4c             // imulq	%rsi, %r12
	WORD $0x8948; BYTE $0xde     // movq	%rbx, %rsi

LBB8_108:
	LONG $0x107aa1c4; WORD $0x9904             // vmovss	(%rcx,%r11,4), %xmm0            # xmm0 = mem[0],zero,zero,zero
	LONG $0x597aa1c4; WORD $0x0e04             // vmulss	(%rsi,%r9), %xmm0, %xmm0
	LONG $0x587ac1c4; WORD $0x8244; BYTE $0xfc // vaddss	-4(%r10,%rax,4), %xmm0, %xmm0
	LONG $0x117ac1c4; WORD $0x8244; BYTE $0xfc // vmovss	%xmm0, -4(%r10,%rax,4)
	LONG $0x107aa1c4; WORD $0x9904             // vmovss	(%rcx,%r11,4), %xmm0            # xmm0 = mem[0],zero,zero,zero
	LONG $0x597aa1c4; WORD $0x2604             // vmulss	(%rsi,%r12), %xmm0, %xmm0
	LONG $0x587ac1c4; WORD $0x8204             // vaddss	(%r10,%rax,4), %xmm0, %xmm0
	LONG $0x117ac1c4; WORD $0x8204             // vmovss	%xmm0, (%r10,%rax,4)
	LONG $0x02c08348                           // addq	$2, %rax
	WORD $0x0148; BYTE $0xfe                   // addq	%rdi, %rsi
	WORD $0x3949; BYTE $0xc0                   // cmpq	%rax, %r8
	JNE  LBB8_108
	JMP  LBB8_109

LBB8_49:
	WORD $0xc085                 // testl	%eax, %eax
	LONG $0x244c8b4c; BYTE $0x28 // movq	40(%rsp), %r9                   # 8-byte Reload
	JLE  LBB8_69
	WORD $0x8941; BYTE $0xc2     // movl	%eax, %r10d
	LONG $0xff4a8d49             // leaq	-1(%r10), %rcx
	WORD $0xe083; BYTE $0x03     // andl	$3, %eax
	WORD $0x2949; BYTE $0xc2     // subq	%rax, %r10
	WORD $0xf685                 // testl	%esi, %esi
	JLE  LBB8_51
	LONG $0x2c518d49             // leaq	44(%r9), %rdx
	QUAD $0x00000000bd3c8d48     // leaq	(,%rdi,4), %rdi
	LONG $0x24748b48; BYTE $0x18 // movq	24(%rsp), %rsi                  # 8-byte Reload
	LONG $0x2c5e8d4c             // leaq	44(%rsi), %r11
	LONG $0x245c894c; BYTE $0x50 // movq	%r11, 80(%rsp)                  # 8-byte Spill
	LONG $0x20c68348             // addq	$32, %rsi
	LONG $0x24748948; BYTE $0x48 // movq	%rsi, 72(%rsp)                  # 8-byte Spill
	LONG $0x20718d49             // leaq	32(%r9), %rsi
	LONG $0x24748948; BYTE $0x38 // movq	%rsi, 56(%rsp)                  # 8-byte Spill
	WORD $0x3145; BYTE $0xc9     // xorl	%r9d, %r9d
	JMP  LBB8_61

LBB8_68:
	LONG $0x244c8b4c; BYTE $0x40 // movq	64(%rsp), %r9                   # 8-byte Reload
	WORD $0xff49; BYTE $0xc1     // incq	%r9
	WORD $0x0148; BYTE $0xfa     // addq	%rdi, %rdx
	LONG $0x247c0148; BYTE $0x38 // addq	%rdi, 56(%rsp)                  # 8-byte Folded Spill
	LONG $0x244c3b4c; BYTE $0x08 // cmpq	8(%rsp), %r9                    # 8-byte Folded Reload
	JE   LBB8_111

LBB8_61:
	WORD $0x894c; BYTE $0xce       // movq	%r9, %rsi
	LONG $0x74af0f48; WORD $0x1024 // imulq	16(%rsp), %rsi                  # 8-byte Folded Reload
	LONG $0x244c894c; BYTE $0x40   // movq	%r9, 64(%rsp)                   # 8-byte Spill
	LONG $0xc8af0f4d               // imulq	%r8, %r9
	LONG $0x245c8b4c; BYTE $0x30   // movq	48(%rsp), %r11                  # 8-byte Reload
	LONG $0x8b248d4f               // leaq	(%r11,%r9,4), %r12
	LONG $0x246c8b4c; BYTE $0x48   // movq	72(%rsp), %r13                  # 8-byte Reload
	LONG $0x245c8b4c; BYTE $0x50   // movq	80(%rsp), %r11                  # 8-byte Reload
	WORD $0xdb31                   // xorl	%ebx, %ebx
	JMP  LBB8_62

LBB8_67:
	LONG $0x117ac1c4; WORD $0x9c04 // vmovss	%xmm0, (%r12,%rbx,4)
	WORD $0xff48; BYTE $0xc3       // incq	%rbx
	WORD $0x0149; BYTE $0xfb       // addq	%rdi, %r11
	WORD $0x0149; BYTE $0xfd       // addq	%rdi, %r13
	WORD $0x394c; BYTE $0xc3       // cmpq	%r8, %rbx
	JE   LBB8_68

LBB8_62:
	WORD $0x8949; BYTE $0xd9       // movq	%rbx, %r9
	LONG $0x4caf0f4c; WORD $0x1024 // imulq	16(%rsp), %r9                   # 8-byte Folded Reload
	LONG $0x24748b4c; BYTE $0x28   // movq	40(%rsp), %r14                  # 8-byte Reload
	LONG $0x107cc1c4; WORD $0xb604 // vmovups	(%r14,%rsi,4), %ymm0
	LONG $0x24748b4c; BYTE $0x18   // movq	24(%rsp), %r14                  # 8-byte Reload
	LONG $0x597c81c4; WORD $0x8e04 // vmulps	(%r14,%r9,4), %ymm0, %ymm0
	LONG $0x197de3c4; WORD $0x01c1 // vextractf128	$1, %ymm0, %xmm1
	LONG $0xc058f0c5               // vaddps	%xmm0, %xmm1, %xmm0
	LONG $0xc8c6f9c5; BYTE $0x01   // vshufpd	$1, %xmm0, %xmm0, %xmm1         # xmm1 = xmm0[1,0]
	LONG $0xc158f8c5               // vaddps	%xmm1, %xmm0, %xmm0
	LONG $0xc816fac5               // vmovshdup	%xmm0, %xmm1            # xmm1 = xmm0[1,1,3,3]
	LONG $0xc158fac5               // vaddss	%xmm1, %xmm0, %xmm0
	WORD $0x3145; BYTE $0xff       // xorl	%r15d, %r15d
	LONG $0x03f98348               // cmpq	$3, %rcx
	JB   LBB8_64

LBB8_63:
	LONG $0x107aa1c4; WORD $0xba4c; BYTE $0xf4 // vmovss	-12(%rdx,%r15,4), %xmm1         # xmm1 = mem[0],zero,zero,zero
	LONG $0x107aa1c4; WORD $0xba54; BYTE $0xf8 // vmovss	-8(%rdx,%r15,4), %xmm2          # xmm2 = mem[0],zero,zero,zero
	LONG $0x597281c4; WORD $0xbb4c; BYTE $0xf4 // vmulss	-12(%r11,%r15,4), %xmm1, %xmm1
	LONG $0x596a81c4; WORD $0xbb54; BYTE $0xf8 // vmulss	-8(%r11,%r15,4), %xmm2, %xmm2
	LONG $0xc058f2c5                           // vaddss	%xmm0, %xmm1, %xmm0
	LONG $0x107aa1c4; WORD $0xba4c; BYTE $0xfc // vmovss	-4(%rdx,%r15,4), %xmm1          # xmm1 = mem[0],zero,zero,zero
	LONG $0x597281c4; WORD $0xbb4c; BYTE $0xfc // vmulss	-4(%r11,%r15,4), %xmm1, %xmm1
	LONG $0xc058eac5                           // vaddss	%xmm0, %xmm2, %xmm0
	LONG $0x107aa1c4; WORD $0xba14             // vmovss	(%rdx,%r15,4), %xmm2            # xmm2 = mem[0],zero,zero,zero
	LONG $0x596a81c4; WORD $0xbb14             // vmulss	(%r11,%r15,4), %xmm2, %xmm2
	LONG $0xc058f2c5                           // vaddss	%xmm0, %xmm1, %xmm0
	LONG $0xc058eac5                           // vaddss	%xmm0, %xmm2, %xmm0
	LONG $0x04c78349                           // addq	$4, %r15
	WORD $0x394d; BYTE $0xfa                   // cmpq	%r15, %r10
	JNE  LBB8_63

LBB8_64:
	WORD $0x8548; BYTE $0xc0     // testq	%rax, %rax
	JE   LBB8_67
	QUAD $0x00000000bd0c8d4e     // leaq	(,%r15,4), %r9
	WORD $0x014d; BYTE $0xe9     // addq	%r13, %r9
	LONG $0x24748b4c; BYTE $0x38 // movq	56(%rsp), %r14                  # 8-byte Reload
	LONG $0xbe3c8d4f             // leaq	(%r14,%r15,4), %r15
	WORD $0x3145; BYTE $0xf6     // xorl	%r14d, %r14d

LBB8_66:
	LONG $0x107a81c4; WORD $0xb70c // vmovss	(%r15,%r14,4), %xmm1            # xmm1 = mem[0],zero,zero,zero
	LONG $0x597281c4; WORD $0xb10c // vmulss	(%r9,%r14,4), %xmm1, %xmm1
	LONG $0xc058f2c5               // vaddss	%xmm0, %xmm1, %xmm0
	WORD $0xff49; BYTE $0xc6       // incq	%r14
	WORD $0x394c; BYTE $0xf0       // cmpq	%r14, %rax
	JNE  LBB8_66
	JMP  LBB8_67

LBB8_24:
	WORD $0x468d; BYTE $0xff     // leal	-1(%rsi), %eax
	WORD $0x4e8d; BYTE $0xfe     // leal	-2(%rsi), %ecx
	WORD $0xc289                 // movl	%eax, %edx
	WORD $0xe283; BYTE $0xfc     // andl	$-4, %edx
	WORD $0xfe40; BYTE $0xce     // decb	%sil
	LONG $0xfeb60f40             // movzbl	%sil, %edi
	WORD $0xe783; BYTE $0x03     // andl	$3, %edi
	WORD $0xe7c1; BYTE $0x05     // shll	$5, %edi
	WORD $0x3145; BYTE $0xd2     // xorl	%r10d, %r10d
	LONG $0x246c8b4c; BYTE $0x10 // movq	16(%rsp), %r13                  # 8-byte Reload
	JMP  LBB8_25

LBB8_48:
	WORD $0xff49; BYTE $0xc2     // incq	%r10
	LONG $0x24543b4c; BYTE $0x08 // cmpq	8(%rsp), %r10                   # 8-byte Folded Reload
	JE   LBB8_111

LBB8_25:
	WORD $0x894c; BYTE $0xd6     // movq	%r10, %rsi
	LONG $0xf5af0f49             // imulq	%r13, %rsi
	LONG $0x244c8b4c; BYTE $0x28 // movq	40(%rsp), %r9                   # 8-byte Reload
	LONG $0xb1348d49             // leaq	(%r9,%rsi,4), %rsi
	WORD $0x894d; BYTE $0xd1     // movq	%r10, %r9
	LONG $0xc8af0f4d             // imulq	%r8, %r9
	LONG $0x245c8b4c; BYTE $0x30 // movq	48(%rsp), %r11                  # 8-byte Reload
	LONG $0x8b1c8d4f             // leaq	(%r11,%r9,4), %r11
	WORD $0xdb31                 // xorl	%ebx, %ebx
	JMP  LBB8_26

LBB8_47:
	LONG $0x197de3c4; WORD $0x01c1 // vextractf128	$1, %ymm0, %xmm1
	LONG $0xc058f0c5               // vaddps	%xmm0, %xmm1, %xmm0
	LONG $0xc8c6f9c5; BYTE $0x01   // vshufpd	$1, %xmm0, %xmm0, %xmm1         # xmm1 = xmm0[1,0]
	LONG $0xc158f8c5               // vaddps	%xmm1, %xmm0, %xmm0
	LONG $0xc816fac5               // vmovshdup	%xmm0, %xmm1            # xmm1 = xmm0[1,1,3,3]
	LONG $0xc158fac5               // vaddss	%xmm1, %xmm0, %xmm0
	LONG $0x117ac1c4; WORD $0x9b04 // vmovss	%xmm0, (%r11,%rbx,4)
	WORD $0xff48; BYTE $0xc3       // incq	%rbx
	WORD $0x394c; BYTE $0xc3       // cmpq	%r8, %rbx
	JE   LBB8_48

LBB8_26:
	WORD $0x8949; BYTE $0xd9       // movq	%rbx, %r9
	LONG $0xcdaf0f4d               // imulq	%r13, %r9
	LONG $0x247c8b4c; BYTE $0x18   // movq	24(%rsp), %r15                  # 8-byte Reload
	LONG $0x8f348d4f               // leaq	(%r15,%r9,4), %r14
	LONG $0x0610fcc5               // vmovups	(%rsi), %ymm0
	LONG $0x597c81c4; WORD $0x8f04 // vmulps	(%r15,%r9,4), %ymm0, %ymm0
	WORD $0xf983; BYTE $0x03       // cmpl	$3, %ecx
	JAE  LBB8_42
	WORD $0x8949; BYTE $0xf7       // movq	%rsi, %r15
	JMP  LBB8_44

LBB8_42:
	WORD $0x8941; BYTE $0xd4 // movl	%edx, %r12d
	WORD $0x8949; BYTE $0xf7 // movq	%rsi, %r15

LBB8_43:
	LONG $0x107cc1c4; WORD $0x204f       // vmovups	32(%r15), %ymm1
	LONG $0x107cc1c4; WORD $0x4057       // vmovups	64(%r15), %ymm2
	LONG $0x107cc1c4; WORD $0x605f       // vmovups	96(%r15), %ymm3
	QUAD $0x000080a7107cc1c4; BYTE $0x00 // vmovups	128(%r15), %ymm4
	LONG $0x5974c1c4; WORD $0x204e       // vmulps	32(%r14), %ymm1, %ymm1
	LONG $0xc158fcc5                     // vaddps	%ymm1, %ymm0, %ymm0
	LONG $0x596cc1c4; WORD $0x404e       // vmulps	64(%r14), %ymm2, %ymm1
	LONG $0x5964c1c4; WORD $0x6056       // vmulps	96(%r14), %ymm3, %ymm2
	LONG $0xc158fcc5                     // vaddps	%ymm1, %ymm0, %ymm0
	LONG $0xc258fcc5                     // vaddps	%ymm2, %ymm0, %ymm0
	QUAD $0x0000808e595cc1c4; BYTE $0x00 // vmulps	128(%r14), %ymm4, %ymm1
	LONG $0x80ef8349                     // subq	$-128, %r15
	LONG $0x80ee8349                     // subq	$-128, %r14
	LONG $0xc158fcc5                     // vaddps	%ymm1, %ymm0, %ymm0
	LONG $0xfcc48341                     // addl	$-4, %r12d
	JNE  LBB8_43

LBB8_44:
	WORD $0x03a8             // testb	$3, %al
	JE   LBB8_47
	WORD $0x3145; BYTE $0xc9 // xorl	%r9d, %r9d

LBB8_46:
	LONG $0x107c81c4; WORD $0x0f4c; BYTE $0x20 // vmovups	32(%r15,%r9), %ymm1
	LONG $0x597481c4; WORD $0x0e4c; BYTE $0x20 // vmulps	32(%r14,%r9), %ymm1, %ymm1
	LONG $0xc158fcc5                           // vaddps	%ymm1, %ymm0, %ymm0
	LONG $0x20c18349                           // addq	$32, %r9
	WORD $0x3944; BYTE $0xcf                   // cmpl	%r9d, %edi
	JNE  LBB8_46
	JMP  LBB8_47

LBB8_69:
	WORD $0xf685                           // testl	%esi, %esi
	JLE  LBB8_112
	QUAD $0xfffffffffffeb848; WORD $0x7fff // movabsq	$9223372036854775806, %rax      # imm = 0x7FFFFFFFFFFFFFFE
	WORD $0x214c; BYTE $0xc0               // andq	%r8, %rax
	QUAD $0x00000000fd0c8d48               // leaq	(,%rdi,8), %rcx
	LONG $0x24548b48; BYTE $0x30           // movq	48(%rsp), %rdx                  # 8-byte Reload
	LONG $0x04c28348                       // addq	$4, %rdx
	QUAD $0x0000000085348d4a               // leaq	(,%r8,4), %rsi
	WORD $0xff31                           // xorl	%edi, %edi
	LONG $0x24748b4c; BYTE $0x10           // movq	16(%rsp), %r14                  # 8-byte Reload
	JMP  LBB8_71

LBB8_77:
	WORD $0xff48; BYTE $0xc7     // incq	%rdi
	WORD $0x0148; BYTE $0xf2     // addq	%rsi, %rdx
	LONG $0x247c3b48; BYTE $0x08 // cmpq	8(%rsp), %rdi                   # 8-byte Folded Reload
	JE   LBB8_111

LBB8_71:
	WORD $0x8949; BYTE $0xfb     // movq	%rdi, %r11
	LONG $0xdeaf0f4d             // imulq	%r14, %r11
	LONG $0x01f88349             // cmpq	$1, %r8
	JNE  LBB8_73
	WORD $0x3145; BYTE $0xd2     // xorl	%r10d, %r10d
	LONG $0x247c8b4c; BYTE $0x28 // movq	40(%rsp), %r15                  # 8-byte Reload
	JMP  LBB8_75

LBB8_73:
	LONG $0x245c8b48; BYTE $0x18 // movq	24(%rsp), %rbx                  # 8-byte Reload
	WORD $0x3145; BYTE $0xd2     // xorl	%r10d, %r10d
	LONG $0x247c8b4c; BYTE $0x28 // movq	40(%rsp), %r15                  # 8-byte Reload

LBB8_74:
	LONG $0x107c81c4; WORD $0x9f04             // vmovups	(%r15,%r11,4), %ymm0
	LONG $0x0359fcc5                           // vmulps	(%rbx), %ymm0, %ymm0
	LONG $0x197de3c4; WORD $0x01c1             // vextractf128	$1, %ymm0, %xmm1
	LONG $0xc058f0c5                           // vaddps	%xmm0, %xmm1, %xmm0
	LONG $0xc8c6f9c5; BYTE $0x01               // vshufpd	$1, %xmm0, %xmm0, %xmm1         # xmm1 = xmm0[1,0]
	LONG $0xc158f8c5                           // vaddps	%xmm1, %xmm0, %xmm0
	LONG $0xc816fac5                           // vmovshdup	%xmm0, %xmm1            # xmm1 = xmm0[1,1,3,3]
	LONG $0xc158fac5                           // vaddss	%xmm1, %xmm0, %xmm0
	LONG $0x117aa1c4; WORD $0x9244; BYTE $0xfc // vmovss	%xmm0, -4(%rdx,%r10,4)
	LONG $0x107c81c4; WORD $0x9f04             // vmovups	(%r15,%r11,4), %ymm0
	LONG $0x597ca1c4; WORD $0xb304             // vmulps	(%rbx,%r14,4), %ymm0, %ymm0
	LONG $0x197de3c4; WORD $0x01c1             // vextractf128	$1, %ymm0, %xmm1
	LONG $0xc058f0c5                           // vaddps	%xmm0, %xmm1, %xmm0
	LONG $0xc8c6f9c5; BYTE $0x01               // vshufpd	$1, %xmm0, %xmm0, %xmm1         # xmm1 = xmm0[1,0]
	LONG $0xc158f8c5                           // vaddps	%xmm1, %xmm0, %xmm0
	LONG $0xc816fac5                           // vmovshdup	%xmm0, %xmm1            # xmm1 = xmm0[1,1,3,3]
	LONG $0xc158fac5                           // vaddss	%xmm1, %xmm0, %xmm0
	LONG $0x117aa1c4; WORD $0x9204             // vmovss	%xmm0, (%rdx,%r10,4)
	LONG $0x02c28349                           // addq	$2, %r10
	WORD $0x0148; BYTE $0xcb                   // addq	%rcx, %rbx
	WORD $0x394c; BYTE $0xd0                   // cmpq	%r10, %rax
	JNE  LBB8_74

LBB8_75:
	LONG $0x01c0f641               // testb	$1, %r8b
	JE   LBB8_77
	WORD $0x8949; BYTE $0xf9       // movq	%rdi, %r9
	LONG $0xc8af0f4d               // imulq	%r8, %r9
	WORD $0x894c; BYTE $0xd3       // movq	%r10, %rbx
	LONG $0xdeaf0f49               // imulq	%r14, %rbx
	LONG $0x107c81c4; WORD $0x9f04 // vmovups	(%r15,%r11,4), %ymm0
	LONG $0x245c8b4c; BYTE $0x18   // movq	24(%rsp), %r11                  # 8-byte Reload
	LONG $0x597cc1c4; WORD $0x9b04 // vmulps	(%r11,%rbx,4), %ymm0, %ymm0
	LONG $0x245c8b4c; BYTE $0x30   // movq	48(%rsp), %r11                  # 8-byte Reload
	LONG $0x8b0c8d4f               // leaq	(%r11,%r9,4), %r9
	LONG $0x197de3c4; WORD $0x01c1 // vextractf128	$1, %ymm0, %xmm1
	LONG $0xc058f0c5               // vaddps	%xmm0, %xmm1, %xmm0
	LONG $0xc8c6f9c5; BYTE $0x01   // vshufpd	$1, %xmm0, %xmm0, %xmm1         # xmm1 = xmm0[1,0]
	LONG $0xc158f8c5               // vaddps	%xmm1, %xmm0, %xmm0
	LONG $0xc816fac5               // vmovshdup	%xmm0, %xmm1            # xmm1 = xmm0[1,1,3,3]
	LONG $0xc158fac5               // vaddss	%xmm1, %xmm0, %xmm0
	LONG $0x117a81c4; WORD $0x9104 // vmovss	%xmm0, (%r9,%r10,4)
	JMP  LBB8_77

LBB8_51:
	LONG $0x0c518d49             // leaq	12(%r9), %rdx
	LONG $0x02e7c148             // shlq	$2, %rdi
	LONG $0x24748b48; BYTE $0x18 // movq	24(%rsp), %rsi                  # 8-byte Reload
	LONG $0x0cc68348             // addq	$12, %rsi
	LONG $0x24748948; BYTE $0x10 // movq	%rsi, 16(%rsp)                  # 8-byte Spill
	WORD $0x3145; BYTE $0xdb     // xorl	%r11d, %r11d
	JMP  LBB8_52

LBB8_59:
	WORD $0x8949; BYTE $0xf9     // movq	%rdi, %r9
	WORD $0xff49; BYTE $0xc3     // incq	%r11
	WORD $0x0148; BYTE $0xfa     // addq	%rdi, %rdx
	LONG $0x247c0148; BYTE $0x28 // addq	%rdi, 40(%rsp)                  # 8-byte Folded Spill
	LONG $0x245c3b4c; BYTE $0x08 // cmpq	8(%rsp), %r11                   # 8-byte Folded Reload
	JE   LBB8_111

LBB8_52:
	WORD $0x894c; BYTE $0xde     // movq	%r11, %rsi
	LONG $0xf0af0f49             // imulq	%r8, %rsi
	LONG $0x244c8b4c; BYTE $0x30 // movq	48(%rsp), %r9                   # 8-byte Reload
	LONG $0xb1348d49             // leaq	(%r9,%rsi,4), %rsi
	LONG $0x245c8b48; BYTE $0x18 // movq	24(%rsp), %rbx                  # 8-byte Reload
	LONG $0x24748b4c; BYTE $0x10 // movq	16(%rsp), %r14                  # 8-byte Reload
	WORD $0x3145; BYTE $0xff     // xorl	%r15d, %r15d
	JMP  LBB8_53

LBB8_58:
	LONG $0x117aa1c4; WORD $0xbe04 // vmovss	%xmm0, (%rsi,%r15,4)
	WORD $0xff49; BYTE $0xc7       // incq	%r15
	WORD $0x0149; BYTE $0xfe       // addq	%rdi, %r14
	WORD $0x0148; BYTE $0xfb       // addq	%rdi, %rbx
	WORD $0x394d; BYTE $0xc7       // cmpq	%r8, %r15
	JE   LBB8_59

LBB8_53:
	LONG $0xc057f8c5         // vxorps	%xmm0, %xmm0, %xmm0
	WORD $0x3145; BYTE $0xe4 // xorl	%r12d, %r12d
	LONG $0x03f98348         // cmpq	$3, %rcx
	JB   LBB8_55

LBB8_54:
	LONG $0x107aa1c4; WORD $0xa24c; BYTE $0xf4 // vmovss	-12(%rdx,%r12,4), %xmm1         # xmm1 = mem[0],zero,zero,zero
	LONG $0x107aa1c4; WORD $0xa254; BYTE $0xf8 // vmovss	-8(%rdx,%r12,4), %xmm2          # xmm2 = mem[0],zero,zero,zero
	LONG $0x597281c4; WORD $0xa64c; BYTE $0xf4 // vmulss	-12(%r14,%r12,4), %xmm1, %xmm1
	LONG $0x596a81c4; WORD $0xa654; BYTE $0xf8 // vmulss	-8(%r14,%r12,4), %xmm2, %xmm2
	LONG $0xc058f2c5                           // vaddss	%xmm0, %xmm1, %xmm0
	LONG $0x107aa1c4; WORD $0xa24c; BYTE $0xfc // vmovss	-4(%rdx,%r12,4), %xmm1          # xmm1 = mem[0],zero,zero,zero
	LONG $0x597281c4; WORD $0xa64c; BYTE $0xfc // vmulss	-4(%r14,%r12,4), %xmm1, %xmm1
	LONG $0xc058eac5                           // vaddss	%xmm0, %xmm2, %xmm0
	LONG $0x107aa1c4; WORD $0xa214             // vmovss	(%rdx,%r12,4), %xmm2            # xmm2 = mem[0],zero,zero,zero
	LONG $0x596a81c4; WORD $0xa614             // vmulss	(%r14,%r12,4), %xmm2, %xmm2
	LONG $0xc058f2c5                           // vaddss	%xmm0, %xmm1, %xmm0
	LONG $0xc058eac5                           // vaddss	%xmm0, %xmm2, %xmm0
	LONG $0x04c48349                           // addq	$4, %r12
	WORD $0x394d; BYTE $0xe2                   // cmpq	%r12, %r10
	JNE  LBB8_54

LBB8_55:
	WORD $0x8548; BYTE $0xc0     // testq	%rax, %rax
	JE   LBB8_58
	LONG $0xa30c8d4e             // leaq	(%rbx,%r12,4), %r9
	LONG $0x246c8b4c; BYTE $0x28 // movq	40(%rsp), %r13                  # 8-byte Reload
	QUAD $0x00000000a5248d4e     // leaq	(,%r12,4), %r12
	WORD $0x014d; BYTE $0xec     // addq	%r13, %r12
	WORD $0x3145; BYTE $0xed     // xorl	%r13d, %r13d

LBB8_57:
	LONG $0x107a81c4; WORD $0xac0c // vmovss	(%r12,%r13,4), %xmm1            # xmm1 = mem[0],zero,zero,zero
	LONG $0x597281c4; WORD $0xa90c // vmulss	(%r9,%r13,4), %xmm1, %xmm1
	LONG $0xc058f2c5               // vaddss	%xmm0, %xmm1, %xmm0
	WORD $0xff49; BYTE $0xc5       // incq	%r13
	WORD $0x394c; BYTE $0xe8       // cmpq	%r13, %rax
	JNE  LBB8_57
	JMP  LBB8_58

LBB8_112:
	LONG $0x44af0f4c; WORD $0x0824 // imulq	8(%rsp), %r8                    # 8-byte Folded Reload
	LONG $0x02e0c149               // shlq	$2, %r8
	LONG $0x247c8b48; BYTE $0x30   // movq	48(%rsp), %rdi                  # 8-byte Reload
	WORD $0xf631                   // xorl	%esi, %esi
	WORD $0x894c; BYTE $0xc2       // movq	%r8, %rdx
	LONG $0x000000e8; BYTE $0x00   // callq	memset@PLT

LBB8_111:
	LONG $0xd8658d48         // leaq	-40(%rbp), %rsp
	BYTE $0x5b               // popq	%rbx
	WORD $0x5c41             // popq	%r12
	WORD $0x5d41             // popq	%r13
	WORD $0x5e41             // popq	%r14
	WORD $0x5f41             // popq	%r15
	BYTE $0x5d               // popq	%rbp
	WORD $0xf8c5; BYTE $0x77 // vzeroupper
	BYTE $0xc3               // retq
