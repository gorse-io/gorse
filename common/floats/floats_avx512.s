//go:build !noasm && amd64
// Code generated by GoAT. DO NOT EDIT.
// versions:
// 	clang   18.1.3 (1ubuntu1)
// 	objdump 2.42
// flags: -mavx -mfma -mavx512f -O3
// source: src/floats_avx512.c

TEXT ·_mm512_mul_const_add_to(SB), $0-32
	MOVQ a+0(FP), DI
	MOVQ b+8(FP), SI
	MOVQ c+16(FP), DX
	MOVQ n+24(FP), CX
	BYTE $0x55                                 // pushq	%rbp
	WORD $0x8948; BYTE $0xe5                   // movq	%rsp, %rbp
	LONG $0xf8e48348                           // andq	$-8, %rsp
	LONG $0x0f418d48                           // leaq	15(%rcx), %rax
	WORD $0x8548; BYTE $0xc9                   // testq	%rcx, %rcx
	LONG $0xc1490f48                           // cmovnsq	%rcx, %rax
	LONG $0x04e8c148                           // shrq	$4, %rax
	WORD $0x8941; BYTE $0xc0                   // movl	%eax, %r8d
	LONG $0x04e0c141                           // shll	$4, %r8d
	WORD $0x2944; BYTE $0xc1                   // subl	%r8d, %ecx
	WORD $0xc085                               // testl	%eax, %eax
	JLE  LBB0_6
	WORD $0xf883; BYTE $0x01                   // cmpl	$1, %eax
	JE   LBB0_4
	WORD $0x8941; BYTE $0xc0                   // movl	%eax, %r8d
	LONG $0xfee08141; WORD $0xffff; BYTE $0x7f // andl	$2147483646, %r8d               # imm = 0x7FFFFFFE

LBB0_3:
	LONG $0x487cf162; WORD $0x0710             // vmovups	(%rdi), %zmm0
	LONG $0x487df262; WORD $0x0e18             // vbroadcastss	(%rsi), %zmm1
	LONG $0x487df262; WORD $0x0aa8             // vfmadd213ps	(%rdx), %zmm0, %zmm1    # zmm1 = (zmm0 * zmm1) + mem
	LONG $0x487cf162; WORD $0x0a11             // vmovups	%zmm1, (%rdx)
	LONG $0x487cf162; WORD $0x4710; BYTE $0x01 // vmovups	64(%rdi), %zmm0
	LONG $0x487df262; WORD $0x0e18             // vbroadcastss	(%rsi), %zmm1
	LONG $0x487df262; WORD $0x4aa8; BYTE $0x01 // vfmadd213ps	64(%rdx), %zmm0, %zmm1  # zmm1 = (zmm0 * zmm1) + mem
	LONG $0x487cf162; WORD $0x4a11; BYTE $0x01 // vmovups	%zmm1, 64(%rdx)
	LONG $0x80ef8348                           // subq	$-128, %rdi
	LONG $0x80ea8348                           // subq	$-128, %rdx
	LONG $0xfec08341                           // addl	$-2, %r8d
	JNE  LBB0_3

LBB0_4:
	WORD $0x01a8                   // testb	$1, %al
	JE   LBB0_6
	LONG $0x487cf162; WORD $0x0710 // vmovups	(%rdi), %zmm0
	LONG $0x487df262; WORD $0x0e18 // vbroadcastss	(%rsi), %zmm1
	LONG $0x487df262; WORD $0x0aa8 // vfmadd213ps	(%rdx), %zmm0, %zmm1    # zmm1 = (zmm0 * zmm1) + mem
	LONG $0x487cf162; WORD $0x0a11 // vmovups	%zmm1, (%rdx)
	LONG $0x40c78348               // addq	$64, %rdi
	LONG $0x40c28348               // addq	$64, %rdx

LBB0_6:
	WORD $0xf983; BYTE $0x07     // cmpl	$7, %ecx
	JLE  LBB0_8
	LONG $0x187de2c4; BYTE $0x06 // vbroadcastss	(%rsi), %ymm0
	LONG $0x0759fcc5             // vmulps	(%rdi), %ymm0, %ymm0
	LONG $0x0258fcc5             // vaddps	(%rdx), %ymm0, %ymm0
	LONG $0x0211fcc5             // vmovups	%ymm0, (%rdx)
	LONG $0x20c78348             // addq	$32, %rdi
	LONG $0x20c28348             // addq	$32, %rdx
	WORD $0xc183; BYTE $0xf8     // addl	$-8, %ecx

LBB0_8:
	WORD $0xc985             // testl	%ecx, %ecx
	JLE  LBB0_13
	WORD $0xc889             // movl	%ecx, %eax
	WORD $0xf983; BYTE $0x01 // cmpl	$1, %ecx
	JNE  LBB0_14
	WORD $0xc931             // xorl	%ecx, %ecx
	JMP  LBB0_11

LBB0_14:
	WORD $0x8941; BYTE $0xc0                   // movl	%eax, %r8d
	LONG $0xfee08141; WORD $0xffff; BYTE $0x7f // andl	$2147483646, %r8d               # imm = 0x7FFFFFFE
	WORD $0xc931                               // xorl	%ecx, %ecx

LBB0_15:
	LONG $0x0410fac5; BYTE $0x8f               // vmovss	(%rdi,%rcx,4), %xmm0            # xmm0 = mem[0],zero,zero,zero
	LONG $0x0e10fac5                           // vmovss	(%rsi), %xmm1                   # xmm1 = mem[0],zero,zero,zero
	LONG $0xa979e2c4; WORD $0x8a0c             // vfmadd213ss	(%rdx,%rcx,4), %xmm0, %xmm1 # xmm1 = (xmm0 * xmm1) + mem
	LONG $0x0c11fac5; BYTE $0x8a               // vmovss	%xmm1, (%rdx,%rcx,4)
	LONG $0x4410fac5; WORD $0x048f             // vmovss	4(%rdi,%rcx,4), %xmm0           # xmm0 = mem[0],zero,zero,zero
	LONG $0x0e10fac5                           // vmovss	(%rsi), %xmm1                   # xmm1 = mem[0],zero,zero,zero
	LONG $0xa979e2c4; WORD $0x8a4c; BYTE $0x04 // vfmadd213ss	4(%rdx,%rcx,4), %xmm0, %xmm1 # xmm1 = (xmm0 * xmm1) + mem
	LONG $0x4c11fac5; WORD $0x048a             // vmovss	%xmm1, 4(%rdx,%rcx,4)
	LONG $0x02c18348                           // addq	$2, %rcx
	WORD $0x3949; BYTE $0xc8                   // cmpq	%rcx, %r8
	JNE  LBB0_15

LBB0_11:
	WORD $0x01a8                   // testb	$1, %al
	JE   LBB0_13
	LONG $0x0410fac5; BYTE $0x8f   // vmovss	(%rdi,%rcx,4), %xmm0            # xmm0 = mem[0],zero,zero,zero
	LONG $0x0e10fac5               // vmovss	(%rsi), %xmm1                   # xmm1 = mem[0],zero,zero,zero
	LONG $0xa979e2c4; WORD $0x8a0c // vfmadd213ss	(%rdx,%rcx,4), %xmm0, %xmm1 # xmm1 = (xmm0 * xmm1) + mem
	LONG $0x0c11fac5; BYTE $0x8a   // vmovss	%xmm1, (%rdx,%rcx,4)

LBB0_13:
	WORD $0x8948; BYTE $0xec // movq	%rbp, %rsp
	BYTE $0x5d               // popq	%rbp
	WORD $0xf8c5; BYTE $0x77 // vzeroupper
	BYTE $0xc3               // retq

TEXT ·_mm512_mul_const_to(SB), $0-32
	MOVQ a+0(FP), DI
	MOVQ b+8(FP), SI
	MOVQ c+16(FP), DX
	MOVQ n+24(FP), CX
	BYTE $0x55                                 // pushq	%rbp
	WORD $0x8948; BYTE $0xe5                   // movq	%rsp, %rbp
	LONG $0xf8e48348                           // andq	$-8, %rsp
	LONG $0x0f418d4c                           // leaq	15(%rcx), %r8
	WORD $0x8548; BYTE $0xc9                   // testq	%rcx, %rcx
	LONG $0xc1490f4c                           // cmovnsq	%rcx, %r8
	LONG $0x04e8c149                           // shrq	$4, %r8
	WORD $0x8944; BYTE $0xc0                   // movl	%r8d, %eax
	WORD $0xe0c1; BYTE $0x04                   // shll	$4, %eax
	WORD $0xc129                               // subl	%eax, %ecx
	WORD $0x8545; BYTE $0xc0                   // testl	%r8d, %r8d
	JLE  LBB1_6
	WORD $0x8944; BYTE $0xc0                   // movl	%r8d, %eax
	WORD $0xe083; BYTE $0x03                   // andl	$3, %eax
	LONG $0x04f88341                           // cmpl	$4, %r8d
	JB   LBB1_4
	LONG $0xfce08141; WORD $0xffff; BYTE $0x7f // andl	$2147483644, %r8d               # imm = 0x7FFFFFFC

LBB1_3:
	LONG $0x487cf162; WORD $0x0710             // vmovups	(%rdi), %zmm0
	LONG $0x587cf162; WORD $0x0659             // vmulps	(%rsi){1to16}, %zmm0, %zmm0
	LONG $0x487cf162; WORD $0x0211             // vmovups	%zmm0, (%rdx)
	LONG $0x487cf162; WORD $0x4710; BYTE $0x01 // vmovups	64(%rdi), %zmm0
	LONG $0x587cf162; WORD $0x0659             // vmulps	(%rsi){1to16}, %zmm0, %zmm0
	LONG $0x487cf162; WORD $0x4211; BYTE $0x01 // vmovups	%zmm0, 64(%rdx)
	LONG $0x487cf162; WORD $0x4710; BYTE $0x02 // vmovups	128(%rdi), %zmm0
	LONG $0x587cf162; WORD $0x0659             // vmulps	(%rsi){1to16}, %zmm0, %zmm0
	LONG $0x487cf162; WORD $0x4211; BYTE $0x02 // vmovups	%zmm0, 128(%rdx)
	LONG $0x487cf162; WORD $0x4710; BYTE $0x03 // vmovups	192(%rdi), %zmm0
	LONG $0x587cf162; WORD $0x0659             // vmulps	(%rsi){1to16}, %zmm0, %zmm0
	LONG $0x487cf162; WORD $0x4211; BYTE $0x03 // vmovups	%zmm0, 192(%rdx)
	LONG $0x00c78148; WORD $0x0001; BYTE $0x00 // addq	$256, %rdi                      # imm = 0x100
	LONG $0x00c28148; WORD $0x0001; BYTE $0x00 // addq	$256, %rdx                      # imm = 0x100
	LONG $0xfcc08341                           // addl	$-4, %r8d
	JNE  LBB1_3

LBB1_4:
	WORD $0xc085 // testl	%eax, %eax
	JE   LBB1_6

LBB1_5:
	LONG $0x487cf162; WORD $0x0710 // vmovups	(%rdi), %zmm0
	LONG $0x587cf162; WORD $0x0659 // vmulps	(%rsi){1to16}, %zmm0, %zmm0
	LONG $0x487cf162; WORD $0x0211 // vmovups	%zmm0, (%rdx)
	LONG $0x40c78348               // addq	$64, %rdi
	LONG $0x40c28348               // addq	$64, %rdx
	WORD $0xc8ff                   // decl	%eax
	JNE  LBB1_5

LBB1_6:
	WORD $0xf983; BYTE $0x07     // cmpl	$7, %ecx
	JLE  LBB1_8
	LONG $0x187de2c4; BYTE $0x06 // vbroadcastss	(%rsi), %ymm0
	LONG $0x0759fcc5             // vmulps	(%rdi), %ymm0, %ymm0
	LONG $0x0211fcc5             // vmovups	%ymm0, (%rdx)
	LONG $0x20c78348             // addq	$32, %rdi
	LONG $0x20c28348             // addq	$32, %rdx
	WORD $0xc183; BYTE $0xf8     // addl	$-8, %ecx

LBB1_8:
	WORD $0xc985             // testl	%ecx, %ecx
	JLE  LBB1_14
	WORD $0x8941; BYTE $0xc8 // movl	%ecx, %r8d
	WORD $0x8944; BYTE $0xc0 // movl	%r8d, %eax
	WORD $0xe083; BYTE $0x03 // andl	$3, %eax
	WORD $0xf983; BYTE $0x04 // cmpl	$4, %ecx
	JAE  LBB1_15
	WORD $0xc931             // xorl	%ecx, %ecx
	JMP  LBB1_11

LBB1_15:
	LONG $0xfce08141; WORD $0xffff; BYTE $0x7f // andl	$2147483644, %r8d               # imm = 0x7FFFFFFC
	WORD $0xc931                               // xorl	%ecx, %ecx

LBB1_16:
	LONG $0x0410fac5; BYTE $0x8f   // vmovss	(%rdi,%rcx,4), %xmm0            # xmm0 = mem[0],zero,zero,zero
	LONG $0x0659fac5               // vmulss	(%rsi), %xmm0, %xmm0
	LONG $0x0411fac5; BYTE $0x8a   // vmovss	%xmm0, (%rdx,%rcx,4)
	LONG $0x4410fac5; WORD $0x048f // vmovss	4(%rdi,%rcx,4), %xmm0           # xmm0 = mem[0],zero,zero,zero
	LONG $0x0659fac5               // vmulss	(%rsi), %xmm0, %xmm0
	LONG $0x4411fac5; WORD $0x048a // vmovss	%xmm0, 4(%rdx,%rcx,4)
	LONG $0x4410fac5; WORD $0x088f // vmovss	8(%rdi,%rcx,4), %xmm0           # xmm0 = mem[0],zero,zero,zero
	LONG $0x0659fac5               // vmulss	(%rsi), %xmm0, %xmm0
	LONG $0x4411fac5; WORD $0x088a // vmovss	%xmm0, 8(%rdx,%rcx,4)
	LONG $0x4410fac5; WORD $0x0c8f // vmovss	12(%rdi,%rcx,4), %xmm0          # xmm0 = mem[0],zero,zero,zero
	LONG $0x0659fac5               // vmulss	(%rsi), %xmm0, %xmm0
	LONG $0x4411fac5; WORD $0x0c8a // vmovss	%xmm0, 12(%rdx,%rcx,4)
	LONG $0x04c18348               // addq	$4, %rcx
	WORD $0x3949; BYTE $0xc8       // cmpq	%rcx, %r8
	JNE  LBB1_16

LBB1_11:
	WORD $0x8548; BYTE $0xc0 // testq	%rax, %rax
	JE   LBB1_14
	LONG $0x8a148d48         // leaq	(%rdx,%rcx,4), %rdx
	LONG $0x8f0c8d48         // leaq	(%rdi,%rcx,4), %rcx
	WORD $0xff31             // xorl	%edi, %edi

LBB1_13:
	LONG $0x0410fac5; BYTE $0xb9 // vmovss	(%rcx,%rdi,4), %xmm0            # xmm0 = mem[0],zero,zero,zero
	LONG $0x0659fac5             // vmulss	(%rsi), %xmm0, %xmm0
	LONG $0x0411fac5; BYTE $0xba // vmovss	%xmm0, (%rdx,%rdi,4)
	WORD $0xff48; BYTE $0xc7     // incq	%rdi
	WORD $0x3948; BYTE $0xf8     // cmpq	%rdi, %rax
	JNE  LBB1_13

LBB1_14:
	WORD $0x8948; BYTE $0xec // movq	%rbp, %rsp
	BYTE $0x5d               // popq	%rbp
	WORD $0xf8c5; BYTE $0x77 // vzeroupper
	BYTE $0xc3               // retq

TEXT ·_mm512_mul_const(SB), $0-24
	MOVQ a+0(FP), DI
	MOVQ b+8(FP), SI
	MOVQ n+16(FP), DX
	BYTE $0x55                     // pushq	%rbp
	WORD $0x8948; BYTE $0xe5       // movq	%rsp, %rbp
	LONG $0xf8e48348               // andq	$-8, %rsp
	LONG $0x0f4a8d48               // leaq	15(%rdx), %rcx
	WORD $0x8548; BYTE $0xd2       // testq	%rdx, %rdx
	LONG $0xca490f48               // cmovnsq	%rdx, %rcx
	LONG $0x04e9c148               // shrq	$4, %rcx
	WORD $0xc889                   // movl	%ecx, %eax
	WORD $0xe0c1; BYTE $0x04       // shll	$4, %eax
	WORD $0xc229                   // subl	%eax, %edx
	WORD $0xc985                   // testl	%ecx, %ecx
	JLE  LBB2_6
	WORD $0xc889                   // movl	%ecx, %eax
	WORD $0xe083; BYTE $0x03       // andl	$3, %eax
	WORD $0xf983; BYTE $0x04       // cmpl	$4, %ecx
	JB   LBB2_4
	LONG $0xfffce181; WORD $0x7fff // andl	$2147483644, %ecx               # imm = 0x7FFFFFFC

LBB2_3:
	LONG $0x487cf162; WORD $0x0710             // vmovups	(%rdi), %zmm0
	LONG $0x487cf162; WORD $0x4f10; BYTE $0x01 // vmovups	64(%rdi), %zmm1
	LONG $0x487cf162; WORD $0x5710; BYTE $0x02 // vmovups	128(%rdi), %zmm2
	LONG $0x587cf162; WORD $0x0659             // vmulps	(%rsi){1to16}, %zmm0, %zmm0
	LONG $0x487cf162; WORD $0x5f10; BYTE $0x03 // vmovups	192(%rdi), %zmm3
	LONG $0x487cf162; WORD $0x0711             // vmovups	%zmm0, (%rdi)
	LONG $0x5874f162; WORD $0x0659             // vmulps	(%rsi){1to16}, %zmm1, %zmm0
	LONG $0x487cf162; WORD $0x4711; BYTE $0x01 // vmovups	%zmm0, 64(%rdi)
	LONG $0x586cf162; WORD $0x0659             // vmulps	(%rsi){1to16}, %zmm2, %zmm0
	LONG $0x487cf162; WORD $0x4711; BYTE $0x02 // vmovups	%zmm0, 128(%rdi)
	LONG $0x5864f162; WORD $0x0659             // vmulps	(%rsi){1to16}, %zmm3, %zmm0
	LONG $0x487cf162; WORD $0x4711; BYTE $0x03 // vmovups	%zmm0, 192(%rdi)
	LONG $0x00c78148; WORD $0x0001; BYTE $0x00 // addq	$256, %rdi                      # imm = 0x100
	WORD $0xc183; BYTE $0xfc                   // addl	$-4, %ecx
	JNE  LBB2_3

LBB2_4:
	WORD $0xc085 // testl	%eax, %eax
	JE   LBB2_6

LBB2_5:
	LONG $0x487cf162; WORD $0x0710 // vmovups	(%rdi), %zmm0
	LONG $0x587cf162; WORD $0x0659 // vmulps	(%rsi){1to16}, %zmm0, %zmm0
	LONG $0x487cf162; WORD $0x0711 // vmovups	%zmm0, (%rdi)
	LONG $0x40c78348               // addq	$64, %rdi
	WORD $0xc8ff                   // decl	%eax
	JNE  LBB2_5

LBB2_6:
	WORD $0xfa83; BYTE $0x07     // cmpl	$7, %edx
	JLE  LBB2_8
	LONG $0x187de2c4; BYTE $0x06 // vbroadcastss	(%rsi), %ymm0
	LONG $0x0759fcc5             // vmulps	(%rdi), %ymm0, %ymm0
	LONG $0x0711fcc5             // vmovups	%ymm0, (%rdi)
	LONG $0x20c78348             // addq	$32, %rdi
	WORD $0xc283; BYTE $0xf8     // addl	$-8, %edx

LBB2_8:
	WORD $0xd285             // testl	%edx, %edx
	JLE  LBB2_14
	WORD $0xd189             // movl	%edx, %ecx
	WORD $0xc889             // movl	%ecx, %eax
	WORD $0xe083; BYTE $0x03 // andl	$3, %eax
	WORD $0xfa83; BYTE $0x04 // cmpl	$4, %edx
	JAE  LBB2_15
	WORD $0xd231             // xorl	%edx, %edx
	JMP  LBB2_11

LBB2_15:
	LONG $0xfffce181; WORD $0x7fff // andl	$2147483644, %ecx               # imm = 0x7FFFFFFC
	WORD $0xd231                   // xorl	%edx, %edx

LBB2_16:
	LONG $0x0610fac5               // vmovss	(%rsi), %xmm0                   # xmm0 = mem[0],zero,zero,zero
	LONG $0x0459fac5; BYTE $0x97   // vmulss	(%rdi,%rdx,4), %xmm0, %xmm0
	LONG $0x0411fac5; BYTE $0x97   // vmovss	%xmm0, (%rdi,%rdx,4)
	LONG $0x0610fac5               // vmovss	(%rsi), %xmm0                   # xmm0 = mem[0],zero,zero,zero
	LONG $0x4459fac5; WORD $0x0497 // vmulss	4(%rdi,%rdx,4), %xmm0, %xmm0
	LONG $0x4411fac5; WORD $0x0497 // vmovss	%xmm0, 4(%rdi,%rdx,4)
	LONG $0x0610fac5               // vmovss	(%rsi), %xmm0                   # xmm0 = mem[0],zero,zero,zero
	LONG $0x4459fac5; WORD $0x0897 // vmulss	8(%rdi,%rdx,4), %xmm0, %xmm0
	LONG $0x4411fac5; WORD $0x0897 // vmovss	%xmm0, 8(%rdi,%rdx,4)
	LONG $0x0610fac5               // vmovss	(%rsi), %xmm0                   # xmm0 = mem[0],zero,zero,zero
	LONG $0x4459fac5; WORD $0x0c97 // vmulss	12(%rdi,%rdx,4), %xmm0, %xmm0
	LONG $0x4411fac5; WORD $0x0c97 // vmovss	%xmm0, 12(%rdi,%rdx,4)
	LONG $0x04c28348               // addq	$4, %rdx
	WORD $0x3948; BYTE $0xd1       // cmpq	%rdx, %rcx
	JNE  LBB2_16

LBB2_11:
	WORD $0x8548; BYTE $0xc0 // testq	%rax, %rax
	JE   LBB2_14
	LONG $0x970c8d48         // leaq	(%rdi,%rdx,4), %rcx
	WORD $0xd231             // xorl	%edx, %edx

LBB2_13:
	LONG $0x0610fac5             // vmovss	(%rsi), %xmm0                   # xmm0 = mem[0],zero,zero,zero
	LONG $0x0459fac5; BYTE $0x91 // vmulss	(%rcx,%rdx,4), %xmm0, %xmm0
	LONG $0x0411fac5; BYTE $0x91 // vmovss	%xmm0, (%rcx,%rdx,4)
	WORD $0xff48; BYTE $0xc2     // incq	%rdx
	WORD $0x3948; BYTE $0xd0     // cmpq	%rdx, %rax
	JNE  LBB2_13

LBB2_14:
	WORD $0x8948; BYTE $0xec // movq	%rbp, %rsp
	BYTE $0x5d               // popq	%rbp
	WORD $0xf8c5; BYTE $0x77 // vzeroupper
	BYTE $0xc3               // retq

TEXT ·_mm512_mul_to(SB), $0-32
	MOVQ a+0(FP), DI
	MOVQ b+8(FP), SI
	MOVQ c+16(FP), DX
	MOVQ n+24(FP), CX
	BYTE $0x55                                 // pushq	%rbp
	WORD $0x8948; BYTE $0xe5                   // movq	%rsp, %rbp
	LONG $0xf8e48348                           // andq	$-8, %rsp
	LONG $0x0f418d4c                           // leaq	15(%rcx), %r8
	WORD $0x8548; BYTE $0xc9                   // testq	%rcx, %rcx
	LONG $0xc1490f4c                           // cmovnsq	%rcx, %r8
	LONG $0x04e8c149                           // shrq	$4, %r8
	WORD $0x8944; BYTE $0xc0                   // movl	%r8d, %eax
	WORD $0xe0c1; BYTE $0x04                   // shll	$4, %eax
	WORD $0xc129                               // subl	%eax, %ecx
	WORD $0x8545; BYTE $0xc0                   // testl	%r8d, %r8d
	JLE  LBB3_6
	WORD $0x8944; BYTE $0xc0                   // movl	%r8d, %eax
	WORD $0xe083; BYTE $0x03                   // andl	$3, %eax
	LONG $0x04f88341                           // cmpl	$4, %r8d
	JB   LBB3_4
	LONG $0xfce08141; WORD $0xffff; BYTE $0x7f // andl	$2147483644, %r8d               # imm = 0x7FFFFFFC

LBB3_3:
	LONG $0x487cf162; WORD $0x0710             // vmovups	(%rdi), %zmm0
	LONG $0x487cf162; WORD $0x0659             // vmulps	(%rsi), %zmm0, %zmm0
	LONG $0x487cf162; WORD $0x0211             // vmovups	%zmm0, (%rdx)
	LONG $0x487cf162; WORD $0x4710; BYTE $0x01 // vmovups	64(%rdi), %zmm0
	LONG $0x487cf162; WORD $0x4659; BYTE $0x01 // vmulps	64(%rsi), %zmm0, %zmm0
	LONG $0x487cf162; WORD $0x4211; BYTE $0x01 // vmovups	%zmm0, 64(%rdx)
	LONG $0x487cf162; WORD $0x4710; BYTE $0x02 // vmovups	128(%rdi), %zmm0
	LONG $0x487cf162; WORD $0x4659; BYTE $0x02 // vmulps	128(%rsi), %zmm0, %zmm0
	LONG $0x487cf162; WORD $0x4211; BYTE $0x02 // vmovups	%zmm0, 128(%rdx)
	LONG $0x487cf162; WORD $0x4710; BYTE $0x03 // vmovups	192(%rdi), %zmm0
	LONG $0x487cf162; WORD $0x4659; BYTE $0x03 // vmulps	192(%rsi), %zmm0, %zmm0
	LONG $0x487cf162; WORD $0x4211; BYTE $0x03 // vmovups	%zmm0, 192(%rdx)
	LONG $0x00c78148; WORD $0x0001; BYTE $0x00 // addq	$256, %rdi                      # imm = 0x100
	LONG $0x00c68148; WORD $0x0001; BYTE $0x00 // addq	$256, %rsi                      # imm = 0x100
	LONG $0x00c28148; WORD $0x0001; BYTE $0x00 // addq	$256, %rdx                      # imm = 0x100
	LONG $0xfcc08341                           // addl	$-4, %r8d
	JNE  LBB3_3

LBB3_4:
	WORD $0xc085 // testl	%eax, %eax
	JE   LBB3_6

LBB3_5:
	LONG $0x487cf162; WORD $0x0710 // vmovups	(%rdi), %zmm0
	LONG $0x487cf162; WORD $0x0659 // vmulps	(%rsi), %zmm0, %zmm0
	LONG $0x487cf162; WORD $0x0211 // vmovups	%zmm0, (%rdx)
	LONG $0x40c78348               // addq	$64, %rdi
	LONG $0x40c68348               // addq	$64, %rsi
	LONG $0x40c28348               // addq	$64, %rdx
	WORD $0xc8ff                   // decl	%eax
	JNE  LBB3_5

LBB3_6:
	WORD $0xf983; BYTE $0x07 // cmpl	$7, %ecx
	JLE  LBB3_8
	LONG $0x0710fcc5         // vmovups	(%rdi), %ymm0
	LONG $0x0659fcc5         // vmulps	(%rsi), %ymm0, %ymm0
	LONG $0x0211fcc5         // vmovups	%ymm0, (%rdx)
	LONG $0x20c78348         // addq	$32, %rdi
	LONG $0x20c68348         // addq	$32, %rsi
	LONG $0x20c28348         // addq	$32, %rdx
	WORD $0xc183; BYTE $0xf8 // addl	$-8, %ecx

LBB3_8:
	WORD $0xc985             // testl	%ecx, %ecx
	JLE  LBB3_14
	WORD $0x8941; BYTE $0xc8 // movl	%ecx, %r8d
	WORD $0x8944; BYTE $0xc0 // movl	%r8d, %eax
	WORD $0xe083; BYTE $0x03 // andl	$3, %eax
	WORD $0xf983; BYTE $0x04 // cmpl	$4, %ecx
	JAE  LBB3_15
	WORD $0xc931             // xorl	%ecx, %ecx
	JMP  LBB3_11

LBB3_15:
	LONG $0xfce08141; WORD $0xffff; BYTE $0x7f // andl	$2147483644, %r8d               # imm = 0x7FFFFFFC
	WORD $0xc931                               // xorl	%ecx, %ecx

LBB3_16:
	LONG $0x0410fac5; BYTE $0x8f   // vmovss	(%rdi,%rcx,4), %xmm0            # xmm0 = mem[0],zero,zero,zero
	LONG $0x0459fac5; BYTE $0x8e   // vmulss	(%rsi,%rcx,4), %xmm0, %xmm0
	LONG $0x0411fac5; BYTE $0x8a   // vmovss	%xmm0, (%rdx,%rcx,4)
	LONG $0x4410fac5; WORD $0x048f // vmovss	4(%rdi,%rcx,4), %xmm0           # xmm0 = mem[0],zero,zero,zero
	LONG $0x4459fac5; WORD $0x048e // vmulss	4(%rsi,%rcx,4), %xmm0, %xmm0
	LONG $0x4411fac5; WORD $0x048a // vmovss	%xmm0, 4(%rdx,%rcx,4)
	LONG $0x4410fac5; WORD $0x088f // vmovss	8(%rdi,%rcx,4), %xmm0           # xmm0 = mem[0],zero,zero,zero
	LONG $0x4459fac5; WORD $0x088e // vmulss	8(%rsi,%rcx,4), %xmm0, %xmm0
	LONG $0x4411fac5; WORD $0x088a // vmovss	%xmm0, 8(%rdx,%rcx,4)
	LONG $0x4410fac5; WORD $0x0c8f // vmovss	12(%rdi,%rcx,4), %xmm0          # xmm0 = mem[0],zero,zero,zero
	LONG $0x4459fac5; WORD $0x0c8e // vmulss	12(%rsi,%rcx,4), %xmm0, %xmm0
	LONG $0x4411fac5; WORD $0x0c8a // vmovss	%xmm0, 12(%rdx,%rcx,4)
	LONG $0x04c18348               // addq	$4, %rcx
	WORD $0x3949; BYTE $0xc8       // cmpq	%rcx, %r8
	JNE  LBB3_16

LBB3_11:
	WORD $0x8548; BYTE $0xc0 // testq	%rax, %rax
	JE   LBB3_14
	LONG $0x8a148d48         // leaq	(%rdx,%rcx,4), %rdx
	LONG $0x8e348d48         // leaq	(%rsi,%rcx,4), %rsi
	LONG $0x8f0c8d48         // leaq	(%rdi,%rcx,4), %rcx
	WORD $0xff31             // xorl	%edi, %edi

LBB3_13:
	LONG $0x0410fac5; BYTE $0xb9 // vmovss	(%rcx,%rdi,4), %xmm0            # xmm0 = mem[0],zero,zero,zero
	LONG $0x0459fac5; BYTE $0xbe // vmulss	(%rsi,%rdi,4), %xmm0, %xmm0
	LONG $0x0411fac5; BYTE $0xba // vmovss	%xmm0, (%rdx,%rdi,4)
	WORD $0xff48; BYTE $0xc7     // incq	%rdi
	WORD $0x3948; BYTE $0xf8     // cmpq	%rdi, %rax
	JNE  LBB3_13

LBB3_14:
	WORD $0x8948; BYTE $0xec // movq	%rbp, %rsp
	BYTE $0x5d               // popq	%rbp
	WORD $0xf8c5; BYTE $0x77 // vzeroupper
	BYTE $0xc3               // retq

TEXT ·_mm512_div_to(SB), $0-32
	MOVQ a+0(FP), DI
	MOVQ b+8(FP), SI
	MOVQ c+16(FP), DX
	MOVQ n+24(FP), CX
	BYTE $0x55                                 // pushq	%rbp
	WORD $0x8948; BYTE $0xe5                   // movq	%rsp, %rbp
	LONG $0xf8e48348                           // andq	$-8, %rsp
	LONG $0x0f418d4c                           // leaq	15(%rcx), %r8
	WORD $0x8548; BYTE $0xc9                   // testq	%rcx, %rcx
	LONG $0xc1490f4c                           // cmovnsq	%rcx, %r8
	LONG $0x04e8c149                           // shrq	$4, %r8
	WORD $0x8944; BYTE $0xc0                   // movl	%r8d, %eax
	WORD $0xe0c1; BYTE $0x04                   // shll	$4, %eax
	WORD $0xc129                               // subl	%eax, %ecx
	WORD $0x8545; BYTE $0xc0                   // testl	%r8d, %r8d
	JLE  LBB4_6
	WORD $0x8944; BYTE $0xc0                   // movl	%r8d, %eax
	WORD $0xe083; BYTE $0x03                   // andl	$3, %eax
	LONG $0x04f88341                           // cmpl	$4, %r8d
	JB   LBB4_4
	LONG $0xfce08141; WORD $0xffff; BYTE $0x7f // andl	$2147483644, %r8d               # imm = 0x7FFFFFFC

LBB4_3:
	LONG $0x487cf162; WORD $0x0710             // vmovups	(%rdi), %zmm0
	LONG $0x487cf162; WORD $0x065e             // vdivps	(%rsi), %zmm0, %zmm0
	LONG $0x487cf162; WORD $0x0211             // vmovups	%zmm0, (%rdx)
	LONG $0x487cf162; WORD $0x4710; BYTE $0x01 // vmovups	64(%rdi), %zmm0
	LONG $0x487cf162; WORD $0x465e; BYTE $0x01 // vdivps	64(%rsi), %zmm0, %zmm0
	LONG $0x487cf162; WORD $0x4211; BYTE $0x01 // vmovups	%zmm0, 64(%rdx)
	LONG $0x487cf162; WORD $0x4710; BYTE $0x02 // vmovups	128(%rdi), %zmm0
	LONG $0x487cf162; WORD $0x465e; BYTE $0x02 // vdivps	128(%rsi), %zmm0, %zmm0
	LONG $0x487cf162; WORD $0x4211; BYTE $0x02 // vmovups	%zmm0, 128(%rdx)
	LONG $0x487cf162; WORD $0x4710; BYTE $0x03 // vmovups	192(%rdi), %zmm0
	LONG $0x487cf162; WORD $0x465e; BYTE $0x03 // vdivps	192(%rsi), %zmm0, %zmm0
	LONG $0x487cf162; WORD $0x4211; BYTE $0x03 // vmovups	%zmm0, 192(%rdx)
	LONG $0x00c78148; WORD $0x0001; BYTE $0x00 // addq	$256, %rdi                      # imm = 0x100
	LONG $0x00c68148; WORD $0x0001; BYTE $0x00 // addq	$256, %rsi                      # imm = 0x100
	LONG $0x00c28148; WORD $0x0001; BYTE $0x00 // addq	$256, %rdx                      # imm = 0x100
	LONG $0xfcc08341                           // addl	$-4, %r8d
	JNE  LBB4_3

LBB4_4:
	WORD $0xc085 // testl	%eax, %eax
	JE   LBB4_6

LBB4_5:
	LONG $0x487cf162; WORD $0x0710 // vmovups	(%rdi), %zmm0
	LONG $0x487cf162; WORD $0x065e // vdivps	(%rsi), %zmm0, %zmm0
	LONG $0x487cf162; WORD $0x0211 // vmovups	%zmm0, (%rdx)
	LONG $0x40c78348               // addq	$64, %rdi
	LONG $0x40c68348               // addq	$64, %rsi
	LONG $0x40c28348               // addq	$64, %rdx
	WORD $0xc8ff                   // decl	%eax
	JNE  LBB4_5

LBB4_6:
	WORD $0xf983; BYTE $0x07 // cmpl	$7, %ecx
	JLE  LBB4_8
	LONG $0x0710fcc5         // vmovups	(%rdi), %ymm0
	LONG $0x065efcc5         // vdivps	(%rsi), %ymm0, %ymm0
	LONG $0x0211fcc5         // vmovups	%ymm0, (%rdx)
	LONG $0x20c78348         // addq	$32, %rdi
	LONG $0x20c68348         // addq	$32, %rsi
	LONG $0x20c28348         // addq	$32, %rdx
	WORD $0xc183; BYTE $0xf8 // addl	$-8, %ecx

LBB4_8:
	WORD $0xc985             // testl	%ecx, %ecx
	JLE  LBB4_14
	WORD $0x8941; BYTE $0xc8 // movl	%ecx, %r8d
	WORD $0x8944; BYTE $0xc0 // movl	%r8d, %eax
	WORD $0xe083; BYTE $0x03 // andl	$3, %eax
	WORD $0xf983; BYTE $0x04 // cmpl	$4, %ecx
	JAE  LBB4_15
	WORD $0xc931             // xorl	%ecx, %ecx
	JMP  LBB4_11

LBB4_15:
	LONG $0xfce08141; WORD $0xffff; BYTE $0x7f // andl	$2147483644, %r8d               # imm = 0x7FFFFFFC
	WORD $0xc931                               // xorl	%ecx, %ecx

LBB4_16:
	LONG $0x0410fac5; BYTE $0x8f   // vmovss	(%rdi,%rcx,4), %xmm0            # xmm0 = mem[0],zero,zero,zero
	LONG $0x045efac5; BYTE $0x8e   // vdivss	(%rsi,%rcx,4), %xmm0, %xmm0
	LONG $0x0411fac5; BYTE $0x8a   // vmovss	%xmm0, (%rdx,%rcx,4)
	LONG $0x4410fac5; WORD $0x048f // vmovss	4(%rdi,%rcx,4), %xmm0           # xmm0 = mem[0],zero,zero,zero
	LONG $0x445efac5; WORD $0x048e // vdivss	4(%rsi,%rcx,4), %xmm0, %xmm0
	LONG $0x4411fac5; WORD $0x048a // vmovss	%xmm0, 4(%rdx,%rcx,4)
	LONG $0x4410fac5; WORD $0x088f // vmovss	8(%rdi,%rcx,4), %xmm0           # xmm0 = mem[0],zero,zero,zero
	LONG $0x445efac5; WORD $0x088e // vdivss	8(%rsi,%rcx,4), %xmm0, %xmm0
	LONG $0x4411fac5; WORD $0x088a // vmovss	%xmm0, 8(%rdx,%rcx,4)
	LONG $0x4410fac5; WORD $0x0c8f // vmovss	12(%rdi,%rcx,4), %xmm0          # xmm0 = mem[0],zero,zero,zero
	LONG $0x445efac5; WORD $0x0c8e // vdivss	12(%rsi,%rcx,4), %xmm0, %xmm0
	LONG $0x4411fac5; WORD $0x0c8a // vmovss	%xmm0, 12(%rdx,%rcx,4)
	LONG $0x04c18348               // addq	$4, %rcx
	WORD $0x3949; BYTE $0xc8       // cmpq	%rcx, %r8
	JNE  LBB4_16

LBB4_11:
	WORD $0x8548; BYTE $0xc0 // testq	%rax, %rax
	JE   LBB4_14
	LONG $0x8a148d48         // leaq	(%rdx,%rcx,4), %rdx
	LONG $0x8e348d48         // leaq	(%rsi,%rcx,4), %rsi
	LONG $0x8f0c8d48         // leaq	(%rdi,%rcx,4), %rcx
	WORD $0xff31             // xorl	%edi, %edi

LBB4_13:
	LONG $0x0410fac5; BYTE $0xb9 // vmovss	(%rcx,%rdi,4), %xmm0            # xmm0 = mem[0],zero,zero,zero
	LONG $0x045efac5; BYTE $0xbe // vdivss	(%rsi,%rdi,4), %xmm0, %xmm0
	LONG $0x0411fac5; BYTE $0xba // vmovss	%xmm0, (%rdx,%rdi,4)
	WORD $0xff48; BYTE $0xc7     // incq	%rdi
	WORD $0x3948; BYTE $0xf8     // cmpq	%rdi, %rax
	JNE  LBB4_13

LBB4_14:
	WORD $0x8948; BYTE $0xec // movq	%rbp, %rsp
	BYTE $0x5d               // popq	%rbp
	WORD $0xf8c5; BYTE $0x77 // vzeroupper
	BYTE $0xc3               // retq

TEXT ·_mm512_sqrt_to(SB), $0-24
	MOVQ a+0(FP), DI
	MOVQ b+8(FP), SI
	MOVQ n+16(FP), DX
	BYTE $0x55                     // pushq	%rbp
	WORD $0x8948; BYTE $0xe5       // movq	%rsp, %rbp
	LONG $0xf8e48348               // andq	$-8, %rsp
	LONG $0x0f4a8d48               // leaq	15(%rdx), %rcx
	WORD $0x8548; BYTE $0xd2       // testq	%rdx, %rdx
	LONG $0xca490f48               // cmovnsq	%rdx, %rcx
	LONG $0x04e9c148               // shrq	$4, %rcx
	WORD $0xc889                   // movl	%ecx, %eax
	WORD $0xe0c1; BYTE $0x04       // shll	$4, %eax
	WORD $0xc229                   // subl	%eax, %edx
	WORD $0xc985                   // testl	%ecx, %ecx
	JLE  LBB5_6
	WORD $0xc889                   // movl	%ecx, %eax
	WORD $0xe083; BYTE $0x03       // andl	$3, %eax
	WORD $0xf983; BYTE $0x04       // cmpl	$4, %ecx
	JB   LBB5_4
	LONG $0xfffce181; WORD $0x7fff // andl	$2147483644, %ecx               # imm = 0x7FFFFFFC

LBB5_3:
	LONG $0x487cf162; WORD $0x0751             // vsqrtps	(%rdi), %zmm0
	LONG $0x487cf162; WORD $0x0611             // vmovups	%zmm0, (%rsi)
	LONG $0x487cf162; WORD $0x4751; BYTE $0x01 // vsqrtps	64(%rdi), %zmm0
	LONG $0x487cf162; WORD $0x4611; BYTE $0x01 // vmovups	%zmm0, 64(%rsi)
	LONG $0x487cf162; WORD $0x4751; BYTE $0x02 // vsqrtps	128(%rdi), %zmm0
	LONG $0x487cf162; WORD $0x4611; BYTE $0x02 // vmovups	%zmm0, 128(%rsi)
	LONG $0x487cf162; WORD $0x4751; BYTE $0x03 // vsqrtps	192(%rdi), %zmm0
	LONG $0x487cf162; WORD $0x4611; BYTE $0x03 // vmovups	%zmm0, 192(%rsi)
	LONG $0x00c78148; WORD $0x0001; BYTE $0x00 // addq	$256, %rdi                      # imm = 0x100
	LONG $0x00c68148; WORD $0x0001; BYTE $0x00 // addq	$256, %rsi                      # imm = 0x100
	WORD $0xc183; BYTE $0xfc                   // addl	$-4, %ecx
	JNE  LBB5_3

LBB5_4:
	WORD $0xc085 // testl	%eax, %eax
	JE   LBB5_6

LBB5_5:
	LONG $0x487cf162; WORD $0x0751 // vsqrtps	(%rdi), %zmm0
	LONG $0x487cf162; WORD $0x0611 // vmovups	%zmm0, (%rsi)
	LONG $0x40c78348               // addq	$64, %rdi
	LONG $0x40c68348               // addq	$64, %rsi
	WORD $0xc8ff                   // decl	%eax
	JNE  LBB5_5

LBB5_6:
	WORD $0xfa83; BYTE $0x07 // cmpl	$7, %edx
	JLE  LBB5_8
	LONG $0x0751fcc5         // vsqrtps	(%rdi), %ymm0
	LONG $0x0611fcc5         // vmovups	%ymm0, (%rsi)
	LONG $0x20c78348         // addq	$32, %rdi
	LONG $0x20c68348         // addq	$32, %rsi
	WORD $0xc283; BYTE $0xf8 // addl	$-8, %edx

LBB5_8:
	WORD $0xd285             // testl	%edx, %edx
	JLE  LBB5_14
	WORD $0xd189             // movl	%edx, %ecx
	WORD $0xc889             // movl	%ecx, %eax
	WORD $0xe083; BYTE $0x03 // andl	$3, %eax
	WORD $0xfa83; BYTE $0x04 // cmpl	$4, %edx
	JAE  LBB5_15
	WORD $0xd231             // xorl	%edx, %edx
	JMP  LBB5_11

LBB5_15:
	LONG $0xfffce181; WORD $0x7fff // andl	$2147483644, %ecx               # imm = 0x7FFFFFFC
	WORD $0xd231                   // xorl	%edx, %edx

LBB5_16:
	LONG $0x0410fac5; BYTE $0x97   // vmovss	(%rdi,%rdx,4), %xmm0            # xmm0 = mem[0],zero,zero,zero
	LONG $0xc051fac5               // vsqrtss	%xmm0, %xmm0, %xmm0
	LONG $0x0411fac5; BYTE $0x96   // vmovss	%xmm0, (%rsi,%rdx,4)
	LONG $0x4410fac5; WORD $0x0497 // vmovss	4(%rdi,%rdx,4), %xmm0           # xmm0 = mem[0],zero,zero,zero
	LONG $0xc051fac5               // vsqrtss	%xmm0, %xmm0, %xmm0
	LONG $0x4411fac5; WORD $0x0496 // vmovss	%xmm0, 4(%rsi,%rdx,4)
	LONG $0x4410fac5; WORD $0x0897 // vmovss	8(%rdi,%rdx,4), %xmm0           # xmm0 = mem[0],zero,zero,zero
	LONG $0xc051fac5               // vsqrtss	%xmm0, %xmm0, %xmm0
	LONG $0x4411fac5; WORD $0x0896 // vmovss	%xmm0, 8(%rsi,%rdx,4)
	LONG $0x4410fac5; WORD $0x0c97 // vmovss	12(%rdi,%rdx,4), %xmm0          # xmm0 = mem[0],zero,zero,zero
	LONG $0xc051fac5               // vsqrtss	%xmm0, %xmm0, %xmm0
	LONG $0x4411fac5; WORD $0x0c96 // vmovss	%xmm0, 12(%rsi,%rdx,4)
	LONG $0x04c28348               // addq	$4, %rdx
	WORD $0x3948; BYTE $0xd1       // cmpq	%rdx, %rcx
	JNE  LBB5_16

LBB5_11:
	WORD $0x8548; BYTE $0xc0 // testq	%rax, %rax
	JE   LBB5_14
	LONG $0x960c8d48         // leaq	(%rsi,%rdx,4), %rcx
	LONG $0x97148d48         // leaq	(%rdi,%rdx,4), %rdx
	WORD $0xf631             // xorl	%esi, %esi

LBB5_13:
	LONG $0x0410fac5; BYTE $0xb2 // vmovss	(%rdx,%rsi,4), %xmm0            # xmm0 = mem[0],zero,zero,zero
	LONG $0xc051fac5             // vsqrtss	%xmm0, %xmm0, %xmm0
	LONG $0x0411fac5; BYTE $0xb1 // vmovss	%xmm0, (%rcx,%rsi,4)
	WORD $0xff48; BYTE $0xc6     // incq	%rsi
	WORD $0x3948; BYTE $0xf0     // cmpq	%rsi, %rax
	JNE  LBB5_13

LBB5_14:
	WORD $0x8948; BYTE $0xec // movq	%rbp, %rsp
	BYTE $0x5d               // popq	%rbp
	WORD $0xf8c5; BYTE $0x77 // vzeroupper
	BYTE $0xc3               // retq

TEXT ·_mm512_dot(SB), $8-32
	MOVQ a+0(FP), DI
	MOVQ b+8(FP), SI
	MOVQ n+16(FP), DX
	BYTE $0x55                             // pushq	%rbp
	WORD $0x8948; BYTE $0xe5               // movq	%rsp, %rbp
	LONG $0xf8e48348                       // andq	$-8, %rsp
	LONG $0x0f4a8d48                       // leaq	15(%rdx), %rcx
	WORD $0x8548; BYTE $0xd2               // testq	%rdx, %rdx
	LONG $0xca490f48                       // cmovnsq	%rdx, %rcx
	LONG $0x04f9c148                       // sarq	$4, %rcx
	WORD $0xc889                           // movl	%ecx, %eax
	WORD $0xe0c1; BYTE $0x04               // shll	$4, %eax
	WORD $0xc229                           // subl	%eax, %edx
	WORD $0xc985                           // testl	%ecx, %ecx
	JLE  LBB6_1
	LONG $0x487cf162; WORD $0x0710         // vmovups	(%rdi), %zmm0
	LONG $0x487cf162; WORD $0x0659         // vmulps	(%rsi), %zmm0, %zmm0
	LONG $0x40c78348                       // addq	$64, %rdi
	LONG $0x40c68348                       // addq	$64, %rsi
	WORD $0xf983; BYTE $0x01               // cmpl	$1, %ecx
	JE   LBB6_9
	WORD $0x8949; BYTE $0xc8               // movq	%rcx, %r8
	LONG $0x06e0c149                       // shlq	$6, %r8
	QUAD $0x003fffffff80b848; WORD $0x0000 // movabsq	$274877906816, %rax             # imm = 0x3FFFFFFF80
	WORD $0x0149; BYTE $0xc0               // addq	%rax, %r8
	LONG $0x40c88348                       // orq	$64, %rax
	WORD $0x214c; BYTE $0xc0               // andq	%r8, %rax
	LONG $0xff518d44                       // leal	-1(%rcx), %r10d
	LONG $0xfe418d44                       // leal	-2(%rcx), %r8d
	LONG $0x03f88341                       // cmpl	$3, %r8d
	JAE  LBB6_14
	WORD $0x8949; BYTE $0xf8               // movq	%rdi, %r8
	WORD $0x8949; BYTE $0xf1               // movq	%rsi, %r9
	JMP  LBB6_5

LBB6_1:
	LONG $0xc057f8c5 // vxorps	%xmm0, %xmm0, %xmm0
	JMP  LBB6_9

LBB6_14:
	WORD $0x8945; BYTE $0xd3 // movl	%r10d, %r11d
	LONG $0xfce38341         // andl	$-4, %r11d
	WORD $0x8949; BYTE $0xf8 // movq	%rdi, %r8
	WORD $0x8949; BYTE $0xf1 // movq	%rsi, %r9

LBB6_15:
	LONG $0x487cd162; WORD $0x0810             // vmovups	(%r8), %zmm1
	LONG $0x487cd162; WORD $0x5010; BYTE $0x01 // vmovups	64(%r8), %zmm2
	LONG $0x487cd162; WORD $0x5810; BYTE $0x02 // vmovups	128(%r8), %zmm3
	LONG $0x487dd262; WORD $0x0998             // vfmadd132ps	(%r9), %zmm0, %zmm1     # zmm1 = (zmm1 * mem) + zmm0
	LONG $0x486dd262; WORD $0x49b8; BYTE $0x01 // vfmadd231ps	64(%r9), %zmm2, %zmm1   # zmm1 = (zmm2 * mem) + zmm1
	LONG $0x4865d262; WORD $0x49b8; BYTE $0x02 // vfmadd231ps	128(%r9), %zmm3, %zmm1  # zmm1 = (zmm3 * mem) + zmm1
	LONG $0x487cd162; WORD $0x5010; BYTE $0x03 // vmovups	192(%r8), %zmm2
	LONG $0x487cf162; WORD $0xc128             // vmovaps	%zmm1, %zmm0
	LONG $0x486dd262; WORD $0x41b8; BYTE $0x03 // vfmadd231ps	192(%r9), %zmm2, %zmm0  # zmm0 = (zmm2 * mem) + zmm0
	LONG $0x00c08149; WORD $0x0001; BYTE $0x00 // addq	$256, %r8                       # imm = 0x100
	LONG $0x00c18149; WORD $0x0001; BYTE $0x00 // addq	$256, %r9                       # imm = 0x100
	LONG $0xfcc38341                           // addl	$-4, %r11d
	JNE  LBB6_15

LBB6_5:
	LONG $0x40588d4c         // leaq	64(%rax), %r11
	LONG $0x03c2f641         // testb	$3, %r10b
	JE   LBB6_8
	WORD $0xc9fe             // decb	%cl
	WORD $0xb60f; BYTE $0xc9 // movzbl	%cl, %ecx
	WORD $0xe183; BYTE $0x03 // andl	$3, %ecx
	WORD $0xe1c1; BYTE $0x06 // shll	$6, %ecx
	WORD $0x3145; BYTE $0xd2 // xorl	%r10d, %r10d

LBB6_7:
	LONG $0x487c9162; WORD $0x0c10; BYTE $0x10 // vmovups	(%r8,%r10), %zmm1
	LONG $0x48759262; WORD $0x04b8; BYTE $0x11 // vfmadd231ps	(%r9,%r10), %zmm1, %zmm0 # zmm0 = (zmm1 * mem) + zmm0
	LONG $0x40c28349                           // addq	$64, %r10
	WORD $0x3944; BYTE $0xd1                   // cmpl	%r10d, %ecx
	JNE  LBB6_7

LBB6_8:
	WORD $0x0148; BYTE $0xc7 // addq	%rax, %rdi
	LONG $0x40c78348         // addq	$64, %rdi
	WORD $0x014c; BYTE $0xde // addq	%r11, %rsi

LBB6_9:
	LONG $0x48fdf362; WORD $0xc11b; BYTE $0x01 // vextractf64x4	$1, %zmm0, %ymm1
	LONG $0xc158fcc5                           // vaddps	%ymm1, %ymm0, %ymm0
	LONG $0x197de3c4; WORD $0x01c1             // vextractf128	$1, %ymm0, %xmm1
	LONG $0xc158f8c5                           // vaddps	%xmm1, %xmm0, %xmm0
	LONG $0xc8c6f9c5; BYTE $0x01               // vshufpd	$1, %xmm0, %xmm0, %xmm1         # xmm1 = xmm0[1,0]
	LONG $0xc158f8c5                           // vaddps	%xmm1, %xmm0, %xmm0
	LONG $0xc816fac5                           // vmovshdup	%xmm0, %xmm1            # xmm1 = xmm0[1,1,3,3]
	LONG $0xc158f8c5                           // vaddps	%xmm1, %xmm0, %xmm0
	WORD $0xfa83; BYTE $0x07                   // cmpl	$7, %edx
	JLE  LBB6_11
	LONG $0x0f10fcc5                           // vmovups	(%rdi), %ymm1
	LONG $0x0e59f4c5                           // vmulps	(%rsi), %ymm1, %ymm1
	LONG $0x20c78348                           // addq	$32, %rdi
	LONG $0x20c68348                           // addq	$32, %rsi
	LONG $0x197de3c4; WORD $0x01ca             // vextractf128	$1, %ymm1, %xmm2
	LONG $0xc958e8c5                           // vaddps	%xmm1, %xmm2, %xmm1
	LONG $0xd1c6f1c5; BYTE $0x01               // vshufpd	$1, %xmm1, %xmm1, %xmm2         # xmm2 = xmm1[1,0]
	LONG $0xca58f0c5                           // vaddps	%xmm2, %xmm1, %xmm1
	LONG $0xd116fac5                           // vmovshdup	%xmm1, %xmm2            # xmm2 = xmm1[1,1,3,3]
	LONG $0xca58f2c5                           // vaddss	%xmm2, %xmm1, %xmm1
	LONG $0xc158fac5                           // vaddss	%xmm1, %xmm0, %xmm0
	WORD $0xc283; BYTE $0xf8                   // addl	$-8, %edx

LBB6_11:
	WORD $0xd285             // testl	%edx, %edx
	JLE  LBB6_21
	WORD $0x8941; BYTE $0xd0 // movl	%edx, %r8d
	WORD $0x8944; BYTE $0xc0 // movl	%r8d, %eax
	WORD $0xe083; BYTE $0x03 // andl	$3, %eax
	WORD $0xfa83; BYTE $0x04 // cmpl	$4, %edx
	JAE  LBB6_16
	WORD $0xc931             // xorl	%ecx, %ecx
	JMP  LBB6_18

LBB6_16:
	LONG $0xfce08141; WORD $0xffff; BYTE $0x7f // andl	$2147483644, %r8d               # imm = 0x7FFFFFFC
	WORD $0xc931                               // xorl	%ecx, %ecx

LBB6_17:
	LONG $0x0c10fac5; BYTE $0x8f               // vmovss	(%rdi,%rcx,4), %xmm1            # xmm1 = mem[0],zero,zero,zero
	LONG $0x5410fac5; WORD $0x048f             // vmovss	4(%rdi,%rcx,4), %xmm2           # xmm2 = mem[0],zero,zero,zero
	LONG $0x9979e2c4; WORD $0x8e0c             // vfmadd132ss	(%rsi,%rcx,4), %xmm0, %xmm1 # xmm1 = (xmm1 * mem) + xmm0
	LONG $0xb969e2c4; WORD $0x8e4c; BYTE $0x04 // vfmadd231ss	4(%rsi,%rcx,4), %xmm2, %xmm1 # xmm1 = (xmm2 * mem) + xmm1
	LONG $0x5410fac5; WORD $0x088f             // vmovss	8(%rdi,%rcx,4), %xmm2           # xmm2 = mem[0],zero,zero,zero
	LONG $0x9971e2c4; WORD $0x8e54; BYTE $0x08 // vfmadd132ss	8(%rsi,%rcx,4), %xmm1, %xmm2 # xmm2 = (xmm2 * mem) + xmm1
	LONG $0x4410fac5; WORD $0x0c8f             // vmovss	12(%rdi,%rcx,4), %xmm0          # xmm0 = mem[0],zero,zero,zero
	LONG $0x9969e2c4; WORD $0x8e44; BYTE $0x0c // vfmadd132ss	12(%rsi,%rcx,4), %xmm2, %xmm0 # xmm0 = (xmm0 * mem) + xmm2
	LONG $0x04c18348                           // addq	$4, %rcx
	WORD $0x3949; BYTE $0xc8                   // cmpq	%rcx, %r8
	JNE  LBB6_17

LBB6_18:
	WORD $0x8548; BYTE $0xc0 // testq	%rax, %rax
	JE   LBB6_21
	LONG $0x8e148d48         // leaq	(%rsi,%rcx,4), %rdx
	LONG $0x8f0c8d48         // leaq	(%rdi,%rcx,4), %rcx
	WORD $0xf631             // xorl	%esi, %esi

LBB6_20:
	LONG $0x0c10fac5; BYTE $0xb1   // vmovss	(%rcx,%rsi,4), %xmm1            # xmm1 = mem[0],zero,zero,zero
	LONG $0xb971e2c4; WORD $0xb204 // vfmadd231ss	(%rdx,%rsi,4), %xmm1, %xmm0 # xmm0 = (xmm1 * mem) + xmm0
	WORD $0xff48; BYTE $0xc6       // incq	%rsi
	WORD $0x3948; BYTE $0xf0       // cmpq	%rsi, %rax
	JNE  LBB6_20

LBB6_21:
	WORD  $0x8948; BYTE $0xec // movq	%rbp, %rsp
	BYTE  $0x5d               // popq	%rbp
	WORD  $0xf8c5; BYTE $0x77 // vzeroupper
	MOVSS X0, result+24(FP)
	RET

TEXT ·_mm512_euclidean(SB), $8-32
	MOVQ a+0(FP), DI
	MOVQ b+8(FP), SI
	MOVQ n+16(FP), DX
	BYTE $0x55                             // pushq	%rbp
	WORD $0x8948; BYTE $0xe5               // movq	%rsp, %rbp
	LONG $0xf8e48348                       // andq	$-8, %rsp
	LONG $0x0f4a8d48                       // leaq	15(%rdx), %rcx
	WORD $0x8548; BYTE $0xd2               // testq	%rdx, %rdx
	LONG $0xca490f48                       // cmovnsq	%rdx, %rcx
	LONG $0x04f9c148                       // sarq	$4, %rcx
	WORD $0xc889                           // movl	%ecx, %eax
	WORD $0xe0c1; BYTE $0x04               // shll	$4, %eax
	WORD $0xc229                           // subl	%eax, %edx
	WORD $0xc985                           // testl	%ecx, %ecx
	JLE  LBB7_1
	LONG $0x487cf162; WORD $0x0710         // vmovups	(%rdi), %zmm0
	LONG $0x487cf162; WORD $0x065c         // vsubps	(%rsi), %zmm0, %zmm0
	LONG $0x487cf162; WORD $0xc059         // vmulps	%zmm0, %zmm0, %zmm0
	LONG $0x40c78348                       // addq	$64, %rdi
	LONG $0x40c68348                       // addq	$64, %rsi
	WORD $0xf983; BYTE $0x01               // cmpl	$1, %ecx
	JE   LBB7_9
	WORD $0x8949; BYTE $0xc8               // movq	%rcx, %r8
	LONG $0x06e0c149                       // shlq	$6, %r8
	QUAD $0x003fffffff80b848; WORD $0x0000 // movabsq	$274877906816, %rax             # imm = 0x3FFFFFFF80
	WORD $0x0149; BYTE $0xc0               // addq	%rax, %r8
	LONG $0x40c88348                       // orq	$64, %rax
	WORD $0x214c; BYTE $0xc0               // andq	%r8, %rax
	LONG $0xff518d44                       // leal	-1(%rcx), %r10d
	LONG $0xfe418d44                       // leal	-2(%rcx), %r8d
	LONG $0x03f88341                       // cmpl	$3, %r8d
	JAE  LBB7_18
	WORD $0x8949; BYTE $0xf8               // movq	%rdi, %r8
	WORD $0x8949; BYTE $0xf1               // movq	%rsi, %r9
	JMP  LBB7_5

LBB7_1:
	LONG $0xc057f8c5 // vxorps	%xmm0, %xmm0, %xmm0
	JMP  LBB7_9

LBB7_18:
	WORD $0x8945; BYTE $0xd3 // movl	%r10d, %r11d
	LONG $0xfce38341         // andl	$-4, %r11d
	WORD $0x8949; BYTE $0xf8 // movq	%rdi, %r8
	WORD $0x8949; BYTE $0xf1 // movq	%rsi, %r9

LBB7_19:
	LONG $0x487cd162; WORD $0x0810             // vmovups	(%r8), %zmm1
	LONG $0x487cd162; WORD $0x5010; BYTE $0x01 // vmovups	64(%r8), %zmm2
	LONG $0x487cd162; WORD $0x5810; BYTE $0x02 // vmovups	128(%r8), %zmm3
	LONG $0x487cd162; WORD $0x6010; BYTE $0x03 // vmovups	192(%r8), %zmm4
	LONG $0x4874d162; WORD $0x095c             // vsubps	(%r9), %zmm1, %zmm1
	LONG $0x4874f162; WORD $0xc959             // vmulps	%zmm1, %zmm1, %zmm1
	LONG $0x487cf162; WORD $0xc158             // vaddps	%zmm1, %zmm0, %zmm0
	LONG $0x486cd162; WORD $0x495c; BYTE $0x01 // vsubps	64(%r9), %zmm2, %zmm1
	LONG $0x4874f162; WORD $0xc959             // vmulps	%zmm1, %zmm1, %zmm1
	LONG $0x487cf162; WORD $0xc158             // vaddps	%zmm1, %zmm0, %zmm0
	LONG $0x4864d162; WORD $0x495c; BYTE $0x02 // vsubps	128(%r9), %zmm3, %zmm1
	LONG $0x4874f162; WORD $0xc959             // vmulps	%zmm1, %zmm1, %zmm1
	LONG $0x487cf162; WORD $0xc158             // vaddps	%zmm1, %zmm0, %zmm0
	LONG $0x485cd162; WORD $0x495c; BYTE $0x03 // vsubps	192(%r9), %zmm4, %zmm1
	LONG $0x4874f162; WORD $0xc959             // vmulps	%zmm1, %zmm1, %zmm1
	LONG $0x487cf162; WORD $0xc158             // vaddps	%zmm1, %zmm0, %zmm0
	LONG $0x00c08149; WORD $0x0001; BYTE $0x00 // addq	$256, %r8                       # imm = 0x100
	LONG $0x00c18149; WORD $0x0001; BYTE $0x00 // addq	$256, %r9                       # imm = 0x100
	LONG $0xfcc38341                           // addl	$-4, %r11d
	JNE  LBB7_19

LBB7_5:
	LONG $0x40588d4c         // leaq	64(%rax), %r11
	LONG $0x03c2f641         // testb	$3, %r10b
	JE   LBB7_8
	WORD $0xc9fe             // decb	%cl
	WORD $0xb60f; BYTE $0xc9 // movzbl	%cl, %ecx
	WORD $0xe183; BYTE $0x03 // andl	$3, %ecx
	WORD $0xe1c1; BYTE $0x06 // shll	$6, %ecx
	WORD $0x3145; BYTE $0xd2 // xorl	%r10d, %r10d

LBB7_7:
	LONG $0x487c9162; WORD $0x0c10; BYTE $0x10 // vmovups	(%r8,%r10), %zmm1
	LONG $0x48749162; WORD $0x0c5c; BYTE $0x11 // vsubps	(%r9,%r10), %zmm1, %zmm1
	LONG $0x4874f162; WORD $0xc959             // vmulps	%zmm1, %zmm1, %zmm1
	LONG $0x487cf162; WORD $0xc158             // vaddps	%zmm1, %zmm0, %zmm0
	LONG $0x40c28349                           // addq	$64, %r10
	WORD $0x3944; BYTE $0xd1                   // cmpl	%r10d, %ecx
	JNE  LBB7_7

LBB7_8:
	WORD $0x0148; BYTE $0xc7 // addq	%rax, %rdi
	LONG $0x40c78348         // addq	$64, %rdi
	WORD $0x014c; BYTE $0xde // addq	%r11, %rsi

LBB7_9:
	LONG $0x48fdf362; WORD $0xc11b; BYTE $0x01 // vextractf64x4	$1, %zmm0, %ymm1
	LONG $0xc158fcc5                           // vaddps	%ymm1, %ymm0, %ymm0
	LONG $0x197de3c4; WORD $0x01c1             // vextractf128	$1, %ymm0, %xmm1
	LONG $0xc158f8c5                           // vaddps	%xmm1, %xmm0, %xmm0
	LONG $0xc8c6f9c5; BYTE $0x03               // vshufpd	$3, %xmm0, %xmm0, %xmm1         # xmm1 = xmm0[1,1]
	LONG $0xc158f8c5                           // vaddps	%xmm1, %xmm0, %xmm0
	LONG $0xc816fac5                           // vmovshdup	%xmm0, %xmm1            # xmm1 = xmm0[1,1,3,3]
	LONG $0xc158f8c5                           // vaddps	%xmm1, %xmm0, %xmm0
	WORD $0xfa83; BYTE $0x07                   // cmpl	$7, %edx
	JLE  LBB7_11
	LONG $0x0f10fcc5                           // vmovups	(%rdi), %ymm1
	LONG $0x0e5cf4c5                           // vsubps	(%rsi), %ymm1, %ymm1
	LONG $0xc959f4c5                           // vmulps	%ymm1, %ymm1, %ymm1
	LONG $0x20c78348                           // addq	$32, %rdi
	LONG $0x20c68348                           // addq	$32, %rsi
	LONG $0x197de3c4; WORD $0x01ca             // vextractf128	$1, %ymm1, %xmm2
	LONG $0xc958e8c5                           // vaddps	%xmm1, %xmm2, %xmm1
	LONG $0xd1c6f1c5; BYTE $0x01               // vshufpd	$1, %xmm1, %xmm1, %xmm2         # xmm2 = xmm1[1,0]
	LONG $0xca58f0c5                           // vaddps	%xmm2, %xmm1, %xmm1
	LONG $0xd116fac5                           // vmovshdup	%xmm1, %xmm2            # xmm2 = xmm1[1,1,3,3]
	LONG $0xca58f2c5                           // vaddss	%xmm2, %xmm1, %xmm1
	LONG $0xc158fac5                           // vaddss	%xmm1, %xmm0, %xmm0
	WORD $0xc283; BYTE $0xf8                   // addl	$-8, %edx

LBB7_11:
	WORD $0xd285             // testl	%edx, %edx
	JLE  LBB7_17
	WORD $0x8941; BYTE $0xd0 // movl	%edx, %r8d
	WORD $0x8944; BYTE $0xc0 // movl	%r8d, %eax
	WORD $0xe083; BYTE $0x03 // andl	$3, %eax
	WORD $0xfa83; BYTE $0x04 // cmpl	$4, %edx
	JAE  LBB7_20
	WORD $0xc931             // xorl	%ecx, %ecx
	JMP  LBB7_14

LBB7_20:
	LONG $0xfce08141; WORD $0xffff; BYTE $0x7f // andl	$2147483644, %r8d               # imm = 0x7FFFFFFC
	WORD $0xc931                               // xorl	%ecx, %ecx

LBB7_21:
	LONG $0x0c10fac5; BYTE $0x8f   // vmovss	(%rdi,%rcx,4), %xmm1            # xmm1 = mem[0],zero,zero,zero
	LONG $0x5410fac5; WORD $0x048f // vmovss	4(%rdi,%rcx,4), %xmm2           # xmm2 = mem[0],zero,zero,zero
	LONG $0x0c5cf2c5; BYTE $0x8e   // vsubss	(%rsi,%rcx,4), %xmm1, %xmm1
	LONG $0x545ceac5; WORD $0x048e // vsubss	4(%rsi,%rcx,4), %xmm2, %xmm2
	LONG $0xa971e2c4; BYTE $0xc8   // vfmadd213ss	%xmm0, %xmm1, %xmm1     # xmm1 = (xmm1 * xmm1) + xmm0
	LONG $0x4410fac5; WORD $0x088f // vmovss	8(%rdi,%rcx,4), %xmm0           # xmm0 = mem[0],zero,zero,zero
	LONG $0x5c5cfac5; WORD $0x088e // vsubss	8(%rsi,%rcx,4), %xmm0, %xmm3
	LONG $0xa969e2c4; BYTE $0xd1   // vfmadd213ss	%xmm1, %xmm2, %xmm2     # xmm2 = (xmm2 * xmm2) + xmm1
	LONG $0x4410fac5; WORD $0x0c8f // vmovss	12(%rdi,%rcx,4), %xmm0          # xmm0 = mem[0],zero,zero,zero
	LONG $0x445cfac5; WORD $0x0c8e // vsubss	12(%rsi,%rcx,4), %xmm0, %xmm0
	LONG $0xa961e2c4; BYTE $0xda   // vfmadd213ss	%xmm2, %xmm3, %xmm3     # xmm3 = (xmm3 * xmm3) + xmm2
	LONG $0xa979e2c4; BYTE $0xc3   // vfmadd213ss	%xmm3, %xmm0, %xmm0     # xmm0 = (xmm0 * xmm0) + xmm3
	LONG $0x04c18348               // addq	$4, %rcx
	WORD $0x3949; BYTE $0xc8       // cmpq	%rcx, %r8
	JNE  LBB7_21

LBB7_14:
	WORD $0x8548; BYTE $0xc0 // testq	%rax, %rax
	JE   LBB7_17
	LONG $0x8e148d48         // leaq	(%rsi,%rcx,4), %rdx
	LONG $0x8f0c8d48         // leaq	(%rdi,%rcx,4), %rcx
	WORD $0xf631             // xorl	%esi, %esi

LBB7_16:
	LONG $0x0c10fac5; BYTE $0xb1 // vmovss	(%rcx,%rsi,4), %xmm1            # xmm1 = mem[0],zero,zero,zero
	LONG $0x0c5cf2c5; BYTE $0xb2 // vsubss	(%rdx,%rsi,4), %xmm1, %xmm1
	LONG $0xb971e2c4; BYTE $0xc1 // vfmadd231ss	%xmm1, %xmm1, %xmm0     # xmm0 = (xmm1 * xmm1) + xmm0
	WORD $0xff48; BYTE $0xc6     // incq	%rsi
	WORD $0x3948; BYTE $0xf0     // cmpq	%rsi, %rax
	JNE  LBB7_16

LBB7_17:
	LONG  $0xc051fac5         // vsqrtss	%xmm0, %xmm0, %xmm0
	WORD  $0x8948; BYTE $0xec // movq	%rbp, %rsp
	BYTE  $0x5d               // popq	%rbp
	WORD  $0xf8c5; BYTE $0x77 // vzeroupper
	MOVSS X0, result+24(FP)
	RET

TEXT ·_mm512_mm(SB), $0-64
	MOVQ a+0(FP), DI
	MOVQ b+8(FP), SI
	MOVQ c+16(FP), DX
	MOVQ m+24(FP), CX
	MOVQ n+32(FP), R8
	MOVQ k+40(FP), R9
	MOVQ transA+48(FP), R10
	MOVQ transB+56(FP), R11
	BYTE $0x55                                 // pushq	%rbp
	WORD $0x8948; BYTE $0xe5                   // movq	%rsp, %rbp
	WORD $0x5741                               // pushq	%r15
	WORD $0x5641                               // pushq	%r14
	WORD $0x5541                               // pushq	%r13
	WORD $0x5441                               // pushq	%r12
	BYTE $0x53                                 // pushq	%rbx
	LONG $0xf8e48348                           // andq	$-8, %rsp
	LONG $0x98ec8148; WORD $0x0000; BYTE $0x00 // subq	$152, %rsp
	LONG $0x244c894c; BYTE $0x10               // movq	%r9, 16(%rsp)                   # 8-byte Spill
	LONG $0x244c8948; BYTE $0x18               // movq	%rcx, 24(%rsp)                  # 8-byte Spill
	LONG $0x24548948; BYTE $0x50               // movq	%rdx, 80(%rsp)                  # 8-byte Spill
	LONG $0x24748948; BYTE $0x20               // movq	%rsi, 32(%rsp)                  # 8-byte Spill
	LONG $0x247c8948; BYTE $0x38               // movq	%rdi, 56(%rsp)                  # 8-byte Spill
	LONG $0x184db60f                           // movzbl	24(%rbp), %ecx
	LONG $0x1045b60f                           // movzbl	16(%rbp), %eax
	WORD $0xc084                               // testb	%al, %al
	LONG $0x2444894c; BYTE $0x08               // movq	%r8, 8(%rsp)                    # 8-byte Spill
	JNE  LBB8_24
	WORD $0xc984                               // testb	%cl, %cl
	JNE  LBB8_24
	LONG $0x247c8348; WORD $0x0018             // cmpq	$0, 24(%rsp)                    # 8-byte Folded Reload
	JLE  LBB8_145
	LONG $0x247c8348; WORD $0x0010             // cmpq	$0, 16(%rsp)                    # 8-byte Folded Reload
	JLE  LBB8_145
	LONG $0x247c8348; WORD $0x0008             // cmpq	$0, 8(%rsp)                     # 8-byte Folded Reload
	JLE  LBB8_145
	LONG $0x24748b48; BYTE $0x08               // movq	8(%rsp), %rsi                   # 8-byte Reload
	QUAD $0x00000000b5048d48                   // leaq	(,%rsi,4), %rax
	LONG $0x24548b48; BYTE $0x10               // movq	16(%rsp), %rdx                  # 8-byte Reload
	QUAD $0x00000000950c8d48                   // leaq	(,%rdx,4), %rcx
	LONG $0x244c8948; BYTE $0x58               // movq	%rcx, 88(%rsp)                  # 8-byte Spill
	WORD $0x8948; BYTE $0xd1                   // movq	%rdx, %rcx
	LONG $0xceaf0f48                           // imulq	%rsi, %rcx
	LONG $0x24448b4c; BYTE $0x20               // movq	32(%rsp), %r8                   # 8-byte Reload
	LONG $0x880c8d49                           // leaq	(%r8,%rcx,4), %rcx
	LONG $0x244c8948; BYTE $0x68               // movq	%rcx, 104(%rsp)                 # 8-byte Spill
	LONG $0x247c8b48; BYTE $0x50               // movq	80(%rsp), %rdi                  # 8-byte Reload
	LONG $0xb70c8d48                           // leaq	(%rdi,%rsi,4), %rcx
	LONG $0x244c8948; BYTE $0x60               // movq	%rcx, 96(%rsp)                  # 8-byte Spill
	LONG $0x244c8b48; BYTE $0x38               // movq	56(%rsp), %rcx                  # 8-byte Reload
	LONG $0x910c8d48                           // leaq	(%rcx,%rdx,4), %rcx
	LONG $0x244c8948; BYTE $0x70               // movq	%rcx, 112(%rsp)                 # 8-byte Spill
	WORD $0x8948; BYTE $0xf3                   // movq	%rsi, %rbx
	LONG $0xc0e38348                           // andq	$-64, %rbx
	WORD $0x8949; BYTE $0xf1                   // movq	%rsi, %r9
	LONG $0xf8e18349                           // andq	$-8, %r9
	LONG $0xff4e8d48                           // leaq	-1(%rsi), %rcx
	LONG $0x244c8948; BYTE $0x48               // movq	%rcx, 72(%rsp)                  # 8-byte Spill
	LONG $0xc0888d49; WORD $0x0000; BYTE $0x00 // leaq	192(%r8), %rcx
	LONG $0x244c8948; BYTE $0x78               // movq	%rcx, 120(%rsp)                 # 8-byte Spill
	LONG $0xc0af8d4c; WORD $0x0000; BYTE $0x00 // leaq	192(%rdi), %r13
	WORD $0x3145; BYTE $0xf6                   // xorl	%r14d, %r14d
	JMP  LBB8_6

LBB8_23:
	LONG $0x24748b4c; BYTE $0x30 // movq	48(%rsp), %r14                  # 8-byte Reload
	WORD $0xff49; BYTE $0xc6     // incq	%r14
	WORD $0x0149; BYTE $0xc5     // addq	%rax, %r13
	WORD $0x0148; BYTE $0xc7     // addq	%rax, %rdi
	LONG $0x24743b4c; BYTE $0x18 // cmpq	24(%rsp), %r14                  # 8-byte Folded Reload
	JE   LBB8_145

LBB8_6:
	WORD $0x8548; BYTE $0xc0       // testq	%rax, %rax
	LONG $0x2444980f; BYTE $0x40   // sets	64(%rsp)                        # 1-byte Folded Spill
	WORD $0x8948; BYTE $0xc6       // movq	%rax, %rsi
	LONG $0xf6af0f49               // imulq	%r14, %rsi
	LONG $0x247c8b4c; BYTE $0x50   // movq	80(%rsp), %r15                  # 8-byte Reload
	LONG $0x37048d4d               // leaq	(%r15,%rsi), %r8
	LONG $0x24740348; BYTE $0x60   // addq	96(%rsp), %rsi                  # 8-byte Folded Reload
	LONG $0x244c8b48; BYTE $0x58   // movq	88(%rsp), %rcx                  # 8-byte Reload
	LONG $0xceaf0f49               // imulq	%r14, %rcx
	LONG $0x24548b48; BYTE $0x38   // movq	56(%rsp), %rdx                  # 8-byte Reload
	LONG $0x0a148d4c               // leaq	(%rdx,%rcx), %r10
	LONG $0x244c0348; BYTE $0x70   // addq	112(%rsp), %rcx                 # 8-byte Folded Reload
	WORD $0x894d; BYTE $0xf3       // movq	%r14, %r11
	LONG $0x5caf0f4c; WORD $0x1024 // imulq	16(%rsp), %r11                  # 8-byte Folded Reload
	LONG $0x2474894c; BYTE $0x30   // movq	%r14, 48(%rsp)                  # 8-byte Spill
	LONG $0x74af0f4c; WORD $0x0824 // imulq	8(%rsp), %r14                   # 8-byte Folded Reload
	WORD $0x3949; BYTE $0xc8       // cmpq	%rcx, %r8
	LONG $0xc4920f41               // setb	%r12b
	WORD $0x3949; BYTE $0xf2       // cmpq	%rsi, %r10
	LONG $0x9a0c8d4a               // leaq	(%rdx,%r11,4), %rcx
	LONG $0xb7148d4f               // leaq	(%r15,%r14,4), %r10
	LONG $0xc3920f41               // setb	%r11b
	WORD $0x2045; BYTE $0xe3       // andb	%r12b, %r11b
	LONG $0x24443b4c; BYTE $0x68   // cmpq	104(%rsp), %r8                  # 8-byte Folded Reload
	LONG $0xc0920f41               // setb	%r8b
	LONG $0x24748b4c; BYTE $0x20   // movq	32(%rsp), %r14                  # 8-byte Reload
	WORD $0x394c; BYTE $0xf6       // cmpq	%r14, %rsi
	LONG $0xc6970f40               // seta	%sil
	WORD $0x2044; BYTE $0xc6       // andb	%r8b, %sil
	LONG $0x245c0a44; BYTE $0x40   // orb	64(%rsp), %r11b                 # 1-byte Folded Reload
	WORD $0x0841; BYTE $0xf3       // orb	%sil, %r11b
	WORD $0x894c; BYTE $0xf2       // movq	%r14, %rdx
	LONG $0x24648b4c; BYTE $0x78   // movq	120(%rsp), %r12                 # 8-byte Reload
	WORD $0xf631                   // xorl	%esi, %esi
	JMP  LBB8_7

LBB8_22:
	WORD $0xff48; BYTE $0xc6     // incq	%rsi
	WORD $0x0149; BYTE $0xc4     // addq	%rax, %r12
	WORD $0x0148; BYTE $0xc2     // addq	%rax, %rdx
	LONG $0x24743b48; BYTE $0x10 // cmpq	16(%rsp), %rsi                  # 8-byte Folded Reload
	JE   LBB8_23

LBB8_7:
	LONG $0x247c8b4c; BYTE $0x08 // movq	8(%rsp), %r15                   # 8-byte Reload
	LONG $0x08ff8349             // cmpq	$8, %r15
	LONG $0xc0920f41             // setb	%r8b
	WORD $0x0845; BYTE $0xd8     // orb	%r11b, %r8b
	JE   LBB8_9
	WORD $0x3145; BYTE $0xc0     // xorl	%r8d, %r8d
	JMP  LBB8_18

LBB8_9:
	LONG $0x40ff8349         // cmpq	$64, %r15
	JAE  LBB8_11
	WORD $0x3145; BYTE $0xf6 // xorl	%r14d, %r14d
	JMP  LBB8_15

LBB8_11:
	LONG $0x487df262; WORD $0x0418; BYTE $0xb1 // vbroadcastss	(%rcx,%rsi,4), %zmm0
	WORD $0x3145; BYTE $0xc0                   // xorl	%r8d, %r8d

LBB8_12:
	QUAD $0xfd844c10487c9162                   // vmovups	-192(%r12,%r8,4), %zmm1
	QUAD $0xfe845410487c9162                   // vmovups	-128(%r12,%r8,4), %zmm2
	QUAD $0xff845c10487c9162                   // vmovups	-64(%r12,%r8,4), %zmm3
	LONG $0x487c9162; WORD $0x2410; BYTE $0x84 // vmovups	(%r12,%r8,4), %zmm4
	QUAD $0xfd854ca8487d9262                   // vfmadd213ps	-192(%r13,%r8,4), %zmm0, %zmm1 # zmm1 = (zmm0 * zmm1) + mem
	QUAD $0xfe8554a8487d9262                   // vfmadd213ps	-128(%r13,%r8,4), %zmm0, %zmm2 # zmm2 = (zmm0 * zmm2) + mem
	QUAD $0xff855ca8487d9262                   // vfmadd213ps	-64(%r13,%r8,4), %zmm0, %zmm3 # zmm3 = (zmm0 * zmm3) + mem
	QUAD $0x008564a8487d9262                   // vfmadd213ps	(%r13,%r8,4), %zmm0, %zmm4 # zmm4 = (zmm0 * zmm4) + mem
	QUAD $0xfd854c11487c9162                   // vmovups	%zmm1, -192(%r13,%r8,4)
	QUAD $0xfe855411487c9162                   // vmovups	%zmm2, -128(%r13,%r8,4)
	QUAD $0xff855c11487c9162                   // vmovups	%zmm3, -64(%r13,%r8,4)
	QUAD $0x00856411487c9162                   // vmovups	%zmm4, (%r13,%r8,4)
	LONG $0x40c08349                           // addq	$64, %r8
	WORD $0x394c; BYTE $0xc3                   // cmpq	%r8, %rbx
	JNE  LBB8_12
	WORD $0x394c; BYTE $0xfb                   // cmpq	%r15, %rbx
	JE   LBB8_22
	WORD $0x8949; BYTE $0xde                   // movq	%rbx, %r14
	WORD $0x8949; BYTE $0xd8                   // movq	%rbx, %r8
	LONG $0x38c7f641                           // testb	$56, %r15b
	JE   LBB8_18

LBB8_15:
	LONG $0x187de2c4; WORD $0xb104 // vbroadcastss	(%rcx,%rsi,4), %ymm0

LBB8_16:
	LONG $0x107ca1c4; WORD $0xb20c // vmovups	(%rdx,%r14,4), %ymm1
	LONG $0xa87da2c4; WORD $0xb70c // vfmadd213ps	(%rdi,%r14,4), %ymm0, %ymm1 # ymm1 = (ymm0 * ymm1) + mem
	LONG $0x117ca1c4; WORD $0xb70c // vmovups	%ymm1, (%rdi,%r14,4)
	LONG $0x08c68349               // addq	$8, %r14
	WORD $0x394d; BYTE $0xf1       // cmpq	%r14, %r9
	JNE  LBB8_16
	WORD $0x894d; BYTE $0xc8       // movq	%r9, %r8
	LONG $0x247c8b4c; BYTE $0x08   // movq	8(%rsp), %r15                   # 8-byte Reload
	WORD $0x394d; BYTE $0xf9       // cmpq	%r15, %r9
	JE   LBB8_22

LBB8_18:
	WORD $0x894d; BYTE $0xc6       // movq	%r8, %r14
	LONG $0x01c7f641               // testb	$1, %r15b
	JE   LBB8_20
	WORD $0x8949; BYTE $0xf6       // movq	%rsi, %r14
	LONG $0x74af0f4c; WORD $0x0824 // imulq	8(%rsp), %r14                   # 8-byte Folded Reload
	LONG $0x247c8b4c; BYTE $0x20   // movq	32(%rsp), %r15                  # 8-byte Reload
	LONG $0xb7348d4f               // leaq	(%r15,%r14,4), %r14
	LONG $0x0410fac5; BYTE $0xb1   // vmovss	(%rcx,%rsi,4), %xmm0            # xmm0 = mem[0],zero,zero,zero
	LONG $0x107a81c4; WORD $0x860c // vmovss	(%r14,%r8,4), %xmm1             # xmm1 = mem[0],zero,zero,zero
	LONG $0xa97982c4; WORD $0x820c // vfmadd213ss	(%r10,%r8,4), %xmm0, %xmm1 # xmm1 = (xmm0 * xmm1) + mem
	LONG $0x117a81c4; WORD $0x820c // vmovss	%xmm1, (%r10,%r8,4)
	WORD $0x894d; BYTE $0xc6       // movq	%r8, %r14
	LONG $0x01ce8349               // orq	$1, %r14

LBB8_20:
	LONG $0x24443b4c; BYTE $0x48 // cmpq	72(%rsp), %r8                   # 8-byte Folded Reload
	LONG $0x24448b4c; BYTE $0x08 // movq	8(%rsp), %r8                    # 8-byte Reload
	JE   LBB8_22

LBB8_21:
	LONG $0x0410fac5; BYTE $0xb1               // vmovss	(%rcx,%rsi,4), %xmm0            # xmm0 = mem[0],zero,zero,zero
	LONG $0x107aa1c4; WORD $0xb20c             // vmovss	(%rdx,%r14,4), %xmm1            # xmm1 = mem[0],zero,zero,zero
	LONG $0xa979a2c4; WORD $0xb70c             // vfmadd213ss	(%rdi,%r14,4), %xmm0, %xmm1 # xmm1 = (xmm0 * xmm1) + mem
	LONG $0x117aa1c4; WORD $0xb70c             // vmovss	%xmm1, (%rdi,%r14,4)
	LONG $0x0410fac5; BYTE $0xb1               // vmovss	(%rcx,%rsi,4), %xmm0            # xmm0 = mem[0],zero,zero,zero
	LONG $0x107aa1c4; WORD $0xb24c; BYTE $0x04 // vmovss	4(%rdx,%r14,4), %xmm1           # xmm1 = mem[0],zero,zero,zero
	LONG $0xa979a2c4; WORD $0xb74c; BYTE $0x04 // vfmadd213ss	4(%rdi,%r14,4), %xmm0, %xmm1 # xmm1 = (xmm0 * xmm1) + mem
	LONG $0x117aa1c4; WORD $0xb74c; BYTE $0x04 // vmovss	%xmm1, 4(%rdi,%r14,4)
	LONG $0x02c68349                           // addq	$2, %r14
	WORD $0x394d; BYTE $0xf0                   // cmpq	%r14, %r8
	JNE  LBB8_21
	JMP  LBB8_22

LBB8_24:
	WORD $0xc984                   // testb	%cl, %cl
	JE   LBB8_100
	WORD $0xc084                   // testb	%al, %al
	JNE  LBB8_100
	LONG $0x247c8348; WORD $0x0018 // cmpq	$0, 24(%rsp)                    # 8-byte Folded Reload
	JLE  LBB8_145
	LONG $0x24448b48; BYTE $0x10   // movq	16(%rsp), %rax                  # 8-byte Reload
	LONG $0x0f488d48               // leaq	15(%rax), %rcx
	WORD $0x8548; BYTE $0xc0       // testq	%rax, %rax
	LONG $0xc8490f48               // cmovnsq	%rax, %rcx
	LONG $0x247c8348; WORD $0x0008 // cmpq	$0, 8(%rsp)                     # 8-byte Folded Reload
	JLE  LBB8_145
	WORD $0x8948; BYTE $0xc8       // movq	%rcx, %rax
	LONG $0x04f8c148               // sarq	$4, %rax
	LONG $0xf0e18348               // andq	$-16, %rcx
	LONG $0x24548b4c; BYTE $0x10   // movq	16(%rsp), %r10                  # 8-byte Reload
	WORD $0x2949; BYTE $0xca       // subq	%rcx, %r10
	LONG $0x07fa8341               // cmpl	$7, %r10d
	JLE  LBB8_29
	LONG $0xf84a8d41               // leal	-8(%r10), %ecx
	WORD $0xf883; BYTE $0x01       // cmpl	$1, %eax
	JLE  LBB8_34
	LONG $0x08fa8341               // cmpl	$8, %r10d
	JLE  LBB8_39
	WORD $0x8941; BYTE $0xca       // movl	%ecx, %r10d
	WORD $0x488d; BYTE $0xff       // leal	-1(%rax), %ecx
	WORD $0x508d; BYTE $0xfe       // leal	-2(%rax), %edx
	LONG $0x30245489               // movl	%edx, 48(%rsp)                  # 4-byte Spill
	LONG $0xff528d49               // leaq	-1(%r10), %rdx
	LONG $0x24548948; BYTE $0x40   // movq	%rdx, 64(%rsp)                  # 8-byte Spill
	LONG $0x48244c89               // movl	%ecx, 72(%rsp)                  # 4-byte Spill
	WORD $0xe183; BYTE $0xfc       // andl	$-4, %ecx
	LONG $0x68244c89               // movl	%ecx, 104(%rsp)                 # 4-byte Spill
	WORD $0x8945; BYTE $0xd4       // movl	%r10d, %r12d
	LONG $0x03e48341               // andl	$3, %r12d
	LONG $0xfce28341               // andl	$-4, %r10d
	LONG $0x244c8b48; BYTE $0x10   // movq	16(%rsp), %rcx                  # 8-byte Reload
	QUAD $0x000000008d2c8d4c       // leaq	(,%rcx,4), %r13
	WORD $0xc8fe                   // decb	%al
	WORD $0xb60f; BYTE $0xc0       // movzbl	%al, %eax
	WORD $0xe083; BYTE $0x03       // andl	$3, %eax
	WORD $0xe0c1; BYTE $0x06       // shll	$6, %eax
	WORD $0xf631                   // xorl	%esi, %esi
	LONG $0x247c8b48; BYTE $0x38   // movq	56(%rsp), %rdi                  # 8-byte Reload
	JMP  LBB8_44

LBB8_62:
	LONG $0x24748b48; BYTE $0x60 // movq	96(%rsp), %rsi                  # 8-byte Reload
	WORD $0xff48; BYTE $0xc6     // incq	%rsi
	WORD $0x014c; BYTE $0xef     // addq	%r13, %rdi
	LONG $0x24743b48; BYTE $0x18 // cmpq	24(%rsp), %rsi                  # 8-byte Folded Reload
	JE   LBB8_145

LBB8_44:
	WORD $0x8948; BYTE $0xf1       // movq	%rsi, %rcx
	LONG $0x4caf0f48; WORD $0x1024 // imulq	16(%rsp), %rcx                  # 8-byte Folded Reload
	LONG $0x24548b48; BYTE $0x38   // movq	56(%rsp), %rdx                  # 8-byte Reload
	LONG $0x8a1c8d48               // leaq	(%rdx,%rcx,4), %rbx
	LONG $0x8a0c8d48               // leaq	(%rdx,%rcx,4), %rcx
	LONG $0x40c18348               // addq	$64, %rcx
	LONG $0x244c8948; BYTE $0x58   // movq	%rcx, 88(%rsp)                  # 8-byte Spill
	LONG $0x24748948; BYTE $0x60   // movq	%rsi, 96(%rsp)                  # 8-byte Spill
	WORD $0x8948; BYTE $0xf1       // movq	%rsi, %rcx
	LONG $0x4caf0f48; WORD $0x0824 // imulq	8(%rsp), %rcx                   # 8-byte Folded Reload
	LONG $0x24548b48; BYTE $0x50   // movq	80(%rsp), %rdx                  # 8-byte Reload
	LONG $0x8a3c8d4c               // leaq	(%rdx,%rcx,4), %r15
	LONG $0x24748b48; BYTE $0x20   // movq	32(%rsp), %rsi                  # 8-byte Reload
	WORD $0x3145; BYTE $0xf6       // xorl	%r14d, %r14d
	JMP  LBB8_45

LBB8_61:
	LONG $0x117a81c4; WORD $0xb704 // vmovss	%xmm0, (%r15,%r14,4)
	WORD $0xff49; BYTE $0xc6       // incq	%r14
	WORD $0x014c; BYTE $0xee       // addq	%r13, %rsi
	LONG $0x24743b4c; BYTE $0x08   // cmpq	8(%rsp), %r14                   # 8-byte Folded Reload
	JE   LBB8_62

LBB8_45:
	WORD $0x894c; BYTE $0xf1                   // movq	%r14, %rcx
	LONG $0x4caf0f48; WORD $0x1024             // imulq	16(%rsp), %rcx                  # 8-byte Folded Reload
	LONG $0x487cf162; WORD $0x0310             // vmovups	(%rbx), %zmm0
	LONG $0x24548b48; BYTE $0x20               // movq	32(%rsp), %rdx                  # 8-byte Reload
	LONG $0x487cf162; WORD $0x0459; BYTE $0x8a // vmulps	(%rdx,%rcx,4), %zmm0, %zmm0
	LONG $0x30247c83; BYTE $0x03               // cmpl	$3, 48(%rsp)                    # 4-byte Folded Reload
	JAE  LBB8_47
	LONG $0x8a0c8d4c                           // leaq	(%rdx,%rcx,4), %r9
	LONG $0x40c18349                           // addq	$64, %r9
	LONG $0x245c8b4c; BYTE $0x58               // movq	88(%rsp), %r11                  # 8-byte Reload
	LONG $0x482444f6; BYTE $0x03               // testb	$3, 72(%rsp)                    # 1-byte Folded Reload
	JNE  LBB8_51
	JMP  LBB8_54

LBB8_47:
	LONG $0x68244c8b         // movl	104(%rsp), %ecx                 # 4-byte Reload
	WORD $0x3145; BYTE $0xc9 // xorl	%r9d, %r9d

LBB8_48:
	QUAD $0x010f4c10487cb162                   // vmovups	64(%rdi,%r9), %zmm1
	QUAD $0x020f5410487cb162                   // vmovups	128(%rdi,%r9), %zmm2
	QUAD $0x030f5c10487cb162                   // vmovups	192(%rdi,%r9), %zmm3
	QUAD $0x010e4c98487db262                   // vfmadd132ps	64(%rsi,%r9), %zmm0, %zmm1 # zmm1 = (zmm1 * mem) + zmm0
	QUAD $0x020e4cb8486db262                   // vfmadd231ps	128(%rsi,%r9), %zmm2, %zmm1 # zmm1 = (zmm2 * mem) + zmm1
	QUAD $0x040f5410487cb162                   // vmovups	256(%rdi,%r9), %zmm2
	QUAD $0x030e4cb84865b262                   // vfmadd231ps	192(%rsi,%r9), %zmm3, %zmm1 # zmm1 = (zmm3 * mem) + zmm1
	LONG $0x487cf162; WORD $0xc128             // vmovaps	%zmm1, %zmm0
	QUAD $0x040e44b8486db262                   // vfmadd231ps	256(%rsi,%r9), %zmm2, %zmm0 # zmm0 = (zmm2 * mem) + zmm0
	LONG $0x00c18149; WORD $0x0001; BYTE $0x00 // addq	$256, %r9                       # imm = 0x100
	WORD $0xc183; BYTE $0xfc                   // addl	$-4, %ecx
	JNE  LBB8_48
	LONG $0x0f0c8d4a                           // leaq	(%rdi,%r9), %rcx
	LONG $0x0e148d4a                           // leaq	(%rsi,%r9), %rdx
	LONG $0x0f1c8d4e                           // leaq	(%rdi,%r9), %r11
	LONG $0x40c38349                           // addq	$64, %r11
	WORD $0x0149; BYTE $0xf1                   // addq	%rsi, %r9
	LONG $0x40c18349                           // addq	$64, %r9
	LONG $0x482444f6; BYTE $0x03               // testb	$3, 72(%rsp)                    # 1-byte Folded Reload
	JE   LBB8_54

LBB8_51:
	WORD $0xc931 // xorl	%ecx, %ecx
	WORD $0xd231 // xorl	%edx, %edx

LBB8_52:
	LONG $0x487cd162; WORD $0x0b10             // vmovups	(%r11), %zmm1
	LONG $0x4875d262; WORD $0x04b8; BYTE $0x09 // vfmadd231ps	(%r9,%rcx), %zmm1, %zmm0 # zmm0 = (zmm1 * mem) + zmm0
	LONG $0x40c38349                           // addq	$64, %r11
	LONG $0xc0c28348                           // addq	$-64, %rdx
	LONG $0x40c18348                           // addq	$64, %rcx
	WORD $0xc839                               // cmpl	%ecx, %eax
	JNE  LBB8_52
	LONG $0xc04b8d49                           // leaq	-64(%r11), %rcx
	WORD $0x2949; BYTE $0xd1                   // subq	%rdx, %r9
	LONG $0xc0518d49                           // leaq	-64(%r9), %rdx

LBB8_54:
	LONG $0x48fdf362; WORD $0xc11b; BYTE $0x01 // vextractf64x4	$1, %zmm0, %ymm1
	LONG $0xc158fcc5                           // vaddps	%ymm1, %ymm0, %ymm0
	LONG $0x197de3c4; WORD $0x01c1             // vextractf128	$1, %ymm0, %xmm1
	LONG $0xc158f8c5                           // vaddps	%xmm1, %xmm0, %xmm0
	LONG $0xc8c6f9c5; BYTE $0x01               // vshufpd	$1, %xmm0, %xmm0, %xmm1         # xmm1 = xmm0[1,0]
	LONG $0xc158f8c5                           // vaddps	%xmm1, %xmm0, %xmm0
	LONG $0x107cc1c4; BYTE $0x0b               // vmovups	(%r11), %ymm1
	LONG $0x5974c1c4; BYTE $0x09               // vmulps	(%r9), %ymm1, %ymm1
	LONG $0x197de3c4; WORD $0x01ca             // vextractf128	$1, %ymm1, %xmm2
	LONG $0xc958e8c5                           // vaddps	%xmm1, %xmm2, %xmm1
	LONG $0xd1c6f1c5; BYTE $0x01               // vshufpd	$1, %xmm1, %xmm1, %xmm2         # xmm2 = xmm1[1,0]
	LONG $0xca58f0c5                           // vaddps	%xmm2, %xmm1, %xmm1
	LONG $0xd116fac5                           // vmovshdup	%xmm1, %xmm2            # xmm2 = xmm1[1,1,3,3]
	LONG $0xca58f2c5                           // vaddss	%xmm2, %xmm1, %xmm1
	LONG $0xd016fac5                           // vmovshdup	%xmm0, %xmm2            # xmm2 = xmm0[1,1,3,3]
	LONG $0xc258fac5                           // vaddss	%xmm2, %xmm0, %xmm0
	LONG $0xc158fac5                           // vaddss	%xmm1, %xmm0, %xmm0
	LONG $0x247c8348; WORD $0x0340             // cmpq	$3, 64(%rsp)                    # 8-byte Folded Reload
	JAE  LBB8_56
	WORD $0x3145; BYTE $0xc9                   // xorl	%r9d, %r9d
	JMP  LBB8_58

LBB8_56:
	WORD $0x3145; BYTE $0xc9 // xorl	%r9d, %r9d

LBB8_57:
	LONG $0x107aa1c4; WORD $0x894c; BYTE $0x60 // vmovss	96(%rcx,%r9,4), %xmm1           # xmm1 = mem[0],zero,zero,zero
	LONG $0x107aa1c4; WORD $0x8954; BYTE $0x64 // vmovss	100(%rcx,%r9,4), %xmm2          # xmm2 = mem[0],zero,zero,zero
	LONG $0x9979a2c4; WORD $0x8a4c; BYTE $0x60 // vfmadd132ss	96(%rdx,%r9,4), %xmm0, %xmm1 # xmm1 = (xmm1 * mem) + xmm0
	LONG $0xb969a2c4; WORD $0x8a4c; BYTE $0x64 // vfmadd231ss	100(%rdx,%r9,4), %xmm2, %xmm1 # xmm1 = (xmm2 * mem) + xmm1
	LONG $0x107aa1c4; WORD $0x8954; BYTE $0x68 // vmovss	104(%rcx,%r9,4), %xmm2          # xmm2 = mem[0],zero,zero,zero
	LONG $0x9971a2c4; WORD $0x8a54; BYTE $0x68 // vfmadd132ss	104(%rdx,%r9,4), %xmm1, %xmm2 # xmm2 = (xmm2 * mem) + xmm1
	LONG $0x107aa1c4; WORD $0x8944; BYTE $0x6c // vmovss	108(%rcx,%r9,4), %xmm0          # xmm0 = mem[0],zero,zero,zero
	LONG $0x9969a2c4; WORD $0x8a44; BYTE $0x6c // vfmadd132ss	108(%rdx,%r9,4), %xmm2, %xmm0 # xmm0 = (xmm0 * mem) + xmm2
	LONG $0x04c18349                           // addq	$4, %r9
	WORD $0x394d; BYTE $0xca                   // cmpq	%r9, %r10
	JNE  LBB8_57

LBB8_58:
	WORD $0x854d; BYTE $0xe4 // testq	%r12, %r12
	JE   LBB8_61
	LONG $0x8a148d4a         // leaq	(%rdx,%r9,4), %rdx
	LONG $0x60c28348         // addq	$96, %rdx
	LONG $0x890c8d4a         // leaq	(%rcx,%r9,4), %rcx
	LONG $0x60c18348         // addq	$96, %rcx
	WORD $0x3145; BYTE $0xc0 // xorl	%r8d, %r8d

LBB8_60:
	LONG $0x107aa1c4; WORD $0x810c // vmovss	(%rcx,%r8,4), %xmm1             # xmm1 = mem[0],zero,zero,zero
	LONG $0xb971a2c4; WORD $0x8204 // vfmadd231ss	(%rdx,%r8,4), %xmm1, %xmm0 # xmm0 = (xmm1 * mem) + xmm0
	WORD $0xff49; BYTE $0xc0       // incq	%r8
	WORD $0x394d; BYTE $0xc4       // cmpq	%r8, %r12
	JNE  LBB8_60
	JMP  LBB8_61

LBB8_100:
	LONG $0x247c8348; WORD $0x0010             // cmpq	$0, 16(%rsp)                    # 8-byte Folded Reload
	LONG $0xc69f0f40                           // setg	%sil
	WORD $0x854d; BYTE $0xc0                   // testq	%r8, %r8
	WORD $0x9f0f; BYTE $0xc2                   // setg	%dl
	WORD $0x2040; BYTE $0xf2                   // andb	%sil, %dl
	WORD $0xc084                               // testb	%al, %al
	JE   LBB8_122
	WORD $0xc984                               // testb	%cl, %cl
	JNE  LBB8_122
	LONG $0x247c8348; WORD $0x0018             // cmpq	$0, 24(%rsp)                    # 8-byte Folded Reload
	WORD $0x9e0f; BYTE $0xc0                   // setle	%al
	WORD $0xf280; BYTE $0x01                   // xorb	$1, %dl
	WORD $0xc208                               // orb	%al, %dl
	JNE  LBB8_145
	LONG $0x24548b48; BYTE $0x08               // movq	8(%rsp), %rdx                   # 8-byte Reload
	QUAD $0x0000000095348d48                   // leaq	(,%rdx,4), %rsi
	LONG $0x244c8b48; BYTE $0x10               // movq	16(%rsp), %rcx                  # 8-byte Reload
	LONG $0xff418d48                           // leaq	-1(%rcx), %rax
	LONG $0x44af0f48; WORD $0x1824             // imulq	24(%rsp), %rax                  # 8-byte Folded Reload
	LONG $0xcaaf0f48                           // imulq	%rdx, %rcx
	LONG $0x24448b4c; BYTE $0x20               // movq	32(%rsp), %r8                   # 8-byte Reload
	LONG $0x880c8d49                           // leaq	(%r8,%rcx,4), %rcx
	LONG $0x244c8948; BYTE $0x58               // movq	%rcx, 88(%rsp)                  # 8-byte Spill
	LONG $0x247c8b48; BYTE $0x50               // movq	80(%rsp), %rdi                  # 8-byte Reload
	LONG $0x970c8d48                           // leaq	(%rdi,%rdx,4), %rcx
	LONG $0x244c8948; BYTE $0x68               // movq	%rcx, 104(%rsp)                 # 8-byte Spill
	LONG $0x244c8b48; BYTE $0x38               // movq	56(%rsp), %rcx                  # 8-byte Reload
	LONG $0x81048d48                           // leaq	(%rcx,%rax,4), %rax
	LONG $0x04c08348                           // addq	$4, %rax
	LONG $0x24448948; BYTE $0x60               // movq	%rax, 96(%rsp)                  # 8-byte Spill
	WORD $0x8948; BYTE $0xd3                   // movq	%rdx, %rbx
	LONG $0xc0e38348                           // andq	$-64, %rbx
	WORD $0x8949; BYTE $0xd7                   // movq	%rdx, %r15
	LONG $0xf8e78349                           // andq	$-8, %r15
	LONG $0xff428d48                           // leaq	-1(%rdx), %rax
	LONG $0x24448948; BYTE $0x48               // movq	%rax, 72(%rsp)                  # 8-byte Spill
	LONG $0xc0808d49; WORD $0x0000; BYTE $0x00 // leaq	192(%r8), %rax
	LONG $0x24448948; BYTE $0x70               // movq	%rax, 112(%rsp)                 # 8-byte Spill
	LONG $0xc0af8d4c; WORD $0x0000; BYTE $0x00 // leaq	192(%rdi), %r13
	WORD $0x3145; BYTE $0xdb                   // xorl	%r11d, %r11d
	JMP  LBB8_104

LBB8_121:
	LONG $0x245c8b4c; BYTE $0x40 // movq	64(%rsp), %r11                  # 8-byte Reload
	WORD $0xff49; BYTE $0xc3     // incq	%r11
	WORD $0x0149; BYTE $0xf5     // addq	%rsi, %r13
	WORD $0x0148; BYTE $0xf7     // addq	%rsi, %rdi
	LONG $0x245c3b4c; BYTE $0x18 // cmpq	24(%rsp), %r11                  # 8-byte Folded Reload
	JE   LBB8_145

LBB8_104:
	WORD $0x8548; BYTE $0xf6               // testq	%rsi, %rsi
	WORD $0x980f; BYTE $0xc0               // sets	%al
	QUAD $0x000000000000b948; WORD $0x2000 // movabsq	$2305843009213693952, %rcx      # imm = 0x2000000000000000
	LONG $0x244c8548; BYTE $0x18           // testq	%rcx, 24(%rsp)                  # 8-byte Folded Reload
	WORD $0x950f; BYTE $0xc2               // setne	%dl
	WORD $0x8949; BYTE $0xf0               // movq	%rsi, %r8
	LONG $0xc3af0f4d                       // imulq	%r11, %r8
	LONG $0x24648b4c; BYTE $0x50           // movq	80(%rsp), %r12                  # 8-byte Reload
	LONG $0x040c8d4f                       // leaq	(%r12,%r8), %r9
	LONG $0x2444034c; BYTE $0x68           // addq	104(%rsp), %r8                  # 8-byte Folded Reload
	LONG $0x244c8b48; BYTE $0x38           // movq	56(%rsp), %rcx                  # 8-byte Reload
	LONG $0x99148d4e                       // leaq	(%rcx,%r11,4), %r10
	LONG $0x244c8b48; BYTE $0x60           // movq	96(%rsp), %rcx                  # 8-byte Reload
	LONG $0x990c8d4a                       // leaq	(%rcx,%r11,4), %rcx
	LONG $0x245c894c; BYTE $0x40           // movq	%r11, 64(%rsp)                  # 8-byte Spill
	LONG $0x5caf0f4c; WORD $0x0824         // imulq	8(%rsp), %r11                   # 8-byte Folded Reload
	WORD $0x3949; BYTE $0xc9               // cmpq	%rcx, %r9
	WORD $0x920f; BYTE $0xc1               // setb	%cl
	WORD $0x394d; BYTE $0xc2               // cmpq	%r8, %r10
	LONG $0xc6920f41                       // setb	%r14b
	WORD $0x2041; BYTE $0xce               // andb	%cl, %r14b
	LONG $0x9c0c8d4b                       // leaq	(%r12,%r11,4), %rcx
	LONG $0x244c8948; BYTE $0x30           // movq	%rcx, 48(%rsp)                  # 8-byte Spill
	WORD $0x0841; BYTE $0xd6               // orb	%dl, %r14b
	LONG $0x244c3b4c; BYTE $0x58           // cmpq	88(%rsp), %r9                   # 8-byte Folded Reload
	WORD $0x920f; BYTE $0xc2               // setb	%dl
	LONG $0x244c8b48; BYTE $0x20           // movq	32(%rsp), %rcx                  # 8-byte Reload
	WORD $0x3949; BYTE $0xc8               // cmpq	%rcx, %r8
	LONG $0xc3970f41                       // seta	%r11b
	WORD $0x2041; BYTE $0xd3               // andb	%dl, %r11b
	WORD $0x0841; BYTE $0xc3               // orb	%al, %r11b
	WORD $0x0845; BYTE $0xf3               // orb	%r14b, %r11b
	WORD $0x8948; BYTE $0xca               // movq	%rcx, %rdx
	LONG $0x24648b4c; BYTE $0x70           // movq	112(%rsp), %r12                 # 8-byte Reload
	WORD $0xc031                           // xorl	%eax, %eax
	JMP  LBB8_105

LBB8_120:
	WORD $0xff48; BYTE $0xc0     // incq	%rax
	WORD $0x0149; BYTE $0xf4     // addq	%rsi, %r12
	WORD $0x0148; BYTE $0xf2     // addq	%rsi, %rdx
	LONG $0x24443b48; BYTE $0x10 // cmpq	16(%rsp), %rax                  # 8-byte Folded Reload
	JE   LBB8_121

LBB8_105:
	LONG $0x244c8b48; BYTE $0x08   // movq	8(%rsp), %rcx                   # 8-byte Reload
	LONG $0x08f98348               // cmpq	$8, %rcx
	LONG $0xc0920f41               // setb	%r8b
	WORD $0x8949; BYTE $0xc1       // movq	%rax, %r9
	LONG $0x4caf0f4c; WORD $0x1824 // imulq	24(%rsp), %r9                   # 8-byte Folded Reload
	WORD $0x0845; BYTE $0xd8       // orb	%r11b, %r8b
	JE   LBB8_107
	WORD $0x3145; BYTE $0xf6       // xorl	%r14d, %r14d
	JMP  LBB8_116

LBB8_107:
	LONG $0x40f98348         // cmpq	$64, %rcx
	JAE  LBB8_109
	WORD $0x3145; BYTE $0xc0 // xorl	%r8d, %r8d
	JMP  LBB8_113

LBB8_109:
	LONG $0x487d9262; WORD $0x0418; BYTE $0x8a // vbroadcastss	(%r10,%r9,4), %zmm0
	WORD $0x3145; BYTE $0xc0                   // xorl	%r8d, %r8d

LBB8_110:
	QUAD $0xfd844c10487c9162                   // vmovups	-192(%r12,%r8,4), %zmm1
	QUAD $0xfe845410487c9162                   // vmovups	-128(%r12,%r8,4), %zmm2
	QUAD $0xff845c10487c9162                   // vmovups	-64(%r12,%r8,4), %zmm3
	LONG $0x487c9162; WORD $0x2410; BYTE $0x84 // vmovups	(%r12,%r8,4), %zmm4
	QUAD $0xfd854ca8487d9262                   // vfmadd213ps	-192(%r13,%r8,4), %zmm0, %zmm1 # zmm1 = (zmm0 * zmm1) + mem
	QUAD $0xfe8554a8487d9262                   // vfmadd213ps	-128(%r13,%r8,4), %zmm0, %zmm2 # zmm2 = (zmm0 * zmm2) + mem
	QUAD $0xff855ca8487d9262                   // vfmadd213ps	-64(%r13,%r8,4), %zmm0, %zmm3 # zmm3 = (zmm0 * zmm3) + mem
	QUAD $0x008564a8487d9262                   // vfmadd213ps	(%r13,%r8,4), %zmm0, %zmm4 # zmm4 = (zmm0 * zmm4) + mem
	QUAD $0xfd854c11487c9162                   // vmovups	%zmm1, -192(%r13,%r8,4)
	QUAD $0xfe855411487c9162                   // vmovups	%zmm2, -128(%r13,%r8,4)
	QUAD $0xff855c11487c9162                   // vmovups	%zmm3, -64(%r13,%r8,4)
	QUAD $0x00856411487c9162                   // vmovups	%zmm4, (%r13,%r8,4)
	LONG $0x40c08349                           // addq	$64, %r8
	WORD $0x394c; BYTE $0xc3                   // cmpq	%r8, %rbx
	JNE  LBB8_110
	WORD $0x3948; BYTE $0xcb                   // cmpq	%rcx, %rbx
	JE   LBB8_120
	WORD $0x8949; BYTE $0xd8                   // movq	%rbx, %r8
	WORD $0x8949; BYTE $0xde                   // movq	%rbx, %r14
	WORD $0xc1f6; BYTE $0x38                   // testb	$56, %cl
	JE   LBB8_116

LBB8_113:
	LONG $0x187d82c4; WORD $0x8a04 // vbroadcastss	(%r10,%r9,4), %ymm0

LBB8_114:
	LONG $0x107ca1c4; WORD $0x820c // vmovups	(%rdx,%r8,4), %ymm1
	LONG $0xa87da2c4; WORD $0x870c // vfmadd213ps	(%rdi,%r8,4), %ymm0, %ymm1 # ymm1 = (ymm0 * ymm1) + mem
	LONG $0x117ca1c4; WORD $0x870c // vmovups	%ymm1, (%rdi,%r8,4)
	LONG $0x08c08349               // addq	$8, %r8
	WORD $0x394d; BYTE $0xc7       // cmpq	%r8, %r15
	JNE  LBB8_114
	WORD $0x894d; BYTE $0xfe       // movq	%r15, %r14
	LONG $0x244c8b48; BYTE $0x08   // movq	8(%rsp), %rcx                   # 8-byte Reload
	WORD $0x3949; BYTE $0xcf       // cmpq	%rcx, %r15
	JE   LBB8_120

LBB8_116:
	WORD $0x894d; BYTE $0xf0       // movq	%r14, %r8
	WORD $0xc1f6; BYTE $0x01       // testb	$1, %cl
	JE   LBB8_118
	WORD $0x8949; BYTE $0xc0       // movq	%rax, %r8
	LONG $0x44af0f4c; WORD $0x0824 // imulq	8(%rsp), %r8                    # 8-byte Folded Reload
	LONG $0x244c8b48; BYTE $0x20   // movq	32(%rsp), %rcx                  # 8-byte Reload
	LONG $0x81048d4e               // leaq	(%rcx,%r8,4), %r8
	LONG $0x107a81c4; WORD $0x8a04 // vmovss	(%r10,%r9,4), %xmm0             # xmm0 = mem[0],zero,zero,zero
	LONG $0x107a81c4; WORD $0xb00c // vmovss	(%r8,%r14,4), %xmm1             # xmm1 = mem[0],zero,zero,zero
	LONG $0x244c8b48; BYTE $0x30   // movq	48(%rsp), %rcx                  # 8-byte Reload
	LONG $0xa979a2c4; WORD $0xb10c // vfmadd213ss	(%rcx,%r14,4), %xmm0, %xmm1 # xmm1 = (xmm0 * xmm1) + mem
	LONG $0x117aa1c4; WORD $0xb10c // vmovss	%xmm1, (%rcx,%r14,4)
	WORD $0x894d; BYTE $0xf0       // movq	%r14, %r8
	LONG $0x01c88349               // orq	$1, %r8

LBB8_118:
	LONG $0x24743b4c; BYTE $0x48 // cmpq	72(%rsp), %r14                  # 8-byte Folded Reload
	LONG $0x24748b4c; BYTE $0x08 // movq	8(%rsp), %r14                   # 8-byte Reload
	JE   LBB8_120

LBB8_119:
	LONG $0x107a81c4; WORD $0x8a04             // vmovss	(%r10,%r9,4), %xmm0             # xmm0 = mem[0],zero,zero,zero
	LONG $0x107aa1c4; WORD $0x820c             // vmovss	(%rdx,%r8,4), %xmm1             # xmm1 = mem[0],zero,zero,zero
	LONG $0xa979a2c4; WORD $0x870c             // vfmadd213ss	(%rdi,%r8,4), %xmm0, %xmm1 # xmm1 = (xmm0 * xmm1) + mem
	LONG $0x117aa1c4; WORD $0x870c             // vmovss	%xmm1, (%rdi,%r8,4)
	LONG $0x107a81c4; WORD $0x8a04             // vmovss	(%r10,%r9,4), %xmm0             # xmm0 = mem[0],zero,zero,zero
	LONG $0x107aa1c4; WORD $0x824c; BYTE $0x04 // vmovss	4(%rdx,%r8,4), %xmm1            # xmm1 = mem[0],zero,zero,zero
	LONG $0xa979a2c4; WORD $0x874c; BYTE $0x04 // vfmadd213ss	4(%rdi,%r8,4), %xmm0, %xmm1 # xmm1 = (xmm0 * xmm1) + mem
	LONG $0x117aa1c4; WORD $0x874c; BYTE $0x04 // vmovss	%xmm1, 4(%rdi,%r8,4)
	LONG $0x02c08349                           // addq	$2, %r8
	WORD $0x394d; BYTE $0xc6                   // cmpq	%r8, %r14
	JNE  LBB8_119
	JMP  LBB8_120

LBB8_122:
	WORD $0xca20                               // andb	%cl, %dl
	WORD $0xfa80; BYTE $0x01                   // cmpb	$1, %dl
	JNE  LBB8_145
	LONG $0x247c8348; WORD $0x0018             // cmpq	$0, 24(%rsp)                    # 8-byte Folded Reload
	JLE  LBB8_145
	WORD $0xc084                               // testb	%al, %al
	JE   LBB8_145
	LONG $0x24748b48; BYTE $0x08               // movq	8(%rsp), %rsi                   # 8-byte Reload
	QUAD $0x00000000b5048d4c                   // leaq	(,%rsi,4), %r8
	LONG $0x24548b48; BYTE $0x10               // movq	16(%rsp), %rdx                  # 8-byte Reload
	LONG $0xff428d48                           // leaq	-1(%rdx), %rax
	LONG $0x44af0f48; WORD $0x1824             // imulq	24(%rsp), %rax                  # 8-byte Folded Reload
	LONG $0x320c8d48                           // leaq	(%rdx,%rsi), %rcx
	LONG $0x247c8b48; BYTE $0x20               // movq	32(%rsp), %rdi                  # 8-byte Reload
	LONG $0x8f0c8d48                           // leaq	(%rdi,%rcx,4), %rcx
	LONG $0xfcc18348                           // addq	$-4, %rcx
	LONG $0x244c8948; BYTE $0x78               // movq	%rcx, 120(%rsp)                 # 8-byte Spill
	LONG $0x246c8b4c; BYTE $0x50               // movq	80(%rsp), %r13                  # 8-byte Reload
	LONG $0xb54c8d49; BYTE $0x00               // leaq	(%r13,%rsi,4), %rcx
	QUAD $0x00000090248c8948                   // movq	%rcx, 144(%rsp)                 # 8-byte Spill
	LONG $0x244c8b48; BYTE $0x38               // movq	56(%rsp), %rcx                  # 8-byte Reload
	LONG $0x81048d48                           // leaq	(%rcx,%rax,4), %rax
	LONG $0x04c08348                           // addq	$4, %rax
	QUAD $0x0000008824848948                   // movq	%rax, 136(%rsp)                 # 8-byte Spill
	LONG $0x08fe8348                           // cmpq	$8, %rsi
	WORD $0x930f; BYTE $0xc0                   // setae	%al
	LONG $0x01fa8348                           // cmpq	$1, %rdx
	WORD $0x940f; BYTE $0xc1                   // sete	%cl
	WORD $0xc120                               // andb	%al, %cl
	WORD $0x8948; BYTE $0xf0                   // movq	%rsi, %rax
	LONG $0xc0e08348                           // andq	$-64, %rax
	LONG $0x24448948; BYTE $0x58               // movq	%rax, 88(%rsp)                  # 8-byte Spill
	WORD $0x8949; BYTE $0xf7                   // movq	%rsi, %r15
	LONG $0xf8e78349                           // andq	$-8, %r15
	LONG $0xff468d48                           // leaq	-1(%rsi), %rax
	LONG $0x24448948; BYTE $0x30               // movq	%rax, 48(%rsp)                  # 8-byte Spill
	LONG $0xc0878d48; WORD $0x0000; BYTE $0x00 // leaq	192(%rdi), %rax
	QUAD $0x0000008024848948                   // movq	%rax, 128(%rsp)                 # 8-byte Spill
	LONG $0xc0858d49; WORD $0x0000; BYTE $0x00 // leaq	192(%r13), %rax
	QUAD $0x0000000095348d48                   // leaq	(,%rdx,4), %rsi
	LONG $0x24748948; BYTE $0x68               // movq	%rsi, 104(%rsp)                 # 8-byte Spill
	QUAD $0x00000000d5148d4c                   // leaq	(,%rdx,8), %r10
	WORD $0xf180; BYTE $0x01                   // xorb	$1, %cl
	LONG $0x2f244c88                           // movb	%cl, 47(%rsp)                   # 1-byte Spill
	WORD $0x3145; BYTE $0xdb                   // xorl	%r11d, %r11d
	LONG $0x2444894c; BYTE $0x70               // movq	%r8, 112(%rsp)                  # 8-byte Spill
	LONG $0x24748b4c; BYTE $0x08               // movq	8(%rsp), %r14                   # 8-byte Reload
	JMP  LBB8_126

LBB8_144:
	LONG $0x245c8b4c; BYTE $0x60 // movq	96(%rsp), %r11                  # 8-byte Reload
	WORD $0xff49; BYTE $0xc3     // incq	%r11
	LONG $0x24448b4c; BYTE $0x70 // movq	112(%rsp), %r8                  # 8-byte Reload
	WORD $0x014c; BYTE $0xc0     // addq	%r8, %rax
	WORD $0x014d; BYTE $0xc5     // addq	%r8, %r13
	LONG $0x245c3b4c; BYTE $0x18 // cmpq	24(%rsp), %r11                  # 8-byte Folded Reload
	JE   LBB8_145

LBB8_126:
	QUAD $0x000000000000b948; WORD $0x2000 // movabsq	$2305843009213693952, %rcx      # imm = 0x2000000000000000
	LONG $0x244c8548; BYTE $0x18           // testq	%rcx, 24(%rsp)                  # 8-byte Folded Reload
	WORD $0x950f; BYTE $0xc1               // setne	%cl
	WORD $0x894c; BYTE $0xc2               // movq	%r8, %rdx
	LONG $0xd3af0f49                       // imulq	%r11, %rdx
	LONG $0x244c8b4c; BYTE $0x50           // movq	80(%rsp), %r9                   # 8-byte Reload
	LONG $0x11348d49                       // leaq	(%r9,%rdx), %rsi
	QUAD $0x0000009024940348               // addq	144(%rsp), %rdx                 # 8-byte Folded Reload
	LONG $0x247c8b48; BYTE $0x38           // movq	56(%rsp), %rdi                  # 8-byte Reload
	LONG $0x9f1c8d4a                       // leaq	(%rdi,%r11,4), %rbx
	QUAD $0x0000008824bc8b48               // movq	136(%rsp), %rdi                 # 8-byte Reload
	LONG $0x9f3c8d4a                       // leaq	(%rdi,%r11,4), %rdi
	LONG $0x245c894c; BYTE $0x60           // movq	%r11, 96(%rsp)                  # 8-byte Spill
	WORD $0x894d; BYTE $0xd8               // movq	%r11, %r8
	LONG $0x44af0f4c; WORD $0x0824         // imulq	8(%rsp), %r8                    # 8-byte Folded Reload
	LONG $0x81048d4f                       // leaq	(%r9,%r8,4), %r8
	LONG $0x2444894c; BYTE $0x40           // movq	%r8, 64(%rsp)                   # 8-byte Spill
	WORD $0x3948; BYTE $0xfe               // cmpq	%rdi, %rsi
	LONG $0xc7920f40                       // setb	%dil
	WORD $0x3948; BYTE $0xd3               // cmpq	%rdx, %rbx
	LONG $0xc0920f41                       // setb	%r8b
	WORD $0x2041; BYTE $0xf8               // andb	%dil, %r8b
	WORD $0x0841; BYTE $0xc8               // orb	%cl, %r8b
	LONG $0x24743b48; BYTE $0x78           // cmpq	120(%rsp), %rsi                 # 8-byte Folded Reload
	WORD $0x920f; BYTE $0xc1               // setb	%cl
	LONG $0x245c8b4c; BYTE $0x20           // movq	32(%rsp), %r11                  # 8-byte Reload
	WORD $0x394c; BYTE $0xda               // cmpq	%r11, %rdx
	WORD $0x970f; BYTE $0xc2               // seta	%dl
	WORD $0xca20                           // andb	%cl, %dl
	WORD $0x0844; BYTE $0xc2               // orb	%r8b, %dl
	LONG $0x2f24540a                       // orb	47(%rsp), %dl                   # 1-byte Folded Reload
	LONG $0x48245488                       // movb	%dl, 72(%rsp)                   # 1-byte Spill
	QUAD $0x00000080248c8b48               // movq	128(%rsp), %rcx                 # 8-byte Reload
	WORD $0x3145; BYTE $0xe4               // xorl	%r12d, %r12d
	JMP  LBB8_127

LBB8_143:
	WORD $0xff49; BYTE $0xc4     // incq	%r12
	LONG $0x04c18348             // addq	$4, %rcx
	LONG $0x04c38349             // addq	$4, %r11
	LONG $0x24643b4c; BYTE $0x10 // cmpq	16(%rsp), %r12                  # 8-byte Folded Reload
	JE   LBB8_144

LBB8_127:
	WORD $0x894d; BYTE $0xe1       // movq	%r12, %r9
	LONG $0x4caf0f4c; WORD $0x1824 // imulq	24(%rsp), %r9                   # 8-byte Folded Reload
	LONG $0x48247c80; BYTE $0x00   // cmpb	$0, 72(%rsp)                    # 1-byte Folded Reload
	JE   LBB8_129
	WORD $0x3145; BYTE $0xc0       // xorl	%r8d, %r8d
	LONG $0x24748b48; BYTE $0x08   // movq	8(%rsp), %rsi                   # 8-byte Reload
	JMP  LBB8_138

LBB8_129:
	LONG $0x247c8348; WORD $0x4008 // cmpq	$64, 8(%rsp)                    # 8-byte Folded Reload
	JAE  LBB8_131
	WORD $0xd231                   // xorl	%edx, %edx
	JMP  LBB8_135

LBB8_131:
	LONG $0x487db262; WORD $0x0418; BYTE $0x8b // vbroadcastss	(%rbx,%r9,4), %zmm0
	WORD $0xf631                               // xorl	%esi, %esi
	LONG $0x24548b48; BYTE $0x58               // movq	88(%rsp), %rdx                  # 8-byte Reload

LBB8_132:
	QUAD $0xfdb14c10487cf162                   // vmovups	-192(%rcx,%rsi,4), %zmm1
	QUAD $0xfeb15410487cf162                   // vmovups	-128(%rcx,%rsi,4), %zmm2
	QUAD $0xffb15c10487cf162                   // vmovups	-64(%rcx,%rsi,4), %zmm3
	LONG $0x487cf162; WORD $0x2410; BYTE $0xb1 // vmovups	(%rcx,%rsi,4), %zmm4
	QUAD $0xfdb04ca8487df262                   // vfmadd213ps	-192(%rax,%rsi,4), %zmm0, %zmm1 # zmm1 = (zmm0 * zmm1) + mem
	QUAD $0xfeb054a8487df262                   // vfmadd213ps	-128(%rax,%rsi,4), %zmm0, %zmm2 # zmm2 = (zmm0 * zmm2) + mem
	QUAD $0xffb05ca8487df262                   // vfmadd213ps	-64(%rax,%rsi,4), %zmm0, %zmm3 # zmm3 = (zmm0 * zmm3) + mem
	LONG $0x487df262; WORD $0x24a8; BYTE $0xb0 // vfmadd213ps	(%rax,%rsi,4), %zmm0, %zmm4 # zmm4 = (zmm0 * zmm4) + mem
	QUAD $0xfdb04c11487cf162                   // vmovups	%zmm1, -192(%rax,%rsi,4)
	QUAD $0xfeb05411487cf162                   // vmovups	%zmm2, -128(%rax,%rsi,4)
	QUAD $0xffb05c11487cf162                   // vmovups	%zmm3, -64(%rax,%rsi,4)
	LONG $0x487cf162; WORD $0x2411; BYTE $0xb0 // vmovups	%zmm4, (%rax,%rsi,4)
	LONG $0x40c68348                           // addq	$64, %rsi
	WORD $0x3948; BYTE $0xf2                   // cmpq	%rsi, %rdx
	JNE  LBB8_132
	LONG $0x24748b48; BYTE $0x08               // movq	8(%rsp), %rsi                   # 8-byte Reload
	WORD $0x3948; BYTE $0xf2                   // cmpq	%rsi, %rdx
	JE   LBB8_143
	LONG $0x24448b4c; BYTE $0x58               // movq	88(%rsp), %r8                   # 8-byte Reload
	WORD $0x894c; BYTE $0xc2                   // movq	%r8, %rdx
	LONG $0x38c6f640                           // testb	$56, %sil
	JE   LBB8_138

LBB8_135:
	LONG $0x187da2c4; WORD $0x8b04 // vbroadcastss	(%rbx,%r9,4), %ymm0

LBB8_136:
	LONG $0x107cc1c4; WORD $0x930c             // vmovups	(%r11,%rdx,4), %ymm1
	LONG $0xa87dc2c4; WORD $0x954c; BYTE $0x00 // vfmadd213ps	(%r13,%rdx,4), %ymm0, %ymm1 # ymm1 = (ymm0 * ymm1) + mem
	LONG $0x117cc1c4; WORD $0x954c; BYTE $0x00 // vmovups	%ymm1, (%r13,%rdx,4)
	LONG $0x08c28348                           // addq	$8, %rdx
	WORD $0x3949; BYTE $0xd7                   // cmpq	%rdx, %r15
	JNE  LBB8_136
	WORD $0x894d; BYTE $0xf8                   // movq	%r15, %r8
	LONG $0x24748b48; BYTE $0x08               // movq	8(%rsp), %rsi                   # 8-byte Reload
	WORD $0x3949; BYTE $0xf7                   // cmpq	%rsi, %r15
	JE   LBB8_143

LBB8_138:
	WORD $0x894c; BYTE $0xc7       // movq	%r8, %rdi
	LONG $0x01c6f640               // testb	$1, %sil
	JE   LBB8_140
	LONG $0x24548b48; BYTE $0x20   // movq	32(%rsp), %rdx                  # 8-byte Reload
	LONG $0xa2148d4a               // leaq	(%rdx,%r12,4), %rdx
	LONG $0x107aa1c4; WORD $0x8b04 // vmovss	(%rbx,%r9,4), %xmm0             # xmm0 = mem[0],zero,zero,zero
	WORD $0x894c; BYTE $0xc6       // movq	%r8, %rsi
	LONG $0x74af0f48; WORD $0x1024 // imulq	16(%rsp), %rsi                  # 8-byte Folded Reload
	LONG $0x0c10fac5; BYTE $0xb2   // vmovss	(%rdx,%rsi,4), %xmm1            # xmm1 = mem[0],zero,zero,zero
	LONG $0x24548b48; BYTE $0x40   // movq	64(%rsp), %rdx                  # 8-byte Reload
	LONG $0xa979a2c4; WORD $0x820c // vfmadd213ss	(%rdx,%r8,4), %xmm0, %xmm1 # xmm1 = (xmm0 * xmm1) + mem
	LONG $0x117aa1c4; WORD $0x820c // vmovss	%xmm1, (%rdx,%r8,4)
	WORD $0x894c; BYTE $0xc7       // movq	%r8, %rdi
	LONG $0x01cf8348               // orq	$1, %rdi

LBB8_140:
	LONG $0x24443b4c; BYTE $0x30 // cmpq	48(%rsp), %r8                   # 8-byte Folded Reload
	JE   LBB8_143
	LONG $0x24548b48; BYTE $0x68 // movq	104(%rsp), %rdx                 # 8-byte Reload
	WORD $0x8949; BYTE $0xd0     // movq	%rdx, %r8
	LONG $0xc7af0f4c             // imulq	%rdi, %r8
	LONG $0x01778d48             // leaq	1(%rdi), %rsi
	LONG $0xf2af0f48             // imulq	%rdx, %rsi
	WORD $0x894c; BYTE $0xda     // movq	%r11, %rdx

LBB8_142:
	LONG $0x107aa1c4; WORD $0x8b04             // vmovss	(%rbx,%r9,4), %xmm0             # xmm0 = mem[0],zero,zero,zero
	LONG $0x107aa1c4; WORD $0x020c             // vmovss	(%rdx,%r8), %xmm1               # xmm1 = mem[0],zero,zero,zero
	LONG $0xa979c2c4; WORD $0xbd4c; BYTE $0x00 // vfmadd213ss	(%r13,%rdi,4), %xmm0, %xmm1 # xmm1 = (xmm0 * xmm1) + mem
	LONG $0x117ac1c4; WORD $0xbd4c; BYTE $0x00 // vmovss	%xmm1, (%r13,%rdi,4)
	LONG $0x107aa1c4; WORD $0x8b04             // vmovss	(%rbx,%r9,4), %xmm0             # xmm0 = mem[0],zero,zero,zero
	LONG $0x0c10fac5; BYTE $0x32               // vmovss	(%rdx,%rsi), %xmm1              # xmm1 = mem[0],zero,zero,zero
	LONG $0xa979c2c4; WORD $0xbd4c; BYTE $0x04 // vfmadd213ss	4(%r13,%rdi,4), %xmm0, %xmm1 # xmm1 = (xmm0 * xmm1) + mem
	LONG $0x117ac1c4; WORD $0xbd4c; BYTE $0x04 // vmovss	%xmm1, 4(%r13,%rdi,4)
	LONG $0x02c78348                           // addq	$2, %rdi
	WORD $0x014c; BYTE $0xd2                   // addq	%r10, %rdx
	WORD $0x3949; BYTE $0xfe                   // cmpq	%rdi, %r14
	JNE  LBB8_142
	JMP  LBB8_143

LBB8_29:
	WORD $0x8948; BYTE $0xc1               // movq	%rax, %rcx
	LONG $0x06e1c148                       // shlq	$6, %rcx
	QUAD $0x003fffffff80ba48; WORD $0x0000 // movabsq	$274877906816, %rdx             # imm = 0x3FFFFFFF80
	WORD $0x0148; BYTE $0xd1               // addq	%rdx, %rcx
	LONG $0x40ca8348                       // orq	$64, %rdx
	WORD $0x2148; BYTE $0xca               // andq	%rcx, %rdx
	LONG $0x40c28348                       // addq	$64, %rdx
	LONG $0x24548948; BYTE $0x30           // movq	%rdx, 48(%rsp)                  # 8-byte Spill
	WORD $0x8944; BYTE $0xd3               // movl	%r10d, %ebx
	WORD $0x488d; BYTE $0xff               // leal	-1(%rax), %ecx
	WORD $0x508d; BYTE $0xfe               // leal	-2(%rax), %edx
	LONG $0x68245489                       // movl	%edx, 104(%rsp)                 # 4-byte Spill
	LONG $0xff538d48                       // leaq	-1(%rbx), %rdx
	LONG $0x24548948; BYTE $0x48           // movq	%rdx, 72(%rsp)                  # 8-byte Spill
	LONG $0x58244c89                       // movl	%ecx, 88(%rsp)                  # 4-byte Spill
	WORD $0xe183; BYTE $0xfc               // andl	$-4, %ecx
	LONG $0x60244c89                       // movl	%ecx, 96(%rsp)                  # 4-byte Spill
	WORD $0x8945; BYTE $0xd5               // movl	%r10d, %r13d
	LONG $0x03e58341                       // andl	$3, %r13d
	WORD $0x294c; BYTE $0xeb               // subq	%r13, %rbx
	WORD $0xc189                           // movl	%eax, %ecx
	WORD $0xc9fe                           // decb	%cl
	WORD $0xb60f; BYTE $0xf9               // movzbl	%cl, %edi
	WORD $0xe783; BYTE $0x03               // andl	$3, %edi
	WORD $0xe7c1; BYTE $0x06               // shll	$6, %edi
	WORD $0x3145; BYTE $0xc0               // xorl	%r8d, %r8d
	JMP  LBB8_30

LBB8_96:
	LONG $0x24448b4c; BYTE $0x70 // movq	112(%rsp), %r8                  # 8-byte Reload
	WORD $0xff49; BYTE $0xc0     // incq	%r8
	LONG $0x24443b4c; BYTE $0x18 // cmpq	24(%rsp), %r8                   # 8-byte Folded Reload
	JE   LBB8_145

LBB8_30:
	WORD $0x894c; BYTE $0xc1       // movq	%r8, %rcx
	LONG $0x4caf0f48; WORD $0x1024 // imulq	16(%rsp), %rcx                  # 8-byte Folded Reload
	LONG $0x24548b48; BYTE $0x38   // movq	56(%rsp), %rdx                  # 8-byte Reload
	LONG $0x8a348d48               // leaq	(%rdx,%rcx,4), %rsi
	LONG $0x8a348d4c               // leaq	(%rdx,%rcx,4), %r14
	LONG $0x40c68349               // addq	$64, %r14
	LONG $0x2444894c; BYTE $0x70   // movq	%r8, 112(%rsp)                  # 8-byte Spill
	WORD $0x894c; BYTE $0xc1       // movq	%r8, %rcx
	LONG $0x4caf0f48; WORD $0x0824 // imulq	8(%rsp), %rcx                   # 8-byte Folded Reload
	LONG $0x24548b48; BYTE $0x50   // movq	80(%rsp), %rdx                  # 8-byte Reload
	LONG $0x8a248d4c               // leaq	(%rdx,%rcx,4), %r12
	LONG $0x244c8b48; BYTE $0x30   // movq	48(%rsp), %rcx                  # 8-byte Reload
	WORD $0x0148; BYTE $0xf1       // addq	%rsi, %rcx
	LONG $0x40c18348               // addq	$64, %rcx
	LONG $0x244c8948; BYTE $0x40   // movq	%rcx, 64(%rsp)                  # 8-byte Spill
	WORD $0x3145; BYTE $0xdb       // xorl	%r11d, %r11d
	LONG $0x247c8b4c; BYTE $0x20   // movq	32(%rsp), %r15                  # 8-byte Reload
	JMP  LBB8_31

LBB8_95:
	LONG $0x117a81c4; WORD $0x9c04 // vmovss	%xmm0, (%r12,%r11,4)
	WORD $0xff49; BYTE $0xc3       // incq	%r11
	LONG $0x245c3b4c; BYTE $0x08   // cmpq	8(%rsp), %r11                   # 8-byte Folded Reload
	JE   LBB8_96

LBB8_31:
	WORD $0x894c; BYTE $0xd9       // movq	%r11, %rcx
	LONG $0x4caf0f48; WORD $0x1024 // imulq	16(%rsp), %rcx                  # 8-byte Folded Reload
	LONG $0x8f148d49               // leaq	(%r15,%rcx,4), %rdx
	WORD $0xc085                   // testl	%eax, %eax
	JLE  LBB8_32
	LONG $0x404a8d48               // leaq	64(%rdx), %rcx
	LONG $0x487cf162; WORD $0x0610 // vmovups	(%rsi), %zmm0
	LONG $0x487cf162; WORD $0x0259 // vmulps	(%rdx), %zmm0, %zmm0
	WORD $0xf883; BYTE $0x02       // cmpl	$2, %eax
	JL   LBB8_83
	WORD $0x894c; BYTE $0xf2       // movq	%r14, %rdx
	WORD $0x8949; BYTE $0xc9       // movq	%rcx, %r9
	LONG $0x247c8b44; BYTE $0x60   // movl	96(%rsp), %r15d                 # 4-byte Reload
	LONG $0x68247c83; BYTE $0x03   // cmpl	$3, 104(%rsp)                   # 4-byte Folded Reload
	JB   LBB8_85

LBB8_99:
	LONG $0x487cf162; WORD $0x0a10             // vmovups	(%rdx), %zmm1
	LONG $0x487cf162; WORD $0x5210; BYTE $0x01 // vmovups	64(%rdx), %zmm2
	LONG $0x487cf162; WORD $0x5a10; BYTE $0x02 // vmovups	128(%rdx), %zmm3
	LONG $0x487dd262; WORD $0x0998             // vfmadd132ps	(%r9), %zmm0, %zmm1     # zmm1 = (zmm1 * mem) + zmm0
	LONG $0x486dd262; WORD $0x49b8; BYTE $0x01 // vfmadd231ps	64(%r9), %zmm2, %zmm1   # zmm1 = (zmm2 * mem) + zmm1
	LONG $0x4865d262; WORD $0x49b8; BYTE $0x02 // vfmadd231ps	128(%r9), %zmm3, %zmm1  # zmm1 = (zmm3 * mem) + zmm1
	LONG $0x487cf162; WORD $0x5210; BYTE $0x03 // vmovups	192(%rdx), %zmm2
	LONG $0x487cf162; WORD $0xc128             // vmovaps	%zmm1, %zmm0
	LONG $0x486dd262; WORD $0x41b8; BYTE $0x03 // vfmadd231ps	192(%r9), %zmm2, %zmm0  # zmm0 = (zmm2 * mem) + zmm0
	LONG $0x00c28148; WORD $0x0001; BYTE $0x00 // addq	$256, %rdx                      # imm = 0x100
	LONG $0x00c18149; WORD $0x0001; BYTE $0x00 // addq	$256, %r9                       # imm = 0x100
	LONG $0xfcc78341                           // addl	$-4, %r15d
	JNE  LBB8_99

LBB8_85:
	LONG $0x582444f6; BYTE $0x03 // testb	$3, 88(%rsp)                    # 1-byte Folded Reload
	JE   LBB8_88
	WORD $0x3145; BYTE $0xc0     // xorl	%r8d, %r8d

LBB8_87:
	LONG $0x487cb162; WORD $0x0c10; BYTE $0x02 // vmovups	(%rdx,%r8), %zmm1
	LONG $0x48759262; WORD $0x04b8; BYTE $0x01 // vfmadd231ps	(%r9,%r8), %zmm1, %zmm0 # zmm0 = (zmm1 * mem) + zmm0
	LONG $0x40c08349                           // addq	$64, %r8
	WORD $0x3944; BYTE $0xc7                   // cmpl	%r8d, %edi
	JNE  LBB8_87

LBB8_88:
	LONG $0x244c0348; BYTE $0x30 // addq	48(%rsp), %rcx                  # 8-byte Folded Reload
	WORD $0x8948; BYTE $0xca     // movq	%rcx, %rdx
	LONG $0x244c8b48; BYTE $0x40 // movq	64(%rsp), %rcx                  # 8-byte Reload
	LONG $0x247c8b4c; BYTE $0x20 // movq	32(%rsp), %r15                  # 8-byte Reload
	JMP  LBB8_89

LBB8_32:
	LONG $0xc057f8c5         // vxorps	%xmm0, %xmm0, %xmm0
	WORD $0x8948; BYTE $0xf1 // movq	%rsi, %rcx
	JMP  LBB8_89

LBB8_83:
	WORD $0x8948; BYTE $0xca // movq	%rcx, %rdx
	WORD $0x894c; BYTE $0xf1 // movq	%r14, %rcx

LBB8_89:
	LONG $0x48fdf362; WORD $0xc11b; BYTE $0x01 // vextractf64x4	$1, %zmm0, %ymm1
	LONG $0xc158fcc5                           // vaddps	%ymm1, %ymm0, %ymm0
	LONG $0x197de3c4; WORD $0x01c1             // vextractf128	$1, %ymm0, %xmm1
	LONG $0xc158f8c5                           // vaddps	%xmm1, %xmm0, %xmm0
	LONG $0xc8c6f9c5; BYTE $0x01               // vshufpd	$1, %xmm0, %xmm0, %xmm1         # xmm1 = xmm0[1,0]
	LONG $0xc158f8c5                           // vaddps	%xmm1, %xmm0, %xmm0
	LONG $0xc816fac5                           // vmovshdup	%xmm0, %xmm1            # xmm1 = xmm0[1,1,3,3]
	LONG $0xc158fac5                           // vaddss	%xmm1, %xmm0, %xmm0
	WORD $0x8545; BYTE $0xd2                   // testl	%r10d, %r10d
	JLE  LBB8_95
	LONG $0x247c8348; WORD $0x0348             // cmpq	$3, 72(%rsp)                    # 8-byte Folded Reload
	JAE  LBB8_97
	WORD $0x3145; BYTE $0xc9                   // xorl	%r9d, %r9d
	JMP  LBB8_92

LBB8_97:
	WORD $0x3145; BYTE $0xc9 // xorl	%r9d, %r9d

LBB8_98:
	LONG $0x107aa1c4; WORD $0x890c             // vmovss	(%rcx,%r9,4), %xmm1             # xmm1 = mem[0],zero,zero,zero
	LONG $0x107aa1c4; WORD $0x8954; BYTE $0x04 // vmovss	4(%rcx,%r9,4), %xmm2            # xmm2 = mem[0],zero,zero,zero
	LONG $0x9979a2c4; WORD $0x8a0c             // vfmadd132ss	(%rdx,%r9,4), %xmm0, %xmm1 # xmm1 = (xmm1 * mem) + xmm0
	LONG $0xb969a2c4; WORD $0x8a4c; BYTE $0x04 // vfmadd231ss	4(%rdx,%r9,4), %xmm2, %xmm1 # xmm1 = (xmm2 * mem) + xmm1
	LONG $0x107aa1c4; WORD $0x8954; BYTE $0x08 // vmovss	8(%rcx,%r9,4), %xmm2            # xmm2 = mem[0],zero,zero,zero
	LONG $0x9971a2c4; WORD $0x8a54; BYTE $0x08 // vfmadd132ss	8(%rdx,%r9,4), %xmm1, %xmm2 # xmm2 = (xmm2 * mem) + xmm1
	LONG $0x107aa1c4; WORD $0x8944; BYTE $0x0c // vmovss	12(%rcx,%r9,4), %xmm0           # xmm0 = mem[0],zero,zero,zero
	LONG $0x9969a2c4; WORD $0x8a44; BYTE $0x0c // vfmadd132ss	12(%rdx,%r9,4), %xmm2, %xmm0 # xmm0 = (xmm0 * mem) + xmm2
	LONG $0x04c18349                           // addq	$4, %r9
	WORD $0x394c; BYTE $0xcb                   // cmpq	%r9, %rbx
	JNE  LBB8_98

LBB8_92:
	WORD $0x854d; BYTE $0xed // testq	%r13, %r13
	JE   LBB8_95
	LONG $0x8a148d4a         // leaq	(%rdx,%r9,4), %rdx
	LONG $0x890c8d4a         // leaq	(%rcx,%r9,4), %rcx
	WORD $0x3145; BYTE $0xc0 // xorl	%r8d, %r8d

LBB8_94:
	LONG $0x107aa1c4; WORD $0x810c // vmovss	(%rcx,%r8,4), %xmm1             # xmm1 = mem[0],zero,zero,zero
	LONG $0xb971a2c4; WORD $0x8204 // vfmadd231ss	(%rdx,%r8,4), %xmm1, %xmm0 # xmm0 = (xmm1 * mem) + xmm0
	WORD $0xff49; BYTE $0xc0       // incq	%r8
	WORD $0x394d; BYTE $0xc5       // cmpq	%r8, %r13
	JNE  LBB8_94
	JMP  LBB8_95

LBB8_34:
	WORD $0xce89             // movl	%ecx, %esi
	LONG $0xff4e8d48         // leaq	-1(%rsi), %rcx
	WORD $0xf789             // movl	%esi, %edi
	WORD $0xe783; BYTE $0x03 // andl	$3, %edi
	WORD $0xe683; BYTE $0xfc // andl	$-4, %esi
	WORD $0xd231             // xorl	%edx, %edx
	JMP  LBB8_35

LBB8_80:
	WORD $0xff48; BYTE $0xc2     // incq	%rdx
	LONG $0x24543b48; BYTE $0x18 // cmpq	24(%rsp), %rdx                  # 8-byte Folded Reload
	JE   LBB8_145

LBB8_35:
	WORD $0x8949; BYTE $0xd0       // movq	%rdx, %r8
	LONG $0x44af0f4c; WORD $0x1024 // imulq	16(%rsp), %r8                   # 8-byte Folded Reload
	LONG $0x245c8b4c; BYTE $0x38   // movq	56(%rsp), %r11                  # 8-byte Reload
	LONG $0x830c8d4f               // leaq	(%r11,%r8,4), %r9
	LONG $0x831c8d4f               // leaq	(%r11,%r8,4), %r11
	LONG $0x40c38349               // addq	$64, %r11
	WORD $0x8949; BYTE $0xd0       // movq	%rdx, %r8
	LONG $0x44af0f4c; WORD $0x0824 // imulq	8(%rsp), %r8                    # 8-byte Folded Reload
	LONG $0x245c8b48; BYTE $0x50   // movq	80(%rsp), %rbx                  # 8-byte Reload
	LONG $0x831c8d4a               // leaq	(%rbx,%r8,4), %rbx
	WORD $0x3145; BYTE $0xf6       // xorl	%r14d, %r14d
	JMP  LBB8_36

LBB8_79:
	LONG $0x117aa1c4; WORD $0xb304 // vmovss	%xmm0, (%rbx,%r14,4)
	WORD $0xff49; BYTE $0xc6       // incq	%r14
	LONG $0x24743b4c; BYTE $0x08   // cmpq	8(%rsp), %r14                   # 8-byte Folded Reload
	JE   LBB8_80

LBB8_36:
	WORD $0x894d; BYTE $0xf0       // movq	%r14, %r8
	LONG $0x44af0f4c; WORD $0x1024 // imulq	16(%rsp), %r8                   # 8-byte Folded Reload
	LONG $0x247c8b4c; BYTE $0x20   // movq	32(%rsp), %r15                  # 8-byte Reload
	LONG $0x873c8d4f               // leaq	(%r15,%r8,4), %r15
	WORD $0xc085                   // testl	%eax, %eax
	JLE  LBB8_37
	LONG $0x487cd162; WORD $0x0110 // vmovups	(%r9), %zmm0
	LONG $0x487cd162; WORD $0x0759 // vmulps	(%r15), %zmm0, %zmm0
	LONG $0x40c78349               // addq	$64, %r15
	WORD $0x894d; BYTE $0xdc       // movq	%r11, %r12
	JMP  LBB8_74

LBB8_37:
	LONG $0xc057f8c5         // vxorps	%xmm0, %xmm0, %xmm0
	WORD $0x894d; BYTE $0xcc // movq	%r9, %r12

LBB8_74:
	LONG $0x48fdf362; WORD $0xc11b; BYTE $0x01 // vextractf64x4	$1, %zmm0, %ymm1
	LONG $0xc158fcc5                           // vaddps	%ymm1, %ymm0, %ymm0
	LONG $0x197de3c4; WORD $0x01c1             // vextractf128	$1, %ymm0, %xmm1
	LONG $0xc158f8c5                           // vaddps	%xmm1, %xmm0, %xmm0
	LONG $0xc8c6f9c5; BYTE $0x01               // vshufpd	$1, %xmm0, %xmm0, %xmm1         # xmm1 = xmm0[1,0]
	LONG $0xc158f8c5                           // vaddps	%xmm1, %xmm0, %xmm0
	LONG $0x107cc1c4; WORD $0x240c             // vmovups	(%r12), %ymm1
	LONG $0x5974c1c4; BYTE $0x0f               // vmulps	(%r15), %ymm1, %ymm1
	LONG $0x197de3c4; WORD $0x01ca             // vextractf128	$1, %ymm1, %xmm2
	LONG $0xc958e8c5                           // vaddps	%xmm1, %xmm2, %xmm1
	LONG $0xd1c6f1c5; BYTE $0x01               // vshufpd	$1, %xmm1, %xmm1, %xmm2         # xmm2 = xmm1[1,0]
	LONG $0xca58f0c5                           // vaddps	%xmm2, %xmm1, %xmm1
	LONG $0xd116fac5                           // vmovshdup	%xmm1, %xmm2            # xmm2 = xmm1[1,1,3,3]
	LONG $0xca58f2c5                           // vaddss	%xmm2, %xmm1, %xmm1
	LONG $0xd016fac5                           // vmovshdup	%xmm0, %xmm2            # xmm2 = xmm0[1,1,3,3]
	LONG $0xc258fac5                           // vaddss	%xmm2, %xmm0, %xmm0
	LONG $0xc158fac5                           // vaddss	%xmm1, %xmm0, %xmm0
	LONG $0x09fa8341                           // cmpl	$9, %r10d
	JL   LBB8_79
	WORD $0x3145; BYTE $0xed                   // xorl	%r13d, %r13d
	LONG $0x03f98348                           // cmpq	$3, %rcx
	JB   LBB8_76

LBB8_81:
	LONG $0x107a81c4; WORD $0xac4c; BYTE $0x20 // vmovss	32(%r12,%r13,4), %xmm1          # xmm1 = mem[0],zero,zero,zero
	LONG $0x107a81c4; WORD $0xac54; BYTE $0x24 // vmovss	36(%r12,%r13,4), %xmm2          # xmm2 = mem[0],zero,zero,zero
	LONG $0x997982c4; WORD $0xaf4c; BYTE $0x20 // vfmadd132ss	32(%r15,%r13,4), %xmm0, %xmm1 # xmm1 = (xmm1 * mem) + xmm0
	LONG $0xb96982c4; WORD $0xaf4c; BYTE $0x24 // vfmadd231ss	36(%r15,%r13,4), %xmm2, %xmm1 # xmm1 = (xmm2 * mem) + xmm1
	LONG $0x107a81c4; WORD $0xac54; BYTE $0x28 // vmovss	40(%r12,%r13,4), %xmm2          # xmm2 = mem[0],zero,zero,zero
	LONG $0x997182c4; WORD $0xaf54; BYTE $0x28 // vfmadd132ss	40(%r15,%r13,4), %xmm1, %xmm2 # xmm2 = (xmm2 * mem) + xmm1
	LONG $0x107a81c4; WORD $0xac44; BYTE $0x2c // vmovss	44(%r12,%r13,4), %xmm0          # xmm0 = mem[0],zero,zero,zero
	LONG $0x996982c4; WORD $0xaf44; BYTE $0x2c // vfmadd132ss	44(%r15,%r13,4), %xmm2, %xmm0 # xmm0 = (xmm0 * mem) + xmm2
	LONG $0x04c58349                           // addq	$4, %r13
	WORD $0x394c; BYTE $0xee                   // cmpq	%r13, %rsi
	JNE  LBB8_81

LBB8_76:
	WORD $0x8548; BYTE $0xff // testq	%rdi, %rdi
	JE   LBB8_79
	LONG $0xaf048d4f         // leaq	(%r15,%r13,4), %r8
	LONG $0x20c08349         // addq	$32, %r8
	LONG $0xac3c8d4f         // leaq	(%r12,%r13,4), %r15
	LONG $0x20c78349         // addq	$32, %r15
	WORD $0x3145; BYTE $0xe4 // xorl	%r12d, %r12d

LBB8_78:
	LONG $0x107a81c4; WORD $0xa70c // vmovss	(%r15,%r12,4), %xmm1            # xmm1 = mem[0],zero,zero,zero
	LONG $0xb97182c4; WORD $0xa004 // vfmadd231ss	(%r8,%r12,4), %xmm1, %xmm0 # xmm0 = (xmm1 * mem) + xmm0
	WORD $0xff49; BYTE $0xc4       // incq	%r12
	WORD $0x394c; BYTE $0xe7       // cmpq	%r12, %rdi
	JNE  LBB8_78
	JMP  LBB8_79

LBB8_39:
	WORD $0x8948; BYTE $0xc1               // movq	%rax, %rcx
	LONG $0x06e1c148                       // shlq	$6, %rcx
	QUAD $0x003fffffff80be48; WORD $0x0000 // movabsq	$274877906816, %rsi             # imm = 0x3FFFFFFF80
	WORD $0x0148; BYTE $0xf1               // addq	%rsi, %rcx
	LONG $0x40ce8348                       // orq	$64, %rsi
	WORD $0x2148; BYTE $0xce               // andq	%rcx, %rsi
	WORD $0x788d; BYTE $0xff               // leal	-1(%rax), %edi
	LONG $0xfe508d44                       // leal	-2(%rax), %r10d
	WORD $0xf989                           // movl	%edi, %ecx
	WORD $0xe183; BYTE $0xfc               // andl	$-4, %ecx
	LONG $0x30244c89                       // movl	%ecx, 48(%rsp)                  # 4-byte Spill
	WORD $0xc189                           // movl	%eax, %ecx
	WORD $0xc9fe                           // decb	%cl
	WORD $0xb60f; BYTE $0xd9               // movzbl	%cl, %ebx
	WORD $0xe383; BYTE $0x03               // andl	$3, %ebx
	WORD $0xe3c1; BYTE $0x06               // shll	$6, %ebx
	WORD $0x3145; BYTE $0xc9               // xorl	%r9d, %r9d
	JMP  LBB8_40

LBB8_72:
	LONG $0x244c8b4c; BYTE $0x40 // movq	64(%rsp), %r9                   # 8-byte Reload
	WORD $0xff49; BYTE $0xc1     // incq	%r9
	LONG $0x244c3b4c; BYTE $0x18 // cmpq	24(%rsp), %r9                   # 8-byte Folded Reload
	JE   LBB8_145

LBB8_40:
	WORD $0x894c; BYTE $0xc9       // movq	%r9, %rcx
	LONG $0x4caf0f48; WORD $0x1024 // imulq	16(%rsp), %rcx                  # 8-byte Folded Reload
	LONG $0x24448b4c; BYTE $0x38   // movq	56(%rsp), %r8                   # 8-byte Reload
	LONG $0x88148d49               // leaq	(%r8,%rcx,4), %rdx
	LONG $0x880c8d49               // leaq	(%r8,%rcx,4), %rcx
	LONG $0x40c18348               // addq	$64, %rcx
	LONG $0x244c8948; BYTE $0x48   // movq	%rcx, 72(%rsp)                  # 8-byte Spill
	LONG $0x244c894c; BYTE $0x40   // movq	%r9, 64(%rsp)                   # 8-byte Spill
	WORD $0x894c; BYTE $0xc9       // movq	%r9, %rcx
	LONG $0x4caf0f48; WORD $0x0824 // imulq	8(%rsp), %rcx                   # 8-byte Folded Reload
	LONG $0x24448b4c; BYTE $0x50   // movq	80(%rsp), %r8                   # 8-byte Reload
	LONG $0x88348d4d               // leaq	(%r8,%rcx,4), %r14
	WORD $0x3145; BYTE $0xff       // xorl	%r15d, %r15d
	JMP  LBB8_41

LBB8_71:
	LONG $0x48fdf362; WORD $0xc11b; BYTE $0x01 // vextractf64x4	$1, %zmm0, %ymm1
	LONG $0xc158fcc5                           // vaddps	%ymm1, %ymm0, %ymm0
	LONG $0x197de3c4; WORD $0x01c1             // vextractf128	$1, %ymm0, %xmm1
	LONG $0xc158f8c5                           // vaddps	%xmm1, %xmm0, %xmm0
	LONG $0xc8c6f9c5; BYTE $0x01               // vshufpd	$1, %xmm0, %xmm0, %xmm1         # xmm1 = xmm0[1,0]
	LONG $0xc158f8c5                           // vaddps	%xmm1, %xmm0, %xmm0
	LONG $0x107cc1c4; WORD $0x314c; BYTE $0x40 // vmovups	64(%r9,%rsi), %ymm1
	LONG $0x5974c1c4; WORD $0x334c; BYTE $0x40 // vmulps	64(%r11,%rsi), %ymm1, %ymm1
	LONG $0x197de3c4; WORD $0x01ca             // vextractf128	$1, %ymm1, %xmm2
	LONG $0xc958e8c5                           // vaddps	%xmm1, %xmm2, %xmm1
	LONG $0xd1c6f1c5; BYTE $0x01               // vshufpd	$1, %xmm1, %xmm1, %xmm2         # xmm2 = xmm1[1,0]
	LONG $0xca58f0c5                           // vaddps	%xmm2, %xmm1, %xmm1
	LONG $0xd116fac5                           // vmovshdup	%xmm1, %xmm2            # xmm2 = xmm1[1,1,3,3]
	LONG $0xca58f2c5                           // vaddss	%xmm2, %xmm1, %xmm1
	LONG $0xd016fac5                           // vmovshdup	%xmm0, %xmm2            # xmm2 = xmm0[1,1,3,3]
	LONG $0xc258fac5                           // vaddss	%xmm2, %xmm0, %xmm0
	LONG $0xc158fac5                           // vaddss	%xmm1, %xmm0, %xmm0
	LONG $0x117a81c4; WORD $0xbe04             // vmovss	%xmm0, (%r14,%r15,4)
	WORD $0xff49; BYTE $0xc7                   // incq	%r15
	LONG $0x247c3b4c; BYTE $0x08               // cmpq	8(%rsp), %r15                   # 8-byte Folded Reload
	JE   LBB8_72

LBB8_41:
	WORD $0x894c; BYTE $0xf9       // movq	%r15, %rcx
	LONG $0x4caf0f48; WORD $0x1024 // imulq	16(%rsp), %rcx                  # 8-byte Folded Reload
	LONG $0x24448b4c; BYTE $0x20   // movq	32(%rsp), %r8                   # 8-byte Reload
	LONG $0x881c8d4d               // leaq	(%r8,%rcx,4), %r11
	WORD $0xc085                   // testl	%eax, %eax
	JLE  LBB8_42
	LONG $0x487cf162; WORD $0x0210 // vmovups	(%rdx), %zmm0
	LONG $0x487cd162; WORD $0x0359 // vmulps	(%r11), %zmm0, %zmm0
	LONG $0x40c38349               // addq	$64, %r11
	LONG $0x244c8b4c; BYTE $0x48   // movq	72(%rsp), %r9                   # 8-byte Reload
	LONG $0x03fa8341               // cmpl	$3, %r10d
	JAE  LBB8_66

LBB8_65:
	WORD $0x894d; BYTE $0xcd // movq	%r9, %r13
	WORD $0x894d; BYTE $0xdc // movq	%r11, %r12
	JMP  LBB8_68

LBB8_42:
	LONG $0xc057f8c5         // vxorps	%xmm0, %xmm0, %xmm0
	WORD $0x8949; BYTE $0xd1 // movq	%rdx, %r9
	LONG $0x03fa8341         // cmpl	$3, %r10d
	JB   LBB8_65

LBB8_66:
	LONG $0x30244c8b         // movl	48(%rsp), %ecx                  # 4-byte Reload
	WORD $0x894d; BYTE $0xcd // movq	%r9, %r13
	WORD $0x894d; BYTE $0xdc // movq	%r11, %r12

LBB8_67:
	LONG $0x487cd162; WORD $0x4d10; BYTE $0x00 // vmovups	(%r13), %zmm1
	LONG $0x487cd162; WORD $0x5510; BYTE $0x01 // vmovups	64(%r13), %zmm2
	LONG $0x487cd162; WORD $0x5d10; BYTE $0x02 // vmovups	128(%r13), %zmm3
	LONG $0x487dd262; WORD $0x0c98; BYTE $0x24 // vfmadd132ps	(%r12), %zmm0, %zmm1    # zmm1 = (zmm1 * mem) + zmm0
	QUAD $0x01244cb8486dd262                   // vfmadd231ps	64(%r12), %zmm2, %zmm1  # zmm1 = (zmm2 * mem) + zmm1
	QUAD $0x02244cb84865d262                   // vfmadd231ps	128(%r12), %zmm3, %zmm1 # zmm1 = (zmm3 * mem) + zmm1
	LONG $0x487cd162; WORD $0x5510; BYTE $0x03 // vmovups	192(%r13), %zmm2
	LONG $0x487cf162; WORD $0xc128             // vmovaps	%zmm1, %zmm0
	QUAD $0x032444b8486dd262                   // vfmadd231ps	192(%r12), %zmm2, %zmm0 # zmm0 = (zmm2 * mem) + zmm0
	LONG $0x00c58149; WORD $0x0001; BYTE $0x00 // addq	$256, %r13                      # imm = 0x100
	LONG $0x00c48149; WORD $0x0001; BYTE $0x00 // addq	$256, %r12                      # imm = 0x100
	WORD $0xc183; BYTE $0xfc                   // addl	$-4, %ecx
	JNE  LBB8_67

LBB8_68:
	LONG $0x03c7f640 // testb	$3, %dil
	JE   LBB8_71
	WORD $0xc931     // xorl	%ecx, %ecx

LBB8_70:
	QUAD $0x000d4c10487cd162                   // vmovups	(%r13,%rcx), %zmm1
	LONG $0x4875d262; WORD $0x04b8; BYTE $0x0c // vfmadd231ps	(%r12,%rcx), %zmm1, %zmm0 # zmm0 = (zmm1 * mem) + zmm0
	LONG $0x40c18348                           // addq	$64, %rcx
	WORD $0xcb39                               // cmpl	%ecx, %ebx
	JNE  LBB8_70
	JMP  LBB8_71

LBB8_145:
	LONG $0xd8658d48         // leaq	-40(%rbp), %rsp
	BYTE $0x5b               // popq	%rbx
	WORD $0x5c41             // popq	%r12
	WORD $0x5d41             // popq	%r13
	WORD $0x5e41             // popq	%r14
	WORD $0x5f41             // popq	%r15
	BYTE $0x5d               // popq	%rbp
	WORD $0xf8c5; BYTE $0x77 // vzeroupper
	BYTE $0xc3               // retq
