# syntax = docker/dockerfile:1-experimental

############################
# STEP 1 build executable binary
############################
FROM debian:bookworm

# Install IntelÂ® oneAPI Toolkits

RUN apt update && apt install -y wget gnupg2 git

RUN wget -O- https://apt.repos.intel.com/intel-gpg-keys/GPG-PUB-KEY-INTEL-SW-PRODUCTS.PUB \
    | gpg --dearmor | tee /usr/share/keyrings/oneapi-archive-keyring.gpg > /dev/null

RUN echo "deb [signed-by=/usr/share/keyrings/oneapi-archive-keyring.gpg] https://apt.repos.intel.com/oneapi all main" | tee /etc/apt/sources.list.d/oneAPI.list

RUN apt update && apt install -y intel-oneapi-base-toolkit

# Install Go

COPY --from=golang:1.25 /usr/local/go/ /usr/local/go/

ENV PATH /usr/local/go/bin:$PATH

RUN go version

WORKDIR /src

# Build Gorse

COPY go.* ./

RUN go mod download

COPY . ./

RUN --mount=type=cache,target=/root/.cache/go-build \
    . /opt/intel/oneapi/setvars.sh && \
    cd cmd/gorse-in-one && \
    go build -tags mkl -ldflags=" \
       -X 'github.com/gorse-io/gorse/cmd/version.Version=$(git describe --tags $(git rev-parse HEAD))' \
       -X 'github.com/gorse-io/gorse/cmd/version.GitCommit=$(git rev-parse HEAD)' \
       -X 'github.com/gorse-io/gorse/cmd/version.BuildTime=$(date)'" .

RUN /src/cmd/gorse-in-one/gorse-in-one --version

############################
# STEP 2 build runtime image
############################
FROM alpine

COPY --from=0 /src/cmd/gorse-in-one/gorse-in-one /usr/bin/gorse-in-one

ENV USER root

ENTRYPOINT ["/usr/bin/gorse-in-one", "-c", "/etc/gorse/config.toml"]
